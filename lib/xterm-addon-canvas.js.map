{"version":3,"file":"xterm-addon-canvas.js","mappings":"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","sources":["webpack://CanvasAddon/webpack/universalModuleDefinition","webpack://CanvasAddon/./src/BaseRenderLayer.ts","webpack://CanvasAddon/./src/CanvasRenderer.ts","webpack://CanvasAddon/./src/CursorRenderLayer.ts","webpack://CanvasAddon/./src/GridCache.ts","webpack://CanvasAddon/./src/LinkRenderLayer.ts","webpack://CanvasAddon/./src/SelectionRenderLayer.ts","webpack://CanvasAddon/./src/TextRenderLayer.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/CellColorResolver.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/CharAtlasCache.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/CharAtlasUtils.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/Constants.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/CustomGlyphs.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/DevicePixelObserver.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/RendererUtils.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/SelectionRenderModel.ts","webpack://CanvasAddon/../../src/browser/renderer/shared/TextureAtlas.ts","webpack://CanvasAddon/../../src/browser/services/CharacterJoinerService.ts","webpack://CanvasAddon/../../src/common/Color.ts","webpack://CanvasAddon/../../src/common/EventEmitter.ts","webpack://CanvasAddon/../../src/common/Lifecycle.ts","webpack://CanvasAddon/../../src/common/MultiKeyMap.ts","webpack://CanvasAddon/../../src/common/Platform.ts","webpack://CanvasAddon/../../src/common/TaskQueue.ts","webpack://CanvasAddon/../../src/common/buffer/AttributeData.ts","webpack://CanvasAddon/../../src/common/buffer/CellData.ts","webpack://CanvasAddon/../../src/common/buffer/Constants.ts","webpack://CanvasAddon/../../src/common/input/TextDecoder.ts","webpack://CanvasAddon/../../src/common/services/ServiceRegistry.ts","webpack://CanvasAddon/../../src/common/services/Services.ts","webpack://CanvasAddon/webpack/bootstrap","webpack://CanvasAddon/./src/CanvasAddon.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CanvasAddon\"] = factory();\n\telse\n\t\troot[\"CanvasAddon\"] = factory();\n})(self, () => {\nreturn ","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { acquireTextureAtlas } from 'browser/renderer/shared/CharAtlasCache';\r\nimport { TEXT_BASELINE } from 'browser/renderer/shared/Constants';\r\nimport { tryDrawCustomChar } from 'browser/renderer/shared/CustomGlyphs';\r\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\r\nimport { IRasterizedGlyph, IRenderDimensions, ISelectionRenderModel, ITextureAtlas } from 'browser/renderer/shared/Types';\r\nimport { createSelectionRenderModel } from 'browser/renderer/shared/SelectionRenderModel';\r\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\r\nimport { ReadonlyColorSet } from 'browser/Types';\r\nimport { CellData } from 'common/buffer/CellData';\r\nimport { WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\r\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\r\nimport { ICellData, IDisposable } from 'common/Types';\r\nimport { Terminal } from 'xterm';\r\nimport { IRenderLayer } from './Types';\r\nimport { CellColorResolver } from 'browser/renderer/shared/CellColorResolver';\r\nimport { Disposable, toDisposable } from 'common/Lifecycle';\r\nimport { isSafari } from 'common/Platform';\r\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\r\n\r\nexport abstract class BaseRenderLayer extends Disposable implements IRenderLayer {\r\n  private _canvas: HTMLCanvasElement;\r\n  protected _ctx!: CanvasRenderingContext2D;\r\n  private _deviceCharWidth: number = 0;\r\n  private _deviceCharHeight: number = 0;\r\n  private _deviceCellWidth: number = 0;\r\n  private _deviceCellHeight: number = 0;\r\n  private _deviceCharLeft: number = 0;\r\n  private _deviceCharTop: number = 0;\r\n\r\n  protected _selectionModel: ISelectionRenderModel = createSelectionRenderModel();\r\n  private _cellColorResolver: CellColorResolver;\r\n  private _bitmapGenerator: (BitmapGenerator | undefined)[] = [];\r\n\r\n  protected _charAtlas!: ITextureAtlas;\r\n  private _charAtlasDisposable?: IDisposable;\r\n\r\n  public get canvas(): HTMLCanvasElement { return this._canvas; }\r\n  public get cacheCanvas(): HTMLCanvasElement { return this._charAtlas?.pages[0].canvas!; }\r\n\r\n  private readonly _onAddTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\r\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\r\n\r\n  constructor(\r\n    private readonly _terminal: Terminal,\r\n    private _container: HTMLElement,\r\n    id: string,\r\n    zIndex: number,\r\n    private _alpha: boolean,\r\n    protected readonly _themeService: IThemeService,\r\n    protected readonly _bufferService: IBufferService,\r\n    protected readonly _optionsService: IOptionsService,\r\n    protected readonly _decorationService: IDecorationService,\r\n    protected readonly _coreBrowserService: ICoreBrowserService\r\n  ) {\r\n    super();\r\n    this._cellColorResolver = new CellColorResolver(this._terminal, this._selectionModel, this._decorationService, this._coreBrowserService, this._themeService);\r\n    this._canvas = document.createElement('canvas');\r\n    this._canvas.classList.add(`xterm-${id}-layer`);\r\n    this._canvas.style.zIndex = zIndex.toString();\r\n    this._initCanvas();\r\n    this._container.appendChild(this._canvas);\r\n    this._refreshCharAtlas(this._themeService.colors);\r\n    this.register(this._themeService.onChangeColors(e => {\r\n      this._refreshCharAtlas(e);\r\n      this.reset();\r\n      // Trigger selection changed as it's handled separately to regular rendering\r\n      this.handleSelectionChanged(this._selectionModel.selectionStart, this._selectionModel.selectionEnd, this._selectionModel.columnSelectMode);\r\n    }));\r\n\r\n    this.register(toDisposable(() => {\r\n      this._canvas.remove();\r\n      this._charAtlas?.dispose();\r\n    }));\r\n  }\r\n\r\n  private _initCanvas(): void {\r\n    this._ctx = throwIfFalsy(this._canvas.getContext('2d', { alpha: this._alpha }));\r\n    // Draw the background if this is an opaque layer\r\n    if (!this._alpha) {\r\n      this._clearAll();\r\n    }\r\n  }\r\n\r\n  public handleBlur(): void {}\r\n  public handleFocus(): void {}\r\n  public handleCursorMove(): void {}\r\n  public handleGridChanged(startRow: number, endRow: number): void {}\r\n\r\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\r\n    this._selectionModel.update(this._terminal, start, end, columnSelectMode);\r\n  }\r\n\r\n  protected _setTransparency(alpha: boolean): void {\r\n    // Do nothing when alpha doesn't change\r\n    if (alpha === this._alpha) {\r\n      return;\r\n    }\r\n\r\n    // Create new canvas and replace old one\r\n    const oldCanvas = this._canvas;\r\n    this._alpha = alpha;\r\n    // Cloning preserves properties\r\n    this._canvas = this._canvas.cloneNode() as HTMLCanvasElement;\r\n    this._initCanvas();\r\n    this._container.replaceChild(this._canvas, oldCanvas);\r\n\r\n    // Regenerate char atlas and force a full redraw\r\n    this._refreshCharAtlas(this._themeService.colors);\r\n    this.handleGridChanged(0, this._bufferService.rows - 1);\r\n  }\r\n\r\n  /**\r\n   * Refreshes the char atlas, aquiring a new one if necessary.\r\n   * @param colorSet The color set to use for the char atlas.\r\n   */\r\n  private _refreshCharAtlas(colorSet: ReadonlyColorSet): void {\r\n    if (this._deviceCharWidth <= 0 && this._deviceCharHeight <= 0) {\r\n      return;\r\n    }\r\n    this._charAtlasDisposable?.dispose();\r\n    this._charAtlas = acquireTextureAtlas(this._terminal, this._optionsService.rawOptions, colorSet, this._deviceCellWidth, this._deviceCellHeight, this._deviceCharWidth, this._deviceCharHeight, this._coreBrowserService.dpr);\r\n    this._charAtlasDisposable = forwardEvent(this._charAtlas.onAddTextureAtlasCanvas, this._onAddTextureAtlasCanvas);\r\n    this._charAtlas.warmUp();\r\n    for (let i = 0; i < this._charAtlas.pages.length; i++) {\r\n      this._bitmapGenerator[i] = new BitmapGenerator(this._charAtlas.pages[i].canvas);\r\n    }\r\n  }\r\n\r\n  public resize(dim: IRenderDimensions): void {\r\n    this._deviceCellWidth = dim.device.cell.width;\r\n    this._deviceCellHeight = dim.device.cell.height;\r\n    this._deviceCharWidth = dim.device.char.width;\r\n    this._deviceCharHeight = dim.device.char.height;\r\n    this._deviceCharLeft = dim.device.char.left;\r\n    this._deviceCharTop = dim.device.char.top;\r\n    this._canvas.width = dim.device.canvas.width;\r\n    this._canvas.height = dim.device.canvas.height;\r\n    this._canvas.style.width = `${dim.css.canvas.width}px`;\r\n    this._canvas.style.height = `${dim.css.canvas.height}px`;\r\n\r\n    // Draw the background if this is an opaque layer\r\n    if (!this._alpha) {\r\n      this._clearAll();\r\n    }\r\n\r\n    this._refreshCharAtlas(this._themeService.colors);\r\n  }\r\n\r\n  public abstract reset(): void;\r\n\r\n  public clearTextureAtlas(): void {\r\n    this._charAtlas?.clearTexture();\r\n  }\r\n\r\n  /**\r\n   * Fills 1+ cells completely. This uses the existing fillStyle on the context.\r\n   * @param x The column to start at.\r\n   * @param y The row to start at\r\n   * @param width The number of columns to fill.\r\n   * @param height The number of rows to fill.\r\n   */\r\n  protected _fillCells(x: number, y: number, width: number, height: number): void {\r\n    this._ctx.fillRect(\r\n      x * this._deviceCellWidth,\r\n      y * this._deviceCellHeight,\r\n      width * this._deviceCellWidth,\r\n      height * this._deviceCellHeight);\r\n  }\r\n\r\n  /**\r\n   * Fills a 1px line (2px on HDPI) at the middle of the cell. This uses the\r\n   * existing fillStyle on the context.\r\n   * @param x The column to fill.\r\n   * @param y The row to fill.\r\n   */\r\n  protected _fillMiddleLineAtCells(x: number, y: number, width: number = 1): void {\r\n    const cellOffset = Math.ceil(this._deviceCellHeight * 0.5);\r\n    this._ctx.fillRect(\r\n      x * this._deviceCellWidth,\r\n      (y + 1) * this._deviceCellHeight - cellOffset - this._coreBrowserService.dpr,\r\n      width * this._deviceCellWidth,\r\n      this._coreBrowserService.dpr);\r\n  }\r\n\r\n  /**\r\n   * Fills a 1px line (2px on HDPI) at the bottom of the cell. This uses the\r\n   * existing fillStyle on the context.\r\n   * @param x The column to fill.\r\n   * @param y The row to fill.\r\n   */\r\n  protected _fillBottomLineAtCells(x: number, y: number, width: number = 1, pixelOffset: number = 0): void {\r\n    this._ctx.fillRect(\r\n      x * this._deviceCellWidth,\r\n      (y + 1) * this._deviceCellHeight + pixelOffset - this._coreBrowserService.dpr - 1 /* Ensure it's drawn within the cell */,\r\n      width * this._deviceCellWidth,\r\n      this._coreBrowserService.dpr);\r\n  }\r\n\r\n  protected _curlyUnderlineAtCell(x: number, y: number, width: number = 1): void {\r\n    this._ctx.save();\r\n    this._ctx.beginPath();\r\n    this._ctx.strokeStyle = this._ctx.fillStyle;\r\n    const lineWidth = this._coreBrowserService.dpr;\r\n    this._ctx.lineWidth = lineWidth;\r\n    for (let xOffset = 0; xOffset < width; xOffset++) {\r\n      const xLeft = (x + xOffset) * this._deviceCellWidth;\r\n      const xMid = (x + xOffset + 0.5) * this._deviceCellWidth;\r\n      const xRight = (x + xOffset + 1) * this._deviceCellWidth;\r\n      const yMid = (y + 1) * this._deviceCellHeight - lineWidth - 1;\r\n      const yMidBot = yMid - lineWidth;\r\n      const yMidTop = yMid + lineWidth;\r\n      this._ctx.moveTo(xLeft, yMid);\r\n      this._ctx.bezierCurveTo(\r\n        xLeft, yMidBot,\r\n        xMid, yMidBot,\r\n        xMid, yMid\r\n      );\r\n      this._ctx.bezierCurveTo(\r\n        xMid, yMidTop,\r\n        xRight, yMidTop,\r\n        xRight, yMid\r\n      );\r\n    }\r\n    this._ctx.stroke();\r\n    this._ctx.restore();\r\n  }\r\n\r\n  protected _dottedUnderlineAtCell(x: number, y: number, width: number = 1): void {\r\n    this._ctx.save();\r\n    this._ctx.beginPath();\r\n    this._ctx.strokeStyle = this._ctx.fillStyle;\r\n    const lineWidth = this._coreBrowserService.dpr;\r\n    this._ctx.lineWidth = lineWidth;\r\n    this._ctx.setLineDash([lineWidth * 2, lineWidth]);\r\n    const xLeft = x * this._deviceCellWidth;\r\n    const yMid = (y + 1) * this._deviceCellHeight - lineWidth - 1;\r\n    this._ctx.moveTo(xLeft, yMid);\r\n    for (let xOffset = 0; xOffset < width; xOffset++) {\r\n      // const xLeft = x * this._deviceCellWidth;\r\n      const xRight = (x + width + xOffset) * this._deviceCellWidth;\r\n      this._ctx.lineTo(xRight, yMid);\r\n    }\r\n    this._ctx.stroke();\r\n    this._ctx.closePath();\r\n    this._ctx.restore();\r\n  }\r\n\r\n  protected _dashedUnderlineAtCell(x: number, y: number, width: number = 1): void {\r\n    this._ctx.save();\r\n    this._ctx.beginPath();\r\n    this._ctx.strokeStyle = this._ctx.fillStyle;\r\n    const lineWidth = this._coreBrowserService.dpr;\r\n    this._ctx.lineWidth = lineWidth;\r\n    this._ctx.setLineDash([lineWidth * 4, lineWidth * 3]);\r\n    const xLeft = x * this._deviceCellWidth;\r\n    const xRight = (x + width) * this._deviceCellWidth;\r\n    const yMid = (y + 1) * this._deviceCellHeight - lineWidth - 1;\r\n    this._ctx.moveTo(xLeft, yMid);\r\n    this._ctx.lineTo(xRight, yMid);\r\n    this._ctx.stroke();\r\n    this._ctx.closePath();\r\n    this._ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Fills a 1px line (2px on HDPI) at the left of the cell. This uses the\r\n   * existing fillStyle on the context.\r\n   * @param x The column to fill.\r\n   * @param y The row to fill.\r\n   */\r\n  protected _fillLeftLineAtCell(x: number, y: number, width: number): void {\r\n    this._ctx.fillRect(\r\n      x * this._deviceCellWidth,\r\n      y * this._deviceCellHeight,\r\n      this._coreBrowserService.dpr * width,\r\n      this._deviceCellHeight);\r\n  }\r\n\r\n  /**\r\n   * Strokes a 1px rectangle (2px on HDPI) around a cell. This uses the existing\r\n   * strokeStyle on the context.\r\n   * @param x The column to fill.\r\n   * @param y The row to fill.\r\n   */\r\n  protected _strokeRectAtCell(x: number, y: number, width: number, height: number): void {\r\n    const lineWidth = this._coreBrowserService.dpr;\r\n    this._ctx.lineWidth = lineWidth;\r\n    this._ctx.strokeRect(\r\n      x * this._deviceCellWidth + lineWidth / 2,\r\n      y * this._deviceCellHeight + (lineWidth / 2),\r\n      width * this._deviceCellWidth - lineWidth,\r\n      (height * this._deviceCellHeight) - lineWidth);\r\n  }\r\n\r\n  /**\r\n   * Clears the entire canvas.\r\n   */\r\n  protected _clearAll(): void {\r\n    if (this._alpha) {\r\n      this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n    } else {\r\n      this._ctx.fillStyle = this._themeService.colors.background.css;\r\n      this._ctx.fillRect(0, 0, this._canvas.width, this._canvas.height);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears 1+ cells completely.\r\n   * @param x The column to start at.\r\n   * @param y The row to start at.\r\n   * @param width The number of columns to clear.\r\n   * @param height The number of rows to clear.\r\n   */\r\n  protected _clearCells(x: number, y: number, width: number, height: number): void {\r\n    if (this._alpha) {\r\n      this._ctx.clearRect(\r\n        x * this._deviceCellWidth,\r\n        y * this._deviceCellHeight,\r\n        width * this._deviceCellWidth,\r\n        height * this._deviceCellHeight);\r\n    } else {\r\n      this._ctx.fillStyle = this._themeService.colors.background.css;\r\n      this._ctx.fillRect(\r\n        x * this._deviceCellWidth,\r\n        y * this._deviceCellHeight,\r\n        width * this._deviceCellWidth,\r\n        height * this._deviceCellHeight);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws a truecolor character at the cell. The character will be clipped to\r\n   * ensure that it fits with the cell, including the cell to the right if it's\r\n   * a wide character. This uses the existing fillStyle on the context.\r\n   * @param cell The cell data for the character to draw.\r\n   * @param x The column to draw at.\r\n   * @param y The row to draw at.\r\n   */\r\n  protected _fillCharTrueColor(cell: CellData, x: number, y: number): void {\r\n    this._ctx.font = this._getFont(false, false);\r\n    this._ctx.textBaseline = TEXT_BASELINE;\r\n    this._clipRow(y);\r\n\r\n    // Draw custom characters if applicable\r\n    let drawSuccess = false;\r\n    if (this._optionsService.rawOptions.customGlyphs !== false) {\r\n      drawSuccess = tryDrawCustomChar(this._ctx, cell.getChars(), x * this._deviceCellWidth, y * this._deviceCellHeight, this._deviceCellWidth, this._deviceCellHeight, this._optionsService.rawOptions.fontSize, this._coreBrowserService.dpr);\r\n    }\r\n\r\n    // Draw the character\r\n    if (!drawSuccess) {\r\n      this._ctx.fillText(\r\n        cell.getChars(),\r\n        x * this._deviceCellWidth + this._deviceCharLeft,\r\n        y * this._deviceCellHeight + this._deviceCharTop + this._deviceCharHeight);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws one or more characters at a cell. If possible this will draw using\r\n   * the character atlas to reduce draw time.\r\n   */\r\n  protected _drawChars(cell: ICellData, x: number, y: number): void {\r\n    const chars = cell.getChars();\r\n    this._cellColorResolver.resolve(cell, x, this._bufferService.buffer.ydisp + y);\r\n\r\n    if (!this._charAtlas) {\r\n      return;\r\n    }\r\n\r\n    let glyph: IRasterizedGlyph;\r\n    if (chars && chars.length > 1) {\r\n      glyph = this._charAtlas.getRasterizedGlyphCombinedChar(chars, this._cellColorResolver.result.bg, this._cellColorResolver.result.fg, this._cellColorResolver.result.ext);\r\n    } else {\r\n      glyph = this._charAtlas.getRasterizedGlyph(cell.getCode() || WHITESPACE_CELL_CODE, this._cellColorResolver.result.bg, this._cellColorResolver.result.fg, this._cellColorResolver.result.ext);\r\n    }\r\n    if (!glyph.size.x || !glyph.size.y) {\r\n      return;\r\n    }\r\n    this._ctx.save();\r\n    this._clipRow(y);\r\n\r\n    // Draw the image, use the bitmap if it's available\r\n\r\n    // HACK: If the canvas doesn't match, delete the generator. It's not clear how this happens but\r\n    // something is wrong with either the lifecycle of _bitmapGenerator or the page canvases are\r\n    // swapped out unexpectedly\r\n    if (this._bitmapGenerator[glyph.texturePage] && this._charAtlas.pages[glyph.texturePage].canvas !== this._bitmapGenerator[glyph.texturePage]!.canvas) {\r\n      this._bitmapGenerator[glyph.texturePage]?.bitmap?.close();\r\n      delete this._bitmapGenerator[glyph.texturePage];\r\n    }\r\n\r\n    if (this._charAtlas.pages[glyph.texturePage].version !== this._bitmapGenerator[glyph.texturePage]?.version) {\r\n      if (!this._bitmapGenerator[glyph.texturePage]) {\r\n        this._bitmapGenerator[glyph.texturePage] = new BitmapGenerator(this._charAtlas.pages[glyph.texturePage].canvas);\r\n      }\r\n      this._bitmapGenerator[glyph.texturePage]!.refresh();\r\n      this._bitmapGenerator[glyph.texturePage]!.version = this._charAtlas.pages[glyph.texturePage].version;\r\n    }\r\n    this._ctx.drawImage(\r\n      this._bitmapGenerator[glyph.texturePage]?.bitmap || this._charAtlas!.pages[glyph.texturePage].canvas,\r\n      glyph.texturePosition.x,\r\n      glyph.texturePosition.y,\r\n      glyph.size.x,\r\n      glyph.size.y,\r\n      x * this._deviceCellWidth + this._deviceCharLeft - glyph.offset.x,\r\n      y * this._deviceCellHeight + this._deviceCharTop - glyph.offset.y,\r\n      glyph.size.x,\r\n      glyph.size.y\r\n    );\r\n    this._ctx.restore();\r\n  }\r\n\r\n  /**\r\n   * Clips a row to ensure no pixels will be drawn outside the cells in the row.\r\n   * @param y The row to clip.\r\n   */\r\n  private _clipRow(y: number): void {\r\n    this._ctx.beginPath();\r\n    this._ctx.rect(\r\n      0,\r\n      y * this._deviceCellHeight,\r\n      this._bufferService.cols * this._deviceCellWidth,\r\n      this._deviceCellHeight);\r\n    this._ctx.clip();\r\n  }\r\n\r\n  /**\r\n   * Gets the current font.\r\n   * @param isBold If we should use the bold fontWeight.\r\n   */\r\n  protected _getFont(isBold: boolean, isItalic: boolean): string {\r\n    const fontWeight = isBold ? this._optionsService.rawOptions.fontWeightBold : this._optionsService.rawOptions.fontWeight;\r\n    const fontStyle = isItalic ? 'italic' : '';\r\n\r\n    return `${fontStyle} ${fontWeight} ${this._optionsService.rawOptions.fontSize * this._coreBrowserService.dpr}px ${this._optionsService.rawOptions.fontFamily}`;\r\n  }\r\n}\r\n\r\n/**\r\n * The number of milliseconds to wait before generating the ImageBitmap, this is to debounce/batch\r\n * the operation as window.createImageBitmap is asynchronous.\r\n */\r\nconst GLYPH_BITMAP_COMMIT_DELAY = 100;\r\n\r\nconst enum BitmapGeneratorState {\r\n  IDLE = 0,\r\n  GENERATING = 1,\r\n  GENERATING_INVALID = 2\r\n}\r\n\r\nclass BitmapGenerator {\r\n  private _state: BitmapGeneratorState = BitmapGeneratorState.IDLE;\r\n  private _commitTimeout: number | undefined = undefined;\r\n  private _bitmap: ImageBitmap | undefined = undefined;\r\n  public get bitmap(): ImageBitmap | undefined { return this._bitmap; }\r\n  public version: number = -1;\r\n\r\n  constructor(public readonly canvas: HTMLCanvasElement) {\r\n  }\r\n\r\n  public refresh(): void {\r\n    // Clear the bitmap immediately as it's stale\r\n    this._bitmap?.close();\r\n    this._bitmap = undefined;\r\n    // Disable ImageBitmaps on Safari because of https://bugs.webkit.org/show_bug.cgi?id=149990\r\n    if (isSafari) {\r\n      return;\r\n    }\r\n    if (this._commitTimeout === undefined) {\r\n      this._commitTimeout = window.setTimeout(() => this._generate(), GLYPH_BITMAP_COMMIT_DELAY);\r\n    }\r\n    if (this._state === BitmapGeneratorState.GENERATING) {\r\n      this._state = BitmapGeneratorState.GENERATING_INVALID;\r\n    }\r\n  }\r\n\r\n  private _generate(): void {\r\n    if (this._state === BitmapGeneratorState.IDLE) {\r\n      this._bitmap?.close();\r\n      this._bitmap = undefined;\r\n      this._state = BitmapGeneratorState.GENERATING;\r\n      window.createImageBitmap(this.canvas).then(bitmap => {\r\n        if (this._state === BitmapGeneratorState.GENERATING_INVALID) {\r\n          this.refresh();\r\n        } else {\r\n          this._bitmap = bitmap;\r\n        }\r\n        this._state = BitmapGeneratorState.IDLE;\r\n      });\r\n      if (this._commitTimeout) {\r\n        this._commitTimeout = undefined;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { removeTerminalFromCache } from 'browser/renderer/shared/CharAtlasCache';\r\nimport { observeDevicePixelDimensions } from 'browser/renderer/shared/DevicePixelObserver';\r\nimport { createRenderDimensions } from 'browser/renderer/shared/RendererUtils';\r\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent } from 'browser/renderer/shared/Types';\r\nimport { ICharacterJoinerService, ICharSizeService, ICoreBrowserService, ISelectionService, IThemeService } from 'browser/services/Services';\r\nimport { ILinkifier2 } from 'browser/Types';\r\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\r\nimport { Disposable, toDisposable } from 'common/Lifecycle';\r\nimport { IBufferService, ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\r\nimport { Terminal } from 'xterm';\r\nimport { CursorRenderLayer } from './CursorRenderLayer';\r\nimport { LinkRenderLayer } from './LinkRenderLayer';\r\nimport { SelectionRenderLayer } from './SelectionRenderLayer';\r\nimport { TextRenderLayer } from './TextRenderLayer';\r\nimport { IRenderLayer } from './Types';\r\n\r\nexport class CanvasRenderer extends Disposable implements IRenderer {\r\n  private _renderLayers: IRenderLayer[];\r\n  private _devicePixelRatio: number;\r\n\r\n  public dimensions: IRenderDimensions;\r\n\r\n  private readonly _onRequestRedraw = this.register(new EventEmitter<IRequestRedrawEvent>());\r\n  public readonly onRequestRedraw = this._onRequestRedraw.event;\r\n  private readonly _onChangeTextureAtlas = this.register(new EventEmitter<HTMLCanvasElement>());\r\n  public readonly onChangeTextureAtlas = this._onChangeTextureAtlas.event;\r\n  private readonly _onAddTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\r\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\r\n\r\n  constructor(\r\n    private readonly _terminal: Terminal,\r\n    private readonly _screenElement: HTMLElement,\r\n    linkifier2: ILinkifier2,\r\n    private readonly _bufferService: IBufferService,\r\n    private readonly _charSizeService: ICharSizeService,\r\n    private readonly _optionsService: IOptionsService,\r\n    characterJoinerService: ICharacterJoinerService,\r\n    coreService: ICoreService,\r\n    private readonly _coreBrowserService: ICoreBrowserService,\r\n    decorationService: IDecorationService,\r\n    private readonly _themeService: IThemeService\r\n  ) {\r\n    super();\r\n    const allowTransparency = this._optionsService.rawOptions.allowTransparency;\r\n    this._renderLayers = [\r\n      new TextRenderLayer(this._terminal, this._screenElement, 0, allowTransparency, this._bufferService, this._optionsService, characterJoinerService, decorationService, this._coreBrowserService, _themeService),\r\n      new SelectionRenderLayer(this._terminal, this._screenElement, 1, this._bufferService, this._coreBrowserService, decorationService, this._optionsService, _themeService),\r\n      new LinkRenderLayer(this._terminal, this._screenElement, 2, linkifier2, this._bufferService, this._optionsService, decorationService, this._coreBrowserService, _themeService),\r\n      new CursorRenderLayer(this._terminal, this._screenElement, 3, this._onRequestRedraw, this._bufferService, this._optionsService, coreService, this._coreBrowserService, decorationService, _themeService)\r\n    ];\r\n    for (const layer of this._renderLayers) {\r\n      forwardEvent(layer.onAddTextureAtlasCanvas, this._onAddTextureAtlasCanvas);\r\n    }\r\n    this.dimensions = createRenderDimensions();\r\n    this._devicePixelRatio = this._coreBrowserService.dpr;\r\n    this._updateDimensions();\r\n\r\n    this.register(observeDevicePixelDimensions(this._renderLayers[0].canvas, this._coreBrowserService.window, (w, h) => this._setCanvasDevicePixelDimensions(w, h)));\r\n    this.register(toDisposable(() => {\r\n      for (const l of this._renderLayers) {\r\n        l.dispose();\r\n      }\r\n      removeTerminalFromCache(this._terminal);\r\n    }));\r\n  }\r\n\r\n  public get textureAtlas(): HTMLCanvasElement | undefined {\r\n    return this._renderLayers[0].cacheCanvas;\r\n  }\r\n\r\n  public handleDevicePixelRatioChange(): void {\r\n    // If the device pixel ratio changed, the char atlas needs to be regenerated\r\n    // and the terminal needs to refreshed\r\n    if (this._devicePixelRatio !== this._coreBrowserService.dpr) {\r\n      this._devicePixelRatio = this._coreBrowserService.dpr;\r\n      this.handleResize(this._bufferService.cols, this._bufferService.rows);\r\n    }\r\n  }\r\n\r\n  public handleResize(cols: number, rows: number): void {\r\n    // Update character and canvas dimensions\r\n    this._updateDimensions();\r\n\r\n    // Resize all render layers\r\n    for (const l of this._renderLayers) {\r\n      l.resize(this.dimensions);\r\n    }\r\n\r\n    // Resize the screen\r\n    this._screenElement.style.width = `${this.dimensions.css.canvas.width}px`;\r\n    this._screenElement.style.height = `${this.dimensions.css.canvas.height}px`;\r\n  }\r\n\r\n  public handleCharSizeChanged(): void {\r\n    this.handleResize(this._bufferService.cols, this._bufferService.rows);\r\n  }\r\n\r\n  public handleBlur(): void {\r\n    this._runOperation(l => l.handleBlur());\r\n  }\r\n\r\n  public handleFocus(): void {\r\n    this._runOperation(l => l.handleFocus());\r\n  }\r\n\r\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\r\n    this._runOperation(l => l.handleSelectionChanged(start, end, columnSelectMode));\r\n    // Selection foreground requires a full re-render\r\n    if (this._themeService.colors.selectionForeground) {\r\n      this._onRequestRedraw.fire({ start: 0, end: this._bufferService.rows - 1 });\r\n    }\r\n  }\r\n\r\n  public handleCursorMove(): void {\r\n    this._runOperation(l => l.handleCursorMove());\r\n  }\r\n\r\n  public clear(): void {\r\n    this._runOperation(l => l.reset());\r\n  }\r\n\r\n  private _runOperation(operation: (layer: IRenderLayer) => void): void {\r\n    for (const l of this._renderLayers) {\r\n      operation(l);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Performs the refresh loop callback, calling refresh only if a refresh is\r\n   * necessary before queueing up the next one.\r\n   */\r\n  public renderRows(start: number, end: number): void {\r\n    for (const l of this._renderLayers) {\r\n      l.handleGridChanged(start, end);\r\n    }\r\n  }\r\n\r\n  public clearTextureAtlas(): void {\r\n    for (const layer of this._renderLayers) {\r\n      layer.clearTextureAtlas();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Recalculates the character and canvas dimensions.\r\n   */\r\n  private _updateDimensions(): void {\r\n    if (!this._charSizeService.hasValidSize) {\r\n      return;\r\n    }\r\n\r\n    // See the WebGL renderer for an explanation of this section.\r\n    const dpr = this._coreBrowserService.dpr;\r\n    this.dimensions.device.char.width = Math.floor(this._charSizeService.width * dpr);\r\n    this.dimensions.device.char.height = Math.ceil(this._charSizeService.height * dpr);\r\n    this.dimensions.device.cell.height = Math.floor(this.dimensions.device.char.height * this._optionsService.rawOptions.lineHeight);\r\n    this.dimensions.device.char.top = this._optionsService.rawOptions.lineHeight === 1 ? 0 : Math.round((this.dimensions.device.cell.height - this.dimensions.device.char.height) / 2);\r\n    this.dimensions.device.cell.width = this.dimensions.device.char.width + Math.round(this._optionsService.rawOptions.letterSpacing);\r\n    this.dimensions.device.char.left = Math.floor(this._optionsService.rawOptions.letterSpacing / 2);\r\n    this.dimensions.device.canvas.height = this._bufferService.rows * this.dimensions.device.cell.height;\r\n    this.dimensions.device.canvas.width = this._bufferService.cols * this.dimensions.device.cell.width;\r\n    this.dimensions.css.canvas.height = Math.round(this.dimensions.device.canvas.height / dpr);\r\n    this.dimensions.css.canvas.width = Math.round(this.dimensions.device.canvas.width / dpr);\r\n    this.dimensions.css.cell.height = this.dimensions.css.canvas.height / this._bufferService.rows;\r\n    this.dimensions.css.cell.width = this.dimensions.css.canvas.width / this._bufferService.cols;\r\n  }\r\n\r\n  private _setCanvasDevicePixelDimensions(width: number, height: number): void {\r\n    this.dimensions.device.canvas.height = height;\r\n    this.dimensions.device.canvas.width = width;\r\n    // Resize all render layers\r\n    for (const l of this._renderLayers) {\r\n      l.resize(this.dimensions);\r\n    }\r\n    this._requestRedrawViewport();\r\n  }\r\n\r\n  private _requestRedrawViewport(): void {\r\n    this._onRequestRedraw.fire({ start: 0, end: this._bufferService.rows - 1 });\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IRenderDimensions, IRequestRedrawEvent } from 'browser/renderer/shared/Types';\r\nimport { BaseRenderLayer } from './BaseRenderLayer';\r\nimport { ICellData } from 'common/Types';\r\nimport { CellData } from 'common/buffer/CellData';\r\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\r\nimport { IBufferService, IOptionsService, ICoreService, IDecorationService } from 'common/services/Services';\r\nimport { IEventEmitter } from 'common/EventEmitter';\r\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\r\nimport { Terminal } from 'xterm';\r\nimport { toDisposable } from 'common/Lifecycle';\r\nimport { isFirefox } from 'common/Platform';\r\n\r\ninterface ICursorState {\r\n  x: number;\r\n  y: number;\r\n  isFocused: boolean;\r\n  style: string;\r\n  width: number;\r\n}\r\n\r\n/**\r\n * The time between cursor blinks.\r\n */\r\nconst BLINK_INTERVAL = 600;\r\n\r\nexport class CursorRenderLayer extends BaseRenderLayer {\r\n  private _state: ICursorState;\r\n  private _cursorRenderers: {[key: string]: (x: number, y: number, cell: ICellData) => void};\r\n  private _cursorBlinkStateManager: CursorBlinkStateManager | undefined;\r\n  private _cell: ICellData = new CellData();\r\n\r\n  constructor(\r\n    terminal: Terminal,\r\n    container: HTMLElement,\r\n    zIndex: number,\r\n    private readonly _onRequestRedraw: IEventEmitter<IRequestRedrawEvent>,\r\n    bufferService: IBufferService,\r\n    optionsService: IOptionsService,\r\n    private readonly _coreService: ICoreService,\r\n    coreBrowserService: ICoreBrowserService,\r\n    decorationService: IDecorationService,\r\n    themeService: IThemeService\r\n  ) {\r\n    super(terminal, container, 'cursor', zIndex, true, themeService, bufferService, optionsService, decorationService, coreBrowserService);\r\n    this._state = {\r\n      x: 0,\r\n      y: 0,\r\n      isFocused: false,\r\n      style: '',\r\n      width: 0\r\n    };\r\n    this._cursorRenderers = {\r\n      'bar': this._renderBarCursor.bind(this),\r\n      'block': this._renderBlockCursor.bind(this),\r\n      'underline': this._renderUnderlineCursor.bind(this)\r\n    };\r\n    this.register(optionsService.onOptionChange(() => this._handleOptionsChanged()));\r\n    this.register(toDisposable(() => {\r\n      this._cursorBlinkStateManager?.dispose();\r\n      this._cursorBlinkStateManager = undefined;\r\n    }));\r\n  }\r\n\r\n  public resize(dim: IRenderDimensions): void {\r\n    super.resize(dim);\r\n    // Resizing the canvas discards the contents of the canvas so clear state\r\n    this._state = {\r\n      x: 0,\r\n      y: 0,\r\n      isFocused: false,\r\n      style: '',\r\n      width: 0\r\n    };\r\n  }\r\n\r\n  public reset(): void {\r\n    this._clearCursor();\r\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\r\n    this._handleOptionsChanged();\r\n  }\r\n\r\n  public handleBlur(): void {\r\n    this._cursorBlinkStateManager?.pause();\r\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\r\n  }\r\n\r\n  public handleFocus(): void {\r\n    this._cursorBlinkStateManager?.resume();\r\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\r\n  }\r\n\r\n  private _handleOptionsChanged(): void {\r\n    if (this._optionsService.rawOptions.cursorBlink) {\r\n      if (!this._cursorBlinkStateManager) {\r\n        this._cursorBlinkStateManager = new CursorBlinkStateManager(this._coreBrowserService.isFocused, () => {\r\n          this._render(true);\r\n        }, this._coreBrowserService);\r\n      }\r\n    } else {\r\n      this._cursorBlinkStateManager?.dispose();\r\n      this._cursorBlinkStateManager = undefined;\r\n    }\r\n    // Request a refresh from the terminal as management of rendering is being\r\n    // moved back to the terminal\r\n    this._onRequestRedraw.fire({ start: this._bufferService.buffer.y, end: this._bufferService.buffer.y });\r\n  }\r\n\r\n  public handleCursorMove(): void {\r\n    this._cursorBlinkStateManager?.restartBlinkAnimation();\r\n  }\r\n\r\n  public handleGridChanged(startRow: number, endRow: number): void {\r\n    if (!this._cursorBlinkStateManager || this._cursorBlinkStateManager.isPaused) {\r\n      this._render(false);\r\n    } else {\r\n      this._cursorBlinkStateManager.restartBlinkAnimation();\r\n    }\r\n  }\r\n\r\n  private _render(triggeredByAnimationFrame: boolean): void {\r\n    // Don't draw the cursor if it's hidden\r\n    if (!this._coreService.isCursorInitialized || this._coreService.isCursorHidden) {\r\n      this._clearCursor();\r\n      return;\r\n    }\r\n\r\n    const cursorY = this._bufferService.buffer.ybase + this._bufferService.buffer.y;\r\n    const viewportRelativeCursorY = cursorY - this._bufferService.buffer.ydisp;\r\n\r\n    // Don't draw the cursor if it's off-screen\r\n    if (viewportRelativeCursorY < 0 || viewportRelativeCursorY >= this._bufferService.rows) {\r\n      this._clearCursor();\r\n      return;\r\n    }\r\n\r\n    // in case cursor.x == cols adjust visual cursor to cols - 1\r\n    const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\r\n    this._bufferService.buffer.lines.get(cursorY)!.loadCell(cursorX, this._cell);\r\n    if (this._cell.content === undefined) {\r\n      return;\r\n    }\r\n\r\n    if (!this._coreBrowserService.isFocused) {\r\n      this._clearCursor();\r\n      this._ctx.save();\r\n      this._ctx.fillStyle = this._themeService.colors.cursor.css;\r\n      const cursorStyle = this._optionsService.rawOptions.cursorStyle;\r\n      this._renderBlurCursor(cursorX, viewportRelativeCursorY, this._cell);\r\n      this._ctx.restore();\r\n      this._state.x = cursorX;\r\n      this._state.y = viewportRelativeCursorY;\r\n      this._state.isFocused = false;\r\n      this._state.style = cursorStyle;\r\n      this._state.width = this._cell.getWidth();\r\n      return;\r\n    }\r\n\r\n    // Don't draw the cursor if it's blinking\r\n    if (this._cursorBlinkStateManager && !this._cursorBlinkStateManager.isCursorVisible) {\r\n      this._clearCursor();\r\n      return;\r\n    }\r\n\r\n    if (this._state) {\r\n      // The cursor is already in the correct spot, don't redraw\r\n      if (this._state.x === cursorX &&\r\n          this._state.y === viewportRelativeCursorY &&\r\n          this._state.isFocused === this._coreBrowserService.isFocused &&\r\n          this._state.style === this._optionsService.rawOptions.cursorStyle &&\r\n          this._state.width === this._cell.getWidth()) {\r\n        return;\r\n      }\r\n      this._clearCursor();\r\n    }\r\n\r\n    this._ctx.save();\r\n    this._cursorRenderers[this._optionsService.rawOptions.cursorStyle || 'block'](cursorX, viewportRelativeCursorY, this._cell);\r\n    this._ctx.restore();\r\n\r\n    this._state.x = cursorX;\r\n    this._state.y = viewportRelativeCursorY;\r\n    this._state.isFocused = false;\r\n    this._state.style = this._optionsService.rawOptions.cursorStyle;\r\n    this._state.width = this._cell.getWidth();\r\n  }\r\n\r\n  private _clearCursor(): void {\r\n    if (this._state) {\r\n      // Avoid potential rounding errors when browser is Firefox (#4487) or device pixel ratio is\r\n      // less than 1\r\n      if (isFirefox || this._coreBrowserService.dpr < 1) {\r\n        this._clearAll();\r\n      } else {\r\n        this._clearCells(this._state.x, this._state.y, this._state.width, 1);\r\n      }\r\n      this._state = {\r\n        x: 0,\r\n        y: 0,\r\n        isFocused: false,\r\n        style: '',\r\n        width: 0\r\n      };\r\n    }\r\n  }\r\n\r\n  private _renderBarCursor(x: number, y: number, cell: ICellData): void {\r\n    this._ctx.save();\r\n    this._ctx.fillStyle = this._themeService.colors.cursor.css;\r\n    this._fillLeftLineAtCell(x, y, this._optionsService.rawOptions.cursorWidth);\r\n    this._ctx.restore();\r\n  }\r\n\r\n  private _renderBlockCursor(x: number, y: number, cell: ICellData): void {\r\n    this._ctx.save();\r\n    this._ctx.fillStyle = this._themeService.colors.cursor.css;\r\n    this._fillCells(x, y, cell.getWidth(), 1);\r\n    this._ctx.fillStyle = this._themeService.colors.cursorAccent.css;\r\n    this._fillCharTrueColor(cell, x, y);\r\n    this._ctx.restore();\r\n  }\r\n\r\n  private _renderUnderlineCursor(x: number, y: number, cell: ICellData): void {\r\n    this._ctx.save();\r\n    this._ctx.fillStyle = this._themeService.colors.cursor.css;\r\n    this._fillBottomLineAtCells(x, y);\r\n    this._ctx.restore();\r\n  }\r\n\r\n  private _renderBlurCursor(x: number, y: number, cell: ICellData): void {\r\n    this._ctx.save();\r\n    this._ctx.strokeStyle = this._themeService.colors.cursor.css;\r\n    this._strokeRectAtCell(x, y, cell.getWidth(), 1);\r\n    this._ctx.restore();\r\n  }\r\n}\r\n\r\nclass CursorBlinkStateManager {\r\n  public isCursorVisible: boolean;\r\n\r\n  private _animationFrame: number | undefined;\r\n  private _blinkStartTimeout: number | undefined;\r\n  private _blinkInterval: number | undefined;\r\n\r\n  /**\r\n   * The time at which the animation frame was restarted, this is used on the\r\n   * next render to restart the timers so they don't need to restart the timers\r\n   * multiple times over a short period.\r\n   */\r\n  private _animationTimeRestarted: number | undefined;\r\n\r\n  constructor(\r\n    isFocused: boolean,\r\n    private _renderCallback: () => void,\r\n    private _coreBrowserService: ICoreBrowserService\r\n  ) {\r\n    this.isCursorVisible = true;\r\n    if (isFocused) {\r\n      this._restartInterval();\r\n    }\r\n  }\r\n\r\n  public get isPaused(): boolean { return !(this._blinkStartTimeout || this._blinkInterval); }\r\n\r\n  public dispose(): void {\r\n    if (this._blinkInterval) {\r\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\r\n      this._blinkInterval = undefined;\r\n    }\r\n    if (this._blinkStartTimeout) {\r\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\r\n      this._blinkStartTimeout = undefined;\r\n    }\r\n    if (this._animationFrame) {\r\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\r\n      this._animationFrame = undefined;\r\n    }\r\n  }\r\n\r\n  public restartBlinkAnimation(): void {\r\n    if (this.isPaused) {\r\n      return;\r\n    }\r\n    // Save a timestamp so that the restart can be done on the next interval\r\n    this._animationTimeRestarted = Date.now();\r\n    // Force a cursor render to ensure it's visible and in the correct position\r\n    this.isCursorVisible = true;\r\n    if (!this._animationFrame) {\r\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\r\n        this._renderCallback();\r\n        this._animationFrame = undefined;\r\n      });\r\n    }\r\n  }\r\n\r\n  private _restartInterval(timeToStart: number = BLINK_INTERVAL): void {\r\n    // Clear any existing interval\r\n    if (this._blinkInterval) {\r\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\r\n      this._blinkInterval = undefined;\r\n    }\r\n\r\n    // Setup the initial timeout which will hide the cursor, this is done before\r\n    // the regular interval is setup in order to support restarting the blink\r\n    // animation in a lightweight way (without thrashing clearInterval and\r\n    // setInterval).\r\n    this._blinkStartTimeout = this._coreBrowserService.window.setTimeout(() => {\r\n      // Check if another animation restart was requested while this was being\r\n      // started\r\n      if (this._animationTimeRestarted) {\r\n        const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\r\n        this._animationTimeRestarted = undefined;\r\n        if (time > 0) {\r\n          this._restartInterval(time);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Hide the cursor\r\n      this.isCursorVisible = false;\r\n      this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\r\n        this._renderCallback();\r\n        this._animationFrame = undefined;\r\n      });\r\n\r\n      // Setup the blink interval\r\n      this._blinkInterval = this._coreBrowserService.window.setInterval(() => {\r\n        // Adjust the animation time if it was restarted\r\n        if (this._animationTimeRestarted) {\r\n          // calc time diff\r\n          // Make restart interval do a setTimeout initially?\r\n          const time = BLINK_INTERVAL - (Date.now() - this._animationTimeRestarted);\r\n          this._animationTimeRestarted = undefined;\r\n          this._restartInterval(time);\r\n          return;\r\n        }\r\n\r\n        // Invert visibility and render\r\n        this.isCursorVisible = !this.isCursorVisible;\r\n        this._animationFrame = this._coreBrowserService.window.requestAnimationFrame(() => {\r\n          this._renderCallback();\r\n          this._animationFrame = undefined;\r\n        });\r\n      }, BLINK_INTERVAL);\r\n    }, timeToStart);\r\n  }\r\n\r\n  public pause(): void {\r\n    this.isCursorVisible = true;\r\n    if (this._blinkInterval) {\r\n      this._coreBrowserService.window.clearInterval(this._blinkInterval);\r\n      this._blinkInterval = undefined;\r\n    }\r\n    if (this._blinkStartTimeout) {\r\n      this._coreBrowserService.window.clearTimeout(this._blinkStartTimeout);\r\n      this._blinkStartTimeout = undefined;\r\n    }\r\n    if (this._animationFrame) {\r\n      this._coreBrowserService.window.cancelAnimationFrame(this._animationFrame);\r\n      this._animationFrame = undefined;\r\n    }\r\n  }\r\n\r\n  public resume(): void {\r\n    // Clear out any existing timers just in case\r\n    this.pause();\r\n\r\n    this._animationTimeRestarted = undefined;\r\n    this._restartInterval();\r\n    this.restartBlinkAnimation();\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nexport class GridCache<T> {\r\n  public cache: (T | undefined)[][];\r\n\r\n  public constructor() {\r\n    this.cache = [];\r\n  }\r\n\r\n  public resize(width: number, height: number): void {\r\n    for (let x = 0; x < width; x++) {\r\n      if (this.cache.length <= x) {\r\n        this.cache.push([]);\r\n      }\r\n      for (let y = this.cache[x].length; y < height; y++) {\r\n        this.cache[x].push(undefined);\r\n      }\r\n      this.cache[x].length = height;\r\n    }\r\n    this.cache.length = width;\r\n  }\r\n\r\n  public clear(): void {\r\n    for (let x = 0; x < this.cache.length; x++) {\r\n      for (let y = 0; y < this.cache[x].length; y++) {\r\n        this.cache[x][y] = undefined;\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\r\nimport { BaseRenderLayer } from './BaseRenderLayer';\r\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\r\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\r\nimport { IColorSet, ILinkifierEvent, ILinkifier2, ReadonlyColorSet } from 'browser/Types';\r\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\r\nimport { is256Color } from 'browser/renderer/shared/CharAtlasUtils';\r\nimport { Terminal } from 'xterm';\r\n\r\nexport class LinkRenderLayer extends BaseRenderLayer {\r\n  private _state: ILinkifierEvent | undefined;\r\n\r\n  constructor(\r\n    terminal: Terminal,\r\n    container: HTMLElement,\r\n    zIndex: number,\r\n    linkifier2: ILinkifier2,\r\n    bufferService: IBufferService,\r\n    optionsService: IOptionsService,\r\n    decorationService: IDecorationService,\r\n    coreBrowserService: ICoreBrowserService,\r\n    themeService: IThemeService\r\n  ) {\r\n    super(terminal, container, 'link', zIndex, true, themeService, bufferService, optionsService, decorationService, coreBrowserService);\r\n\r\n    this.register(linkifier2.onShowLinkUnderline(e => this._handleShowLinkUnderline(e)));\r\n    this.register(linkifier2.onHideLinkUnderline(e => this._handleHideLinkUnderline(e)));\r\n  }\r\n\r\n  public resize(dim: IRenderDimensions): void {\r\n    super.resize(dim);\r\n    // Resizing the canvas discards the contents of the canvas so clear state\r\n    this._state = undefined;\r\n  }\r\n\r\n  public reset(): void {\r\n    this._clearCurrentLink();\r\n  }\r\n\r\n  private _clearCurrentLink(): void {\r\n    if (this._state) {\r\n      this._clearCells(this._state.x1, this._state.y1, this._state.cols - this._state.x1, 1);\r\n      const middleRowCount = this._state.y2 - this._state.y1 - 1;\r\n      if (middleRowCount > 0) {\r\n        this._clearCells(0, this._state.y1 + 1, this._state.cols, middleRowCount);\r\n      }\r\n      this._clearCells(0, this._state.y2, this._state.x2, 1);\r\n      this._state = undefined;\r\n    }\r\n  }\r\n\r\n  private _handleShowLinkUnderline(e: ILinkifierEvent): void {\r\n    if (e.fg === INVERTED_DEFAULT_COLOR) {\r\n      this._ctx.fillStyle = this._themeService.colors.background.css;\r\n    } else if (e.fg && is256Color(e.fg)) {\r\n      // 256 color support\r\n      this._ctx.fillStyle = this._themeService.colors.ansi[e.fg].css;\r\n    } else {\r\n      this._ctx.fillStyle = this._themeService.colors.foreground.css;\r\n    }\r\n\r\n    if (e.y1 === e.y2) {\r\n      // Single line link\r\n      this._fillBottomLineAtCells(e.x1, e.y1, e.x2 - e.x1);\r\n    } else {\r\n      // Multi-line link\r\n      this._fillBottomLineAtCells(e.x1, e.y1, e.cols - e.x1);\r\n      for (let y = e.y1 + 1; y < e.y2; y++) {\r\n        this._fillBottomLineAtCells(0, y, e.cols);\r\n      }\r\n      this._fillBottomLineAtCells(0, e.y2, e.x2);\r\n    }\r\n    this._state = e;\r\n  }\r\n\r\n  private _handleHideLinkUnderline(e: ILinkifierEvent): void {\r\n    this._clearCurrentLink();\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\r\nimport { BaseRenderLayer } from './BaseRenderLayer';\r\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\r\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\r\nimport { Terminal } from 'xterm';\r\n\r\ninterface ISelectionState {\r\n  start?: [number, number];\r\n  end?: [number, number];\r\n  columnSelectMode?: boolean;\r\n  ydisp?: number;\r\n}\r\n\r\nexport class SelectionRenderLayer extends BaseRenderLayer {\r\n  private _state!: ISelectionState;\r\n\r\n  constructor(\r\n    terminal: Terminal,\r\n    container: HTMLElement,\r\n    zIndex: number,\r\n    bufferService: IBufferService,\r\n    coreBrowserService: ICoreBrowserService,\r\n    decorationService: IDecorationService,\r\n    optionsService: IOptionsService,\r\n    themeService: IThemeService\r\n  ) {\r\n    super(terminal, container, 'selection', zIndex, true, themeService, bufferService, optionsService, decorationService, coreBrowserService);\r\n    this._clearState();\r\n  }\r\n\r\n  private _clearState(): void {\r\n    this._state = {\r\n      start: undefined,\r\n      end: undefined,\r\n      columnSelectMode: undefined,\r\n      ydisp: undefined\r\n    };\r\n  }\r\n\r\n  public resize(dim: IRenderDimensions): void {\r\n    super.resize(dim);\r\n    // On resize use the base render layer's cached selection values since resize clears _state\r\n    // inside reset.\r\n    if (this._selectionModel.selectionStart && this._selectionModel.selectionEnd) {\r\n      this._clearState();\r\n      this._redrawSelection(this._selectionModel.selectionStart, this._selectionModel.selectionEnd, this._selectionModel.columnSelectMode);\r\n    }\r\n  }\r\n\r\n  public reset(): void {\r\n    if (this._state.start && this._state.end) {\r\n      this._clearState();\r\n      this._clearAll();\r\n    }\r\n  }\r\n\r\n  public handleBlur(): void {\r\n    this.reset();\r\n    this._redrawSelection(this._selectionModel.selectionStart, this._selectionModel.selectionEnd, this._selectionModel.columnSelectMode);\r\n  }\r\n\r\n  public handleFocus(): void {\r\n    this.reset();\r\n    this._redrawSelection(this._selectionModel.selectionStart, this._selectionModel.selectionEnd, this._selectionModel.columnSelectMode);\r\n  }\r\n\r\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\r\n    super.handleSelectionChanged(start, end, columnSelectMode);\r\n    this._redrawSelection(start, end, columnSelectMode);\r\n  }\r\n\r\n  private _redrawSelection(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\r\n    // Selection has not changed\r\n    if (!this._didStateChange(start, end, columnSelectMode, this._bufferService.buffer.ydisp)) {\r\n      return;\r\n    }\r\n\r\n    // Remove all selections\r\n    this._clearAll();\r\n\r\n    // Selection does not exist\r\n    if (!start || !end) {\r\n      this._clearState();\r\n      return;\r\n    }\r\n\r\n    // Translate from buffer position to viewport position\r\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\r\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\r\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\r\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\r\n\r\n    // No need to draw the selection\r\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\r\n      this._state.ydisp = this._bufferService.buffer.ydisp;\r\n      return;\r\n    }\r\n\r\n    this._ctx.fillStyle = (this._coreBrowserService.isFocused\r\n      ? this._themeService.colors.selectionBackgroundTransparent\r\n      : this._themeService.colors.selectionInactiveBackgroundTransparent).css;\r\n\r\n    if (columnSelectMode) {\r\n      const startCol = start[0];\r\n      const width = end[0] - startCol;\r\n      const height = viewportCappedEndRow - viewportCappedStartRow + 1;\r\n      this._fillCells(startCol, viewportCappedStartRow, width, height);\r\n    } else {\r\n      // Draw first row\r\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\r\n      const startRowEndCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\r\n      this._fillCells(startCol, viewportCappedStartRow, startRowEndCol - startCol, 1);\r\n\r\n      // Draw middle rows\r\n      const middleRowsCount = Math.max(viewportCappedEndRow - viewportCappedStartRow - 1, 0);\r\n      this._fillCells(0, viewportCappedStartRow + 1, this._bufferService.cols, middleRowsCount);\r\n\r\n      // Draw final row\r\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\r\n        // Only draw viewportEndRow if it's not the same as viewportStartRow\r\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\r\n        this._fillCells(0, viewportCappedEndRow, endCol, 1);\r\n      }\r\n    }\r\n\r\n    // Save state for next render\r\n    this._state.start = [start[0], start[1]];\r\n    this._state.end = [end[0], end[1]];\r\n    this._state.columnSelectMode = columnSelectMode;\r\n    this._state.ydisp = this._bufferService.buffer.ydisp;\r\n  }\r\n\r\n  private _didStateChange(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean, ydisp: number): boolean {\r\n    return !this._areCoordinatesEqual(start, this._state.start) ||\r\n      !this._areCoordinatesEqual(end, this._state.end) ||\r\n      columnSelectMode !== this._state.columnSelectMode ||\r\n      ydisp !== this._state.ydisp;\r\n  }\r\n\r\n  private _areCoordinatesEqual(coord1: [number, number] | undefined, coord2: [number, number] | undefined): boolean {\r\n    if (!coord1 || !coord2) {\r\n      return false;\r\n    }\r\n\r\n    return coord1[0] === coord2[0] && coord1[1] === coord2[1];\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\r\nimport { CharData, ICellData } from 'common/Types';\r\nimport { GridCache } from './GridCache';\r\nimport { BaseRenderLayer } from './BaseRenderLayer';\r\nimport { AttributeData } from 'common/buffer/AttributeData';\r\nimport { NULL_CELL_CODE, Content, UnderlineStyle } from 'common/buffer/Constants';\r\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\r\nimport { CellData } from 'common/buffer/CellData';\r\nimport { IOptionsService, IBufferService, IDecorationService } from 'common/services/Services';\r\nimport { ICharacterJoinerService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\r\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\r\nimport { color, css } from 'common/Color';\r\nimport { Terminal } from 'xterm';\r\n\r\n/**\r\n * This CharData looks like a null character, which will forc a clear and render\r\n * when the character changes (a regular space ' ' character may not as it's\r\n * drawn state is a cleared cell).\r\n */\r\n// const OVERLAP_OWNED_CHAR_DATA: CharData = [null, '', 0, -1];\r\n\r\nexport class TextRenderLayer extends BaseRenderLayer {\r\n  private _state: GridCache<CharData>;\r\n  private _characterWidth: number = 0;\r\n  private _characterFont: string = '';\r\n  private _characterOverlapCache: { [key: string]: boolean } = {};\r\n  private _workCell = new CellData();\r\n\r\n  constructor(\r\n    terminal: Terminal,\r\n    container: HTMLElement,\r\n    zIndex: number,\r\n    alpha: boolean,\r\n    bufferService: IBufferService,\r\n    optionsService: IOptionsService,\r\n    private readonly _characterJoinerService: ICharacterJoinerService,\r\n    decorationService: IDecorationService,\r\n    coreBrowserService: ICoreBrowserService,\r\n    themeService: IThemeService\r\n  ) {\r\n    super(terminal, container, 'text', zIndex, alpha, themeService, bufferService, optionsService, decorationService, coreBrowserService);\r\n    this._state = new GridCache<CharData>();\r\n    this.register(optionsService.onSpecificOptionChange('allowTransparency', value => this._setTransparency(value)));\r\n  }\r\n\r\n  public resize(dim: IRenderDimensions): void {\r\n    super.resize(dim);\r\n\r\n    // Clear the character width cache if the font or width has changed\r\n    const terminalFont = this._getFont(false, false);\r\n    if (this._characterWidth !== dim.device.char.width || this._characterFont !== terminalFont) {\r\n      this._characterWidth = dim.device.char.width;\r\n      this._characterFont = terminalFont;\r\n      this._characterOverlapCache = {};\r\n    }\r\n    // Resizing the canvas discards the contents of the canvas so clear state\r\n    this._state.clear();\r\n    this._state.resize(this._bufferService.cols, this._bufferService.rows);\r\n  }\r\n\r\n  public reset(): void {\r\n    this._state.clear();\r\n    this._clearAll();\r\n  }\r\n\r\n  private _forEachCell(\r\n    firstRow: number,\r\n    lastRow: number,\r\n    callback: (\r\n      cell: ICellData,\r\n      x: number,\r\n      y: number\r\n    ) => void\r\n  ): void {\r\n    for (let y = firstRow; y <= lastRow; y++) {\r\n      const row = y + this._bufferService.buffer.ydisp;\r\n      const line = this._bufferService.buffer.lines.get(row);\r\n      const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\r\n      for (let x = 0; x < this._bufferService.cols; x++) {\r\n        line!.loadCell(x, this._workCell);\r\n        let cell = this._workCell;\r\n\r\n        // If true, indicates that the current character(s) to draw were joined.\r\n        let isJoined = false;\r\n        let lastCharX = x;\r\n\r\n        // The character to the left is a wide character, drawing is owned by\r\n        // the char at x-1\r\n        if (cell.getWidth() === 0) {\r\n          continue;\r\n        }\r\n\r\n        // exit early for NULL and SP\r\n        // NOTE: commented out due to #4120 (needs a more clever patch to keep things performant)\r\n        // const code = cell.getCode();\r\n        // if (code === 0 || code === 32) {\r\n        //  continue;\r\n        // }\r\n\r\n        // Process any joined character ranges as needed. Because of how the\r\n        // ranges are produced, we know that they are valid for the characters\r\n        // and attributes of our input.\r\n        if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\r\n          isJoined = true;\r\n          const range = joinedRanges.shift()!;\r\n\r\n          // We already know the exact start and end column of the joined range,\r\n          // so we get the string and width representing it directly\r\n          cell = new JoinedCellData(\r\n            this._workCell,\r\n            line!.translateToString(true, range[0], range[1]),\r\n            range[1] - range[0]\r\n          );\r\n\r\n          // Skip over the cells occupied by this range in the loop\r\n          lastCharX = range[1] - 1;\r\n        }\r\n\r\n        // If the character is an overlapping char and the character to the\r\n        // right is a space, take ownership of the cell to the right. We skip\r\n        // this check for joined characters because their rendering likely won't\r\n        // yield the same result as rendering the last character individually.\r\n        if (!isJoined && this._isOverlapping(cell)) {\r\n          // If the character is overlapping, we want to force a re-render on every\r\n          // frame. This is specifically to work around the case where two\r\n          // overlaping chars `a` and `b` are adjacent, the cursor is moved to b and a\r\n          // space is added. Without this, the first half of `b` would never\r\n          // get removed, and `a` would not re-render because it thinks it's\r\n          // already in the correct state.\r\n          // this._state.cache[x][y] = OVERLAP_OWNED_CHAR_DATA;\r\n          if (lastCharX < line!.length - 1 && line!.getCodePoint(lastCharX + 1) === NULL_CELL_CODE) {\r\n            // patch width to 2\r\n            cell.content &= ~Content.WIDTH_MASK;\r\n            cell.content |= 2 << Content.WIDTH_SHIFT;\r\n            // this._clearChar(x + 1, y);\r\n            // The overlapping char's char data will force a clear and render when the\r\n            // overlapping char is no longer to the left of the character and also when\r\n            // the space changes to another character.\r\n            // this._state.cache[x + 1][y] = OVERLAP_OWNED_CHAR_DATA;\r\n          }\r\n        }\r\n\r\n        callback(\r\n          cell,\r\n          x,\r\n          y\r\n        );\r\n\r\n        x = lastCharX;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draws the background for a specified range of columns. Tries to batch adjacent cells of the\r\n   * same color together to reduce draw calls.\r\n   */\r\n  private _drawBackground(firstRow: number, lastRow: number): void {\r\n    const ctx = this._ctx;\r\n    const cols = this._bufferService.cols;\r\n    let startX: number = 0;\r\n    let startY: number = 0;\r\n    let prevFillStyle: string | null = null;\r\n\r\n    ctx.save();\r\n\r\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => {\r\n      // libvte and xterm both draw the background (but not foreground) of invisible characters,\r\n      // so we should too.\r\n      let nextFillStyle = null; // null represents default background color\r\n\r\n      if (cell.isInverse()) {\r\n        if (cell.isFgDefault()) {\r\n          nextFillStyle = this._themeService.colors.foreground.css;\r\n        } else if (cell.isFgRGB()) {\r\n          nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getFgColor()).join(',')})`;\r\n        } else {\r\n          nextFillStyle = this._themeService.colors.ansi[cell.getFgColor()].css;\r\n        }\r\n      } else if (cell.isBgRGB()) {\r\n        nextFillStyle = `rgb(${AttributeData.toColorRGB(cell.getBgColor()).join(',')})`;\r\n      } else if (cell.isBgPalette()) {\r\n        nextFillStyle = this._themeService.colors.ansi[cell.getBgColor()].css;\r\n      }\r\n\r\n      // Get any decoration foreground/background overrides, this must be fetched before the early\r\n      // exist but applied after inverse\r\n      let isTop = false;\r\n      this._decorationService.forEachDecorationAtCell(x, this._bufferService.buffer.ydisp + y, undefined, d => {\r\n        if (d.options.layer !== 'top' && isTop) {\r\n          return;\r\n        }\r\n        if (d.backgroundColorRGB) {\r\n          nextFillStyle = d.backgroundColorRGB.css;\r\n        }\r\n        isTop = d.options.layer === 'top';\r\n      });\r\n\r\n      if (prevFillStyle === null) {\r\n        // This is either the first iteration, or the default background was set. Either way, we\r\n        // don't need to draw anything.\r\n        startX = x;\r\n        startY = y;\r\n      }\r\n\r\n      if (y !== startY) {\r\n        // our row changed, draw the previous row\r\n        ctx.fillStyle = prevFillStyle || '';\r\n        this._fillCells(startX, startY, cols - startX, 1);\r\n        startX = x;\r\n        startY = y;\r\n      } else if (prevFillStyle !== nextFillStyle) {\r\n        // our color changed, draw the previous characters in this row\r\n        ctx.fillStyle = prevFillStyle || '';\r\n        this._fillCells(startX, startY, x - startX, 1);\r\n        startX = x;\r\n        startY = y;\r\n      }\r\n\r\n      prevFillStyle = nextFillStyle;\r\n    });\r\n\r\n    // flush the last color we encountered\r\n    if (prevFillStyle !== null) {\r\n      ctx.fillStyle = prevFillStyle;\r\n      this._fillCells(startX, startY, cols - startX, 1);\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  private _drawForeground(firstRow: number, lastRow: number): void {\r\n    this._forEachCell(firstRow, lastRow, (cell, x, y) => this._drawChars(cell, x, y));\r\n  }\r\n\r\n  public handleGridChanged(firstRow: number, lastRow: number): void {\r\n    // Resize has not been called yet\r\n    if (this._state.cache.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (this._charAtlas) {\r\n      this._charAtlas.beginFrame();\r\n    }\r\n\r\n    this._clearCells(0, firstRow, this._bufferService.cols, lastRow - firstRow + 1);\r\n    this._drawBackground(firstRow, lastRow);\r\n    this._drawForeground(firstRow, lastRow);\r\n  }\r\n\r\n  /**\r\n   * Whether a character is overlapping to the next cell.\r\n   */\r\n  private _isOverlapping(cell: ICellData): boolean {\r\n    // Only single cell characters can be overlapping, rendering issues can\r\n    // occur without this check\r\n    if (cell.getWidth() !== 1) {\r\n      return false;\r\n    }\r\n\r\n    // We assume that any ascii character will not overlap\r\n    if (cell.getCode() < 256) {\r\n      return false;\r\n    }\r\n\r\n    const chars = cell.getChars();\r\n\r\n    // Deliver from cache if available\r\n    if (this._characterOverlapCache.hasOwnProperty(chars)) {\r\n      return this._characterOverlapCache[chars];\r\n    }\r\n\r\n    // Setup the font\r\n    this._ctx.save();\r\n    this._ctx.font = this._characterFont;\r\n\r\n    // Measure the width of the character, but Math.floor it\r\n    // because that is what the renderer does when it calculates\r\n    // the character dimensions we are comparing against\r\n    const overlaps = Math.floor(this._ctx.measureText(chars).width) > this._characterWidth;\r\n\r\n    // Restore the original context\r\n    this._ctx.restore();\r\n\r\n    // Cache and return\r\n    this._characterOverlapCache[chars] = overlaps;\r\n    return overlaps;\r\n  }\r\n}\r\n","import { ISelectionRenderModel } from 'browser/renderer/shared/Types';\r\nimport { ICoreBrowserService, IThemeService } from 'browser/services/Services';\r\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\r\nimport { Attributes, BgFlags, FgFlags } from 'common/buffer/Constants';\r\nimport { IDecorationService } from 'common/services/Services';\r\nimport { ICellData } from 'common/Types';\r\nimport { Terminal } from 'xterm';\r\n\r\n// Work variables to avoid garbage collection\r\nlet $fg = 0;\r\nlet $bg = 0;\r\nlet $hasFg = false;\r\nlet $hasBg = false;\r\nlet $isSelected = false;\r\nlet $colors: ReadonlyColorSet | undefined;\r\n\r\nexport class CellColorResolver {\r\n  /**\r\n   * The shared result of the {@link resolve} call. This is only safe to use immediately after as\r\n   * any other calls will share object.\r\n   */\r\n  public readonly result: { fg: number, bg: number, ext: number } = {\r\n    fg: 0,\r\n    bg: 0,\r\n    ext: 0\r\n  };\r\n\r\n  constructor(\r\n    private readonly _terminal: Terminal,\r\n    private readonly _selectionRenderModel: ISelectionRenderModel,\r\n    private readonly _decorationService: IDecorationService,\r\n    private readonly _coreBrowserService: ICoreBrowserService,\r\n    private readonly _themeService: IThemeService\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * Resolves colors for the cell, putting the result into the shared {@link result}. This resolves\r\n   * overrides, inverse and selection for the cell which can then be used to feed into the renderer.\r\n   */\r\n  public resolve(cell: ICellData, x: number, y: number): void {\r\n    this.result.bg = cell.bg;\r\n    this.result.fg = cell.fg;\r\n    this.result.ext = cell.bg & BgFlags.HAS_EXTENDED ? cell.extended.ext : 0;\r\n    // Get any foreground/background overrides, this happens on the model to avoid spreading\r\n    // override logic throughout the different sub-renderers\r\n\r\n    // Reset overrides work variables\r\n    $bg = 0;\r\n    $fg = 0;\r\n    $hasBg = false;\r\n    $hasFg = false;\r\n    $isSelected = false;\r\n    $colors = this._themeService.colors;\r\n\r\n    // Apply decorations on the bottom layer\r\n    this._decorationService.forEachDecorationAtCell(x, y, 'bottom', d => {\r\n      if (d.backgroundColorRGB) {\r\n        $bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\r\n        $hasBg = true;\r\n      }\r\n      if (d.foregroundColorRGB) {\r\n        $fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\r\n        $hasFg = true;\r\n      }\r\n    });\r\n\r\n    // Apply the selection color if needed\r\n    $isSelected = this._selectionRenderModel.isCellSelected(this._terminal, x, y);\r\n    if ($isSelected) {\r\n      $bg = (this._coreBrowserService.isFocused ? $colors.selectionBackgroundOpaque : $colors.selectionInactiveBackgroundOpaque).rgba >> 8 & 0xFFFFFF;\r\n      $hasBg = true;\r\n      if ($colors.selectionForeground) {\r\n        $fg = $colors.selectionForeground.rgba >> 8 & 0xFFFFFF;\r\n        $hasFg = true;\r\n      }\r\n    }\r\n\r\n    // Apply decorations on the top layer\r\n    this._decorationService.forEachDecorationAtCell(x, y, 'top', d => {\r\n      if (d.backgroundColorRGB) {\r\n        $bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\r\n        $hasBg = true;\r\n      }\r\n      if (d.foregroundColorRGB) {\r\n        $fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\r\n        $hasFg = true;\r\n      }\r\n    });\r\n\r\n    // Convert any overrides from rgba to the fg/bg packed format. This resolves the inverse flag\r\n    // ahead of time in order to use the correct cache key\r\n    if ($hasBg) {\r\n      if ($isSelected) {\r\n        // Non-RGB attributes from model + force non-dim + override + force RGB color mode\r\n        $bg = (cell.bg & ~Attributes.RGB_MASK & ~BgFlags.DIM) | $bg | Attributes.CM_RGB;\r\n      } else {\r\n        // Non-RGB attributes from model + override + force RGB color mode\r\n        $bg = (cell.bg & ~Attributes.RGB_MASK) | $bg | Attributes.CM_RGB;\r\n      }\r\n    }\r\n    if ($hasFg) {\r\n      // Non-RGB attributes from model + force disable inverse + override + force RGB color mode\r\n      $fg = (cell.fg & ~Attributes.RGB_MASK & ~FgFlags.INVERSE) | $fg | Attributes.CM_RGB;\r\n    }\r\n\r\n    // Handle case where inverse was specified by only one of bg override or fg override was set,\r\n    // resolving the other inverse color and setting the inverse flag if needed.\r\n    if (this.result.fg & FgFlags.INVERSE) {\r\n      if ($hasBg && !$hasFg) {\r\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\r\n        if ((this.result.bg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\r\n          $fg = (this.result.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | (($colors.background.rgba >> 8 & 0xFFFFFF) & Attributes.RGB_MASK) | Attributes.CM_RGB;\r\n        } else {\r\n          $fg = (this.result.fg & ~(Attributes.RGB_MASK | FgFlags.INVERSE | Attributes.CM_MASK)) | this.result.bg & (Attributes.RGB_MASK | Attributes.CM_MASK);\r\n        }\r\n        $hasFg = true;\r\n      }\r\n      if (!$hasBg && $hasFg) {\r\n        // Resolve bg color type (default color has a different meaning in fg vs bg)\r\n        if ((this.result.fg & Attributes.CM_MASK) === Attributes.CM_DEFAULT) {\r\n          $bg = (this.result.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | (($colors.foreground.rgba >> 8 & 0xFFFFFF) & Attributes.RGB_MASK) | Attributes.CM_RGB;\r\n        } else {\r\n          $bg = (this.result.bg & ~(Attributes.RGB_MASK | Attributes.CM_MASK)) | this.result.fg & (Attributes.RGB_MASK | Attributes.CM_MASK);\r\n        }\r\n        $hasBg = true;\r\n      }\r\n    }\r\n\r\n    // Release object\r\n    $colors = undefined;\r\n\r\n    // Use the override if it exists\r\n    this.result.bg = $hasBg ? $bg : this.result.bg;\r\n    this.result.fg = $hasFg ? $fg : this.result.fg;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { TextureAtlas } from 'browser/renderer/shared/TextureAtlas';\r\nimport { ITerminalOptions, Terminal } from 'xterm';\r\nimport { ITerminal, ReadonlyColorSet } from 'browser/Types';\r\nimport { ICharAtlasConfig, ITextureAtlas } from 'browser/renderer/shared/Types';\r\nimport { generateConfig, configEquals } from 'browser/renderer/shared/CharAtlasUtils';\r\n\r\ninterface ITextureAtlasCacheEntry {\r\n  atlas: ITextureAtlas;\r\n  config: ICharAtlasConfig;\r\n  // N.B. This implementation potentially holds onto copies of the terminal forever, so\r\n  // this may cause memory leaks.\r\n  ownedBy: Terminal[];\r\n}\r\n\r\nconst charAtlasCache: ITextureAtlasCacheEntry[] = [];\r\n\r\n/**\r\n * Acquires a char atlas, either generating a new one or returning an existing\r\n * one that is in use by another terminal.\r\n */\r\nexport function acquireTextureAtlas(\r\n  terminal: Terminal,\r\n  options: Required<ITerminalOptions>,\r\n  colors: ReadonlyColorSet,\r\n  deviceCellWidth: number,\r\n  deviceCellHeight: number,\r\n  deviceCharWidth: number,\r\n  deviceCharHeight: number,\r\n  devicePixelRatio: number\r\n): ITextureAtlas {\r\n  const newConfig = generateConfig(deviceCellWidth, deviceCellHeight, deviceCharWidth, deviceCharHeight, options, colors, devicePixelRatio);\r\n\r\n  // Check to see if the terminal already owns this config\r\n  for (let i = 0; i < charAtlasCache.length; i++) {\r\n    const entry = charAtlasCache[i];\r\n    const ownedByIndex = entry.ownedBy.indexOf(terminal);\r\n    if (ownedByIndex >= 0) {\r\n      if (configEquals(entry.config, newConfig)) {\r\n        return entry.atlas;\r\n      }\r\n      // The configs differ, release the terminal from the entry\r\n      if (entry.ownedBy.length === 1) {\r\n        entry.atlas.dispose();\r\n        charAtlasCache.splice(i, 1);\r\n      } else {\r\n        entry.ownedBy.splice(ownedByIndex, 1);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Try match a char atlas from the cache\r\n  for (let i = 0; i < charAtlasCache.length; i++) {\r\n    const entry = charAtlasCache[i];\r\n    if (configEquals(entry.config, newConfig)) {\r\n      // Add the terminal to the cache entry and return\r\n      entry.ownedBy.push(terminal);\r\n      return entry.atlas;\r\n    }\r\n  }\r\n\r\n  const core: ITerminal = (terminal as any)._core;\r\n  const newEntry: ITextureAtlasCacheEntry = {\r\n    atlas: new TextureAtlas(document, newConfig, core.unicodeService),\r\n    config: newConfig,\r\n    ownedBy: [terminal]\r\n  };\r\n  charAtlasCache.push(newEntry);\r\n  return newEntry.atlas;\r\n}\r\n\r\n/**\r\n * Removes a terminal reference from the cache, allowing its memory to be freed.\r\n * @param terminal The terminal to remove.\r\n */\r\nexport function removeTerminalFromCache(terminal: Terminal): void {\r\n  for (let i = 0; i < charAtlasCache.length; i++) {\r\n    const index = charAtlasCache[i].ownedBy.indexOf(terminal);\r\n    if (index !== -1) {\r\n      if (charAtlasCache[i].ownedBy.length === 1) {\r\n        // Remove the cache entry if it's the only terminal\r\n        charAtlasCache[i].atlas.dispose();\r\n        charAtlasCache.splice(i, 1);\r\n      } else {\r\n        // Remove the reference from the cache entry\r\n        charAtlasCache[i].ownedBy.splice(index, 1);\r\n      }\r\n      break;\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ICharAtlasConfig } from './Types';\r\nimport { Attributes } from 'common/buffer/Constants';\r\nimport { ITerminalOptions } from 'xterm';\r\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\r\nimport { NULL_COLOR } from 'common/Color';\r\n\r\nexport function generateConfig(deviceCellWidth: number, deviceCellHeight: number, deviceCharWidth: number, deviceCharHeight: number, options: Required<ITerminalOptions>, colors: ReadonlyColorSet, devicePixelRatio: number): ICharAtlasConfig {\r\n  // null out some fields that don't matter\r\n  const clonedColors: IColorSet = {\r\n    foreground: colors.foreground,\r\n    background: colors.background,\r\n    cursor: NULL_COLOR,\r\n    cursorAccent: NULL_COLOR,\r\n    selectionForeground: NULL_COLOR,\r\n    selectionBackgroundTransparent: NULL_COLOR,\r\n    selectionBackgroundOpaque: NULL_COLOR,\r\n    selectionInactiveBackgroundTransparent: NULL_COLOR,\r\n    selectionInactiveBackgroundOpaque: NULL_COLOR,\r\n    // For the static char atlas, we only use the first 16 colors, but we need all 256 for the\r\n    // dynamic character atlas.\r\n    ansi: colors.ansi.slice(),\r\n    contrastCache: colors.contrastCache\r\n  };\r\n  return {\r\n    customGlyphs: options.customGlyphs,\r\n    devicePixelRatio,\r\n    letterSpacing: options.letterSpacing,\r\n    lineHeight: options.lineHeight,\r\n    deviceCellWidth: deviceCellWidth,\r\n    deviceCellHeight: deviceCellHeight,\r\n    deviceCharWidth: deviceCharWidth,\r\n    deviceCharHeight: deviceCharHeight,\r\n    fontFamily: options.fontFamily,\r\n    fontSize: options.fontSize,\r\n    fontWeight: options.fontWeight,\r\n    fontWeightBold: options.fontWeightBold,\r\n    allowTransparency: options.allowTransparency,\r\n    drawBoldTextInBrightColors: options.drawBoldTextInBrightColors,\r\n    minimumContrastRatio: options.minimumContrastRatio,\r\n    colors: clonedColors\r\n  };\r\n}\r\n\r\nexport function configEquals(a: ICharAtlasConfig, b: ICharAtlasConfig): boolean {\r\n  for (let i = 0; i < a.colors.ansi.length; i++) {\r\n    if (a.colors.ansi[i].rgba !== b.colors.ansi[i].rgba) {\r\n      return false;\r\n    }\r\n  }\r\n  return a.devicePixelRatio === b.devicePixelRatio &&\r\n      a.customGlyphs === b.customGlyphs &&\r\n      a.lineHeight === b.lineHeight &&\r\n      a.letterSpacing === b.letterSpacing &&\r\n      a.fontFamily === b.fontFamily &&\r\n      a.fontSize === b.fontSize &&\r\n      a.fontWeight === b.fontWeight &&\r\n      a.fontWeightBold === b.fontWeightBold &&\r\n      a.allowTransparency === b.allowTransparency &&\r\n      a.deviceCharWidth === b.deviceCharWidth &&\r\n      a.deviceCharHeight === b.deviceCharHeight &&\r\n      a.drawBoldTextInBrightColors === b.drawBoldTextInBrightColors &&\r\n      a.minimumContrastRatio === b.minimumContrastRatio &&\r\n      a.colors.foreground.rgba === b.colors.foreground.rgba &&\r\n      a.colors.background.rgba === b.colors.background.rgba;\r\n}\r\n\r\nexport function is256Color(colorCode: number): boolean {\r\n  return (colorCode & Attributes.CM_MASK) === Attributes.CM_P16 || (colorCode & Attributes.CM_MASK) === Attributes.CM_P256;\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\r\n\r\nexport const INVERTED_DEFAULT_COLOR = 257;\r\n\r\nexport const DIM_OPACITY = 0.5;\r\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge would\r\n// result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\r\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\r\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\r\n","/**\r\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\r\n\r\ninterface IBlockVector {\r\n  x: number;\r\n  y: number;\r\n  w: number;\r\n  h: number;\r\n}\r\n\r\nexport const blockElementDefinitions: { [index: string]: IBlockVector[] | undefined } = {\r\n  // Block elements (0x2580-0x2590)\r\n  '▀': [{ x: 0, y: 0, w: 8, h: 4 }], // UPPER HALF BLOCK\r\n  '▁': [{ x: 0, y: 7, w: 8, h: 1 }], // LOWER ONE EIGHTH BLOCK\r\n  '▂': [{ x: 0, y: 6, w: 8, h: 2 }], // LOWER ONE QUARTER BLOCK\r\n  '▃': [{ x: 0, y: 5, w: 8, h: 3 }], // LOWER THREE EIGHTHS BLOCK\r\n  '▄': [{ x: 0, y: 4, w: 8, h: 4 }], // LOWER HALF BLOCK\r\n  '▅': [{ x: 0, y: 3, w: 8, h: 5 }], // LOWER FIVE EIGHTHS BLOCK\r\n  '▆': [{ x: 0, y: 2, w: 8, h: 6 }], // LOWER THREE QUARTERS BLOCK\r\n  '▇': [{ x: 0, y: 1, w: 8, h: 7 }], // LOWER SEVEN EIGHTHS BLOCK\r\n  '█': [{ x: 0, y: 0, w: 8, h: 8 }], // FULL BLOCK\r\n  '▉': [{ x: 0, y: 0, w: 7, h: 8 }], // LEFT SEVEN EIGHTHS BLOCK\r\n  '▊': [{ x: 0, y: 0, w: 6, h: 8 }], // LEFT THREE QUARTERS BLOCK\r\n  '▋': [{ x: 0, y: 0, w: 5, h: 8 }], // LEFT FIVE EIGHTHS BLOCK\r\n  '▌': [{ x: 0, y: 0, w: 4, h: 8 }], // LEFT HALF BLOCK\r\n  '▍': [{ x: 0, y: 0, w: 3, h: 8 }], // LEFT THREE EIGHTHS BLOCK\r\n  '▎': [{ x: 0, y: 0, w: 2, h: 8 }], // LEFT ONE QUARTER BLOCK\r\n  '▏': [{ x: 0, y: 0, w: 1, h: 8 }], // LEFT ONE EIGHTH BLOCK\r\n  '▐': [{ x: 4, y: 0, w: 4, h: 8 }], // RIGHT HALF BLOCK\r\n\r\n  // Block elements (0x2594-0x2595)\r\n  '▔': [{ x: 0, y: 0, w: 8, h: 1 }], // UPPER ONE EIGHTH BLOCK\r\n  '▕': [{ x: 7, y: 0, w: 1, h: 8 }], // RIGHT ONE EIGHTH BLOCK\r\n\r\n  // Terminal graphic characters (0x2596-0x259F)\r\n  '▖': [{ x: 0, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER LEFT\r\n  '▗': [{ x: 4, y: 4, w: 4, h: 4 }],                             // QUADRANT LOWER RIGHT\r\n  '▘': [{ x: 0, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER LEFT\r\n  '▙': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT\r\n  '▚': [{ x: 0, y: 0, w: 4, h: 4 }, { x: 4, y: 4, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND LOWER RIGHT\r\n  '▛': [{ x: 0, y: 0, w: 4, h: 8 }, { x: 4, y: 0, w: 4, h: 4 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT\r\n  '▜': [{ x: 0, y: 0, w: 8, h: 4 }, { x: 4, y: 0, w: 4, h: 8 }], // QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT\r\n  '▝': [{ x: 4, y: 0, w: 4, h: 4 }],                             // QUADRANT UPPER RIGHT\r\n  '▞': [{ x: 4, y: 0, w: 4, h: 4 }, { x: 0, y: 4, w: 4, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT\r\n  '▟': [{ x: 4, y: 0, w: 4, h: 8 }, { x: 0, y: 4, w: 8, h: 4 }], // QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT\r\n\r\n  // VERTICAL ONE EIGHTH BLOCK-2 through VERTICAL ONE EIGHTH BLOCK-7\r\n  '\\u{1FB70}': [{ x: 1, y: 0, w: 1, h: 8 }],\r\n  '\\u{1FB71}': [{ x: 2, y: 0, w: 1, h: 8 }],\r\n  '\\u{1FB72}': [{ x: 3, y: 0, w: 1, h: 8 }],\r\n  '\\u{1FB73}': [{ x: 4, y: 0, w: 1, h: 8 }],\r\n  '\\u{1FB74}': [{ x: 5, y: 0, w: 1, h: 8 }],\r\n  '\\u{1FB75}': [{ x: 6, y: 0, w: 1, h: 8 }],\r\n\r\n  // HORIZONTAL ONE EIGHTH BLOCK-2 through HORIZONTAL ONE EIGHTH BLOCK-7\r\n  '\\u{1FB76}': [{ x: 0, y: 1, w: 8, h: 1 }],\r\n  '\\u{1FB77}': [{ x: 0, y: 2, w: 8, h: 1 }],\r\n  '\\u{1FB78}': [{ x: 0, y: 3, w: 8, h: 1 }],\r\n  '\\u{1FB79}': [{ x: 0, y: 4, w: 8, h: 1 }],\r\n  '\\u{1FB7A}': [{ x: 0, y: 5, w: 8, h: 1 }],\r\n  '\\u{1FB7B}': [{ x: 0, y: 6, w: 8, h: 1 }],\r\n\r\n  // LEFT AND LOWER ONE EIGHTH BLOCK\r\n  '\\u{1FB7C}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\r\n  // LEFT AND UPPER ONE EIGHTH BLOCK\r\n  '\\u{1FB7D}': [{ x: 0, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\r\n  // RIGHT AND UPPER ONE EIGHTH BLOCK\r\n  '\\u{1FB7E}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 0, w: 8, h: 1 }],\r\n  // RIGHT AND LOWER ONE EIGHTH BLOCK\r\n  '\\u{1FB7F}': [{ x: 7, y: 0, w: 1, h: 8 }, { x: 0, y: 7, w: 8, h: 1 }],\r\n  // UPPER AND LOWER ONE EIGHTH BLOCK\r\n  '\\u{1FB80}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\r\n  // HORIZONTAL ONE EIGHTH BLOCK-1358\r\n  '\\u{1FB81}': [{ x: 0, y: 0, w: 8, h: 1 }, { x: 0, y: 2, w: 8, h: 1 }, { x: 0, y: 4, w: 8, h: 1 }, { x: 0, y: 7, w: 8, h: 1 }],\r\n\r\n  // UPPER ONE QUARTER BLOCK\r\n  '\\u{1FB82}': [{ x: 0, y: 0, w: 8, h: 2 }],\r\n  // UPPER THREE EIGHTHS BLOCK\r\n  '\\u{1FB83}': [{ x: 0, y: 0, w: 8, h: 3 }],\r\n  // UPPER FIVE EIGHTHS BLOCK\r\n  '\\u{1FB84}': [{ x: 0, y: 0, w: 8, h: 5 }],\r\n  // UPPER THREE QUARTERS BLOCK\r\n  '\\u{1FB85}': [{ x: 0, y: 0, w: 8, h: 6 }],\r\n  // UPPER SEVEN EIGHTHS BLOCK\r\n  '\\u{1FB86}': [{ x: 0, y: 0, w: 8, h: 7 }],\r\n\r\n  // RIGHT ONE QUARTER BLOCK\r\n  '\\u{1FB87}': [{ x: 6, y: 0, w: 2, h: 8 }],\r\n  // RIGHT THREE EIGHTHS B0OCK\r\n  '\\u{1FB88}': [{ x: 5, y: 0, w: 3, h: 8 }],\r\n  // RIGHT FIVE EIGHTHS BL0CK\r\n  '\\u{1FB89}': [{ x: 3, y: 0, w: 5, h: 8 }],\r\n  // RIGHT THREE QUARTERS 0LOCK\r\n  '\\u{1FB8A}': [{ x: 2, y: 0, w: 6, h: 8 }],\r\n  // RIGHT SEVEN EIGHTHS B0OCK\r\n  '\\u{1FB8B}': [{ x: 1, y: 0, w: 7, h: 8 }],\r\n\r\n  // CHECKER BOARD FILL\r\n  '\\u{1FB95}': [\r\n    { x: 0, y: 0, w: 2, h: 2 }, { x: 4, y: 0, w: 2, h: 2 },\r\n    { x: 2, y: 2, w: 2, h: 2 }, { x: 6, y: 2, w: 2, h: 2 },\r\n    { x: 0, y: 4, w: 2, h: 2 }, { x: 4, y: 4, w: 2, h: 2 },\r\n    { x: 2, y: 6, w: 2, h: 2 }, { x: 6, y: 6, w: 2, h: 2 }\r\n  ],\r\n  // INVERSE CHECKER BOARD FILL\r\n  '\\u{1FB96}': [\r\n    { x: 2, y: 0, w: 2, h: 2 }, { x: 6, y: 0, w: 2, h: 2 },\r\n    { x: 0, y: 2, w: 2, h: 2 }, { x: 4, y: 2, w: 2, h: 2 },\r\n    { x: 2, y: 4, w: 2, h: 2 }, { x: 6, y: 4, w: 2, h: 2 },\r\n    { x: 0, y: 6, w: 2, h: 2 }, { x: 4, y: 6, w: 2, h: 2 }\r\n  ],\r\n  // HEAVY HORIZONTAL FILL (upper middle and lower one quarter block)\r\n  '\\u{1FB97}': [{ x: 0, y: 2, w: 8, h: 2 }, { x: 0, y: 6, w: 8, h: 2 }]\r\n};\r\n\r\ntype PatternDefinition = number[][];\r\n\r\n/**\r\n * Defines the repeating pattern used by special characters, the pattern is made up of a 2d array of\r\n * pixel values to be filled (1) or not filled (0).\r\n */\r\nconst patternCharacterDefinitions: { [key: string]: PatternDefinition | undefined } = {\r\n  // Shade characters (0x2591-0x2593)\r\n  '░': [ // LIGHT SHADE (25%)\r\n    [1, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 1, 0],\r\n    [0, 0, 0, 0]\r\n  ],\r\n  '▒': [ // MEDIUM SHADE (50%)\r\n    [1, 0],\r\n    [0, 0],\r\n    [0, 1],\r\n    [0, 0]\r\n  ],\r\n  '▓': [ // DARK SHADE (75%)\r\n    [0, 1],\r\n    [1, 1],\r\n    [1, 0],\r\n    [1, 1]\r\n  ]\r\n};\r\n\r\nconst enum Shapes {\r\n  /** │ */ TOP_TO_BOTTOM = 'M.5,0 L.5,1',\r\n  /** ─ */ LEFT_TO_RIGHT = 'M0,.5 L1,.5',\r\n\r\n  /** └ */ TOP_TO_RIGHT = 'M.5,0 L.5,.5 L1,.5',\r\n  /** ┘ */ TOP_TO_LEFT = 'M.5,0 L.5,.5 L0,.5',\r\n  /** ┐ */ LEFT_TO_BOTTOM = 'M0,.5 L.5,.5 L.5,1',\r\n  /** ┌ */ RIGHT_TO_BOTTOM = 'M0.5,1 L.5,.5 L1,.5',\r\n\r\n  /** ╵ */ MIDDLE_TO_TOP = 'M.5,.5 L.5,0',\r\n  /** ╴ */ MIDDLE_TO_LEFT = 'M.5,.5 L0,.5',\r\n  /** ╶ */ MIDDLE_TO_RIGHT = 'M.5,.5 L1,.5',\r\n  /** ╷ */ MIDDLE_TO_BOTTOM = 'M.5,.5 L.5,1',\r\n\r\n  /** ┴ */ T_TOP = 'M0,.5 L1,.5 M.5,.5 L.5,0',\r\n  /** ┤ */ T_LEFT = 'M.5,0 L.5,1 M.5,.5 L0,.5',\r\n  /** ├ */ T_RIGHT = 'M.5,0 L.5,1 M.5,.5 L1,.5',\r\n  /** ┬ */ T_BOTTOM = 'M0,.5 L1,.5 M.5,.5 L.5,1',\r\n\r\n  /** ┼ */ CROSS = 'M0,.5 L1,.5 M.5,0 L.5,1',\r\n\r\n  /** ╌ */ TWO_DASHES_HORIZONTAL = 'M.1,.5 L.4,.5 M.6,.5 L.9,.5', // .2 empty, .3 filled\r\n  /** ┄ */ THREE_DASHES_HORIZONTAL = 'M.0667,.5 L.2667,.5 M.4,.5 L.6,.5 M.7333,.5 L.9333,.5', // .1333 empty, .2 filled\r\n  /** ┉ */ FOUR_DASHES_HORIZONTAL = 'M.05,.5 L.2,.5 M.3,.5 L.45,.5 M.55,.5 L.7,.5 M.8,.5 L.95,.5', // .1 empty, .15 filled\r\n  /** ╎ */ TWO_DASHES_VERTICAL = 'M.5,.1 L.5,.4 M.5,.6 L.5,.9',\r\n  /** ┆ */ THREE_DASHES_VERTICAL = 'M.5,.0667 L.5,.2667 M.5,.4 L.5,.6 M.5,.7333 L.5,.9333',\r\n  /** ┊ */ FOUR_DASHES_VERTICAL = 'M.5,.05 L.5,.2 M.5,.3 L.5,.45 L.5,.55 M.5,.7 L.5,.95',\r\n}\r\n\r\nconst enum Style {\r\n  NORMAL = 1,\r\n  BOLD = 3\r\n}\r\n\r\n/**\r\n * @param xp The percentage of 15% of the x axis.\r\n * @param yp The percentage of 15% of the x axis on the y axis.\r\n */\r\ntype DrawFunctionDefinition = (xp: number, yp: number) => string;\r\n\r\n/**\r\n * This contains the definitions of all box drawing characters in the format of SVG paths (ie. the\r\n * svg d attribute).\r\n */\r\nexport const boxDrawingDefinitions: { [character: string]: { [fontWeight: number]: string | DrawFunctionDefinition } | undefined } = {\r\n  // Uniform normal and bold\r\n  '─': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT },\r\n  '━': { [Style.BOLD]:   Shapes.LEFT_TO_RIGHT },\r\n  '│': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM },\r\n  '┃': { [Style.BOLD]:   Shapes.TOP_TO_BOTTOM },\r\n  '┌': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM },\r\n  '┏': { [Style.BOLD]:   Shapes.RIGHT_TO_BOTTOM },\r\n  '┐': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM },\r\n  '┓': { [Style.BOLD]:   Shapes.LEFT_TO_BOTTOM },\r\n  '└': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT },\r\n  '┗': { [Style.BOLD]:   Shapes.TOP_TO_RIGHT },\r\n  '┘': { [Style.NORMAL]: Shapes.TOP_TO_LEFT },\r\n  '┛': { [Style.BOLD]:   Shapes.TOP_TO_LEFT },\r\n  '├': { [Style.NORMAL]: Shapes.T_RIGHT },\r\n  '┣': { [Style.BOLD]:   Shapes.T_RIGHT },\r\n  '┤': { [Style.NORMAL]: Shapes.T_LEFT },\r\n  '┫': { [Style.BOLD]:   Shapes.T_LEFT },\r\n  '┬': { [Style.NORMAL]: Shapes.T_BOTTOM },\r\n  '┳': { [Style.BOLD]:   Shapes.T_BOTTOM },\r\n  '┴': { [Style.NORMAL]: Shapes.T_TOP },\r\n  '┻': { [Style.BOLD]:   Shapes.T_TOP },\r\n  '┼': { [Style.NORMAL]: Shapes.CROSS },\r\n  '╋': { [Style.BOLD]:   Shapes.CROSS },\r\n  '╴': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT },\r\n  '╸': { [Style.BOLD]:   Shapes.MIDDLE_TO_LEFT },\r\n  '╵': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP },\r\n  '╹': { [Style.BOLD]:   Shapes.MIDDLE_TO_TOP },\r\n  '╶': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT },\r\n  '╺': { [Style.BOLD]:   Shapes.MIDDLE_TO_RIGHT },\r\n  '╷': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM },\r\n  '╻': { [Style.BOLD]:   Shapes.MIDDLE_TO_BOTTOM },\r\n\r\n  // Double border\r\n  '═': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\r\n  '║': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\r\n  '╒': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\r\n  '╓': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},1 L${.5 - xp},.5 L1,.5 M${.5 + xp},.5 L${.5 + xp},1` },\r\n  '╔': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\r\n  '╕': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L.5,${.5 - yp} L.5,1 M0,${.5 + yp} L.5,${.5 + yp}` },\r\n  '╖': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},1 L${.5 + xp},.5 L0,.5 M${.5 - xp},.5 L${.5 - xp},1` },\r\n  '╗': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},1` },\r\n  '╘': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 + yp} L1,${.5 + yp} M.5,${.5 - yp} L1,${.5 - yp}` },\r\n  '╙': { [Style.NORMAL]: (xp, yp) => `M1,.5 L${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\r\n  '╚': { [Style.NORMAL]: (xp, yp) => `M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0 M1,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},0` },\r\n  '╛': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L.5,${.5 + yp} L.5,0 M0,${.5 - yp} L.5,${.5 - yp}` },\r\n  '╜': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 + xp},.5 L${.5 + xp},0 M${.5 - xp},.5 L${.5 - xp},0` },\r\n  '╝': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M0,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},0` },\r\n  '╞': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M.5,${.5 - yp} L1,${.5 - yp} M.5,${.5 + yp} L1,${.5 + yp}` },\r\n  '╟': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1 M${.5 + xp},.5 L1,.5` },\r\n  '╠': { [Style.NORMAL]: (xp, yp) => `M${.5 - xp},0 L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\r\n  '╡': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L.5,${.5 - yp} M0,${.5 + yp} L.5,${.5 + yp}` },\r\n  '╢': { [Style.NORMAL]: (xp, yp) => `M0,.5 L${.5 - xp},.5 M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\r\n  '╣': { [Style.NORMAL]: (xp, yp) => `M${.5 + xp},0 L${.5 + xp},1 M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0` },\r\n  '╤': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp} M.5,${.5 + yp} L.5,1` },\r\n  '╥': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},1 M${.5 + xp},.5 L${.5 + xp},1` },\r\n  '╦': { [Style.NORMAL]: (xp, yp) => `M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1` },\r\n  '╧': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - yp} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\r\n  '╨': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},.5 L${.5 - xp},0 M${.5 + xp},.5 L${.5 + xp},0` },\r\n  '╩': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L1,${.5 + yp} M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\r\n  '╪': { [Style.NORMAL]: (xp, yp) => `${Shapes.TOP_TO_BOTTOM} M0,${.5 - yp} L1,${.5 - yp} M0,${.5 + yp} L1,${.5 + yp}` },\r\n  '╫': { [Style.NORMAL]: (xp, yp) => `${Shapes.LEFT_TO_RIGHT} M${.5 - xp},0 L${.5 - xp},1 M${.5 + xp},0 L${.5 + xp},1` },\r\n  '╬': { [Style.NORMAL]: (xp, yp) => `M0,${.5 + yp} L${.5 - xp},${.5 + yp} L${.5 - xp},1 M1,${.5 + yp} L${.5 + xp},${.5 + yp} L${.5 + xp},1 M0,${.5 - yp} L${.5 - xp},${.5 - yp} L${.5 - xp},0 M1,${.5 - yp} L${.5 + xp},${.5 - yp} L${.5 + xp},0` },\r\n\r\n  // Diagonal\r\n  '╱': { [Style.NORMAL]: 'M1,0 L0,1' },\r\n  '╲': { [Style.NORMAL]: 'M0,0 L1,1' },\r\n  '╳': { [Style.NORMAL]: 'M1,0 L0,1 M0,0 L1,1' },\r\n\r\n  // Mixed weight\r\n  '╼': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\r\n  '╽': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\r\n  '╾': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\r\n  '╿': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\r\n  '┍': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\r\n  '┎': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\r\n  '┑': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\r\n  '┒': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\r\n  '┕': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\r\n  '┖': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\r\n  '┙': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\r\n  '┚': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\r\n  '┝': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\r\n  '┞': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\r\n  '┟': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\r\n  '┠': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\r\n  '┡': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_RIGHT },\r\n  '┢': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\r\n  '┥': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\r\n  '┦': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\r\n  '┧': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\r\n  '┨': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\r\n  '┩': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.TOP_TO_LEFT },\r\n  '┪': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\r\n  '┭': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\r\n  '┮': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\r\n  '┯': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\r\n  '┰': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\r\n  '┱': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\r\n  '┲': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\r\n  '┵': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\r\n  '┶': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\r\n  '┷': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\r\n  '┸': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\r\n  '┹': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\r\n  '┺': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\r\n  '┽': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}`,  [Style.BOLD]: Shapes.MIDDLE_TO_LEFT },\r\n  '┾': { [Style.NORMAL]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}`,   [Style.BOLD]: Shapes.MIDDLE_TO_RIGHT },\r\n  '┿': { [Style.NORMAL]: Shapes.TOP_TO_BOTTOM,                                 [Style.BOLD]: Shapes.LEFT_TO_RIGHT },\r\n  '╀': { [Style.NORMAL]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}`, [Style.BOLD]: Shapes.MIDDLE_TO_TOP },\r\n  '╁': { [Style.NORMAL]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}`,    [Style.BOLD]: Shapes.MIDDLE_TO_BOTTOM },\r\n  '╂': { [Style.NORMAL]: Shapes.LEFT_TO_RIGHT,                                 [Style.BOLD]: Shapes.TOP_TO_BOTTOM },\r\n  '╃': { [Style.NORMAL]: Shapes.RIGHT_TO_BOTTOM,                               [Style.BOLD]: Shapes.TOP_TO_LEFT },\r\n  '╄': { [Style.NORMAL]: Shapes.LEFT_TO_BOTTOM,                                [Style.BOLD]: Shapes.TOP_TO_RIGHT },\r\n  '╅': { [Style.NORMAL]: Shapes.TOP_TO_RIGHT,                                  [Style.BOLD]: Shapes.LEFT_TO_BOTTOM },\r\n  '╆': { [Style.NORMAL]: Shapes.TOP_TO_LEFT,                                   [Style.BOLD]: Shapes.RIGHT_TO_BOTTOM },\r\n  '╇': { [Style.NORMAL]: Shapes.MIDDLE_TO_BOTTOM,                              [Style.BOLD]: `${Shapes.MIDDLE_TO_TOP} ${Shapes.LEFT_TO_RIGHT}` },\r\n  '╈': { [Style.NORMAL]: Shapes.MIDDLE_TO_TOP,                                 [Style.BOLD]: `${Shapes.LEFT_TO_RIGHT} ${Shapes.MIDDLE_TO_BOTTOM}` },\r\n  '╉': { [Style.NORMAL]: Shapes.MIDDLE_TO_RIGHT,                               [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_LEFT}` },\r\n  '╊': { [Style.NORMAL]: Shapes.MIDDLE_TO_LEFT,                                [Style.BOLD]: `${Shapes.TOP_TO_BOTTOM} ${Shapes.MIDDLE_TO_RIGHT}` },\r\n\r\n  // Dashed\r\n  '╌': { [Style.NORMAL]: Shapes.TWO_DASHES_HORIZONTAL },\r\n  '╍': { [Style.BOLD]:   Shapes.TWO_DASHES_HORIZONTAL },\r\n  '┄': { [Style.NORMAL]: Shapes.THREE_DASHES_HORIZONTAL },\r\n  '┅': { [Style.BOLD]:   Shapes.THREE_DASHES_HORIZONTAL },\r\n  '┈': { [Style.NORMAL]: Shapes.FOUR_DASHES_HORIZONTAL },\r\n  '┉': { [Style.BOLD]:   Shapes.FOUR_DASHES_HORIZONTAL },\r\n  '╎': { [Style.NORMAL]: Shapes.TWO_DASHES_VERTICAL },\r\n  '╏': { [Style.BOLD]:   Shapes.TWO_DASHES_VERTICAL },\r\n  '┆': { [Style.NORMAL]: Shapes.THREE_DASHES_VERTICAL  },\r\n  '┇': { [Style.BOLD]:   Shapes.THREE_DASHES_VERTICAL },\r\n  '┊': { [Style.NORMAL]: Shapes.FOUR_DASHES_VERTICAL },\r\n  '┋': { [Style.BOLD]:   Shapes.FOUR_DASHES_VERTICAL },\r\n\r\n  // Curved\r\n  '╭': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,1,.5` },\r\n  '╮': { [Style.NORMAL]: (xp, yp) => `M.5,1 L.5,${.5 + (yp / .15 * .5)} C.5,${.5 + (yp / .15 * .5)},.5,.5,0,.5` },\r\n  '╯': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,0,.5` },\r\n  '╰': { [Style.NORMAL]: (xp, yp) => `M.5,0 L.5,${.5 - (yp / .15 * .5)} C.5,${.5 - (yp / .15 * .5)},.5,.5,1,.5` }\r\n};\r\n\r\ninterface IVectorShape {\r\n  d: string;\r\n  type: VectorType;\r\n  leftPadding?: number;\r\n  rightPadding?: number;\r\n}\r\n\r\nconst enum VectorType {\r\n  FILL,\r\n  STROKE\r\n}\r\n\r\n/**\r\n * This contains the definitions of the primarily used box drawing characters as vector shapes. The\r\n * reason these characters are defined specially is to avoid common problems if a user's font has\r\n * not been patched with powerline characters and also to get pixel perfect rendering as rendering\r\n * issues can occur around AA/SPAA.\r\n *\r\n * The line variants draw beyond the cell and get clipped to ensure the end of the line is not visible.\r\n *\r\n * Original symbols defined in https://github.com/powerline/fontpatcher\r\n */\r\nexport const powerlineDefinitions: { [index: string]: IVectorShape } = {\r\n  // Right triangle solid\r\n  '\\u{E0B0}': { d: 'M0,0 L1,.5 L0,1', type: VectorType.FILL, rightPadding: 2 },\r\n  // Right triangle line\r\n  '\\u{E0B1}': { d: 'M-1,-.5 L1,.5 L-1,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\r\n  // Left triangle solid\r\n  '\\u{E0B2}': { d: 'M1,0 L0,.5 L1,1', type: VectorType.FILL, leftPadding: 2 },\r\n  // Left triangle line\r\n  '\\u{E0B3}': { d: 'M2,-.5 L0,.5 L2,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\r\n  // Right semi-circle solid\r\n  '\\u{E0B4}': { d: 'M0,0 L0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.FILL, rightPadding: 1 },\r\n  // Right semi-circle line\r\n  '\\u{E0B5}': { d: 'M0,1 C0.552,1,1,0.776,1,.5 C1,0.224,0.552,0,0,0', type: VectorType.STROKE, rightPadding: 1 },\r\n  // Left semi-circle solid\r\n  '\\u{E0B6}': { d: 'M1,0 L1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.FILL, leftPadding: 1 },\r\n  // Left semi-circle line\r\n  '\\u{E0B7}': { d: 'M1,1 C0.448,1,0,0.776,0,.5 C0,0.224,0.448,0,1,0', type: VectorType.STROKE, leftPadding: 1 },\r\n  // Lower left triangle\r\n  '\\u{E0B8}': { d: 'M-.5,-.5 L1.5,1.5 L-.5,1.5', type: VectorType.FILL },\r\n  // Backslash separator\r\n  '\\u{E0B9}': { d: 'M-.5,-.5 L1.5,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\r\n  // Lower right triangle\r\n  '\\u{E0BA}': { d: 'M1.5,-.5 L-.5,1.5 L1.5,1.5', type: VectorType.FILL },\r\n  // Upper left triangle\r\n  '\\u{E0BC}': { d: 'M1.5,-.5 L-.5,1.5 L-.5,-.5', type: VectorType.FILL },\r\n  // Forward slash separator\r\n  '\\u{E0BD}': { d: 'M1.5,-.5 L-.5,1.5', type: VectorType.STROKE, leftPadding: 1, rightPadding: 1 },\r\n  // Upper right triangle\r\n  '\\u{E0BE}': { d: 'M-.5,-.5 L1.5,1.5 L1.5,-.5', type: VectorType.FILL }\r\n};\r\n// Forward slash separator redundant\r\npowerlineDefinitions['\\u{E0BB}'] = powerlineDefinitions['\\u{E0BD}'];\r\n// Backslash separator redundant\r\npowerlineDefinitions['\\u{E0BF}'] = powerlineDefinitions['\\u{E0B9}'];\r\n\r\n/**\r\n * Try drawing a custom block element or box drawing character, returning whether it was\r\n * successfully drawn.\r\n */\r\nexport function tryDrawCustomChar(\r\n  ctx: CanvasRenderingContext2D,\r\n  c: string,\r\n  xOffset: number,\r\n  yOffset: number,\r\n  deviceCellWidth: number,\r\n  deviceCellHeight: number,\r\n  fontSize: number,\r\n  devicePixelRatio: number\r\n): boolean {\r\n  const blockElementDefinition = blockElementDefinitions[c];\r\n  if (blockElementDefinition) {\r\n    drawBlockElementChar(ctx, blockElementDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight);\r\n    return true;\r\n  }\r\n\r\n  const patternDefinition = patternCharacterDefinitions[c];\r\n  if (patternDefinition) {\r\n    drawPatternChar(ctx, patternDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight);\r\n    return true;\r\n  }\r\n\r\n  const boxDrawingDefinition = boxDrawingDefinitions[c];\r\n  if (boxDrawingDefinition) {\r\n    drawBoxDrawingChar(ctx, boxDrawingDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight, devicePixelRatio);\r\n    return true;\r\n  }\r\n\r\n  const powerlineDefinition = powerlineDefinitions[c];\r\n  if (powerlineDefinition) {\r\n    drawPowerlineChar(ctx, powerlineDefinition, xOffset, yOffset, deviceCellWidth, deviceCellHeight, fontSize, devicePixelRatio);\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction drawBlockElementChar(\r\n  ctx: CanvasRenderingContext2D,\r\n  charDefinition: IBlockVector[],\r\n  xOffset: number,\r\n  yOffset: number,\r\n  deviceCellWidth: number,\r\n  deviceCellHeight: number\r\n): void {\r\n  for (let i = 0; i < charDefinition.length; i++) {\r\n    const box = charDefinition[i];\r\n    const xEighth = deviceCellWidth / 8;\r\n    const yEighth = deviceCellHeight / 8;\r\n    ctx.fillRect(\r\n      xOffset + box.x * xEighth,\r\n      yOffset + box.y * yEighth,\r\n      box.w * xEighth,\r\n      box.h * yEighth\r\n    );\r\n  }\r\n}\r\n\r\nconst cachedPatterns: Map<PatternDefinition, Map</* fillStyle */string, CanvasPattern>> = new Map();\r\n\r\nfunction drawPatternChar(\r\n  ctx: CanvasRenderingContext2D,\r\n  charDefinition: number[][],\r\n  xOffset: number,\r\n  yOffset: number,\r\n  deviceCellWidth: number,\r\n  deviceCellHeight: number\r\n): void {\r\n  let patternSet = cachedPatterns.get(charDefinition);\r\n  if (!patternSet) {\r\n    patternSet = new Map();\r\n    cachedPatterns.set(charDefinition, patternSet);\r\n  }\r\n  const fillStyle = ctx.fillStyle;\r\n  if (typeof fillStyle !== 'string') {\r\n    throw new Error(`Unexpected fillStyle type \"${fillStyle}\"`);\r\n  }\r\n  let pattern = patternSet.get(fillStyle);\r\n  if (!pattern) {\r\n    const width = charDefinition[0].length;\r\n    const height = charDefinition.length;\r\n    const tmpCanvas = document.createElement('canvas');\r\n    tmpCanvas.width = width;\r\n    tmpCanvas.height = height;\r\n    const tmpCtx = throwIfFalsy(tmpCanvas.getContext('2d'));\r\n    const imageData = new ImageData(width, height);\r\n\r\n    // Extract rgba from fillStyle\r\n    let r: number;\r\n    let g: number;\r\n    let b: number;\r\n    let a: number;\r\n    if (fillStyle.startsWith('#')) {\r\n      r = parseInt(fillStyle.slice(1, 3), 16);\r\n      g = parseInt(fillStyle.slice(3, 5), 16);\r\n      b = parseInt(fillStyle.slice(5, 7), 16);\r\n      a = fillStyle.length > 7 && parseInt(fillStyle.slice(7, 9), 16) || 1;\r\n    } else if (fillStyle.startsWith('rgba')) {\r\n      ([r, g, b, a] = fillStyle.substring(5, fillStyle.length - 1).split(',').map(e => parseFloat(e)));\r\n    } else {\r\n      throw new Error(`Unexpected fillStyle color format \"${fillStyle}\" when drawing pattern glyph`);\r\n    }\r\n\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        imageData.data[(y * width + x) * 4    ] = r;\r\n        imageData.data[(y * width + x) * 4 + 1] = g;\r\n        imageData.data[(y * width + x) * 4 + 2] = b;\r\n        imageData.data[(y * width + x) * 4 + 3] = charDefinition[y][x] * (a * 255);\r\n      }\r\n    }\r\n    tmpCtx.putImageData(imageData, 0, 0);\r\n    pattern = throwIfFalsy(ctx.createPattern(tmpCanvas, null));\r\n    patternSet.set(fillStyle, pattern);\r\n  }\r\n  ctx.fillStyle = pattern;\r\n  ctx.fillRect(xOffset, yOffset, deviceCellWidth, deviceCellHeight);\r\n}\r\n\r\n/**\r\n * Draws the following box drawing characters by mapping a subset of SVG d attribute instructions to\r\n * canvas draw calls.\r\n *\r\n * Box styles:       ┎┰┒┍┯┑╓╥╖╒╤╕ ┏┳┓┌┲┓┌┬┐┏┱┐\r\n * ┌─┬─┐ ┏━┳━┓ ╔═╦═╗ ┠╂┨┝┿┥╟╫╢╞╪╡ ┡╇┩├╊┫┢╈┪┣╉┤\r\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┖┸┚┕┷┙╙╨╜╘╧╛ └┴┘└┺┛┗┻┛┗┹┘\r\n * ├─┼─┤ ┣━╋━┫ ╠═╬═╣ ┏┱┐┌┲┓┌┬┐┌┬┐ ┏┳┓┌┮┓┌┬┐┏┭┐\r\n * │ │ │ ┃ ┃ ┃ ║ ║ ║ ┡╃┤├╄┩├╆┪┢╅┤ ┞╀┦├┾┫┟╁┧┣┽┤\r\n * └─┴─┘ ┗━┻━┛ ╚═╩═╝ └┴┘└┴┘└┺┛┗┹┘ └┴┘└┶┛┗┻┛┗┵┘\r\n *\r\n * Other:\r\n * ╭─╮ ╲ ╱ ╷╻╎╏┆┇┊┋ ╺╾╴ ╌╌╌ ┄┄┄ ┈┈┈\r\n * │ │  ╳  ╽╿╎╏┆┇┊┋ ╶╼╸ ╍╍╍ ┅┅┅ ┉┉┉\r\n * ╰─╯ ╱ ╲ ╹╵╎╏┆┇┊┋\r\n *\r\n * All box drawing characters:\r\n * ─ ━ │ ┃ ┄ ┅ ┆ ┇ ┈ ┉ ┊ ┋ ┌ ┍ ┎ ┏\r\n * ┐ ┑ ┒ ┓ └ ┕ ┖ ┗ ┘ ┙ ┚ ┛ ├ ┝ ┞ ┟\r\n * ┠ ┡ ┢ ┣ ┤ ┥ ┦ ┧ ┨ ┩ ┪ ┫ ┬ ┭ ┮ ┯\r\n * ┰ ┱ ┲ ┳ ┴ ┵ ┶ ┷ ┸ ┹ ┺ ┻ ┼ ┽ ┾ ┿\r\n * ╀ ╁ ╂ ╃ ╄ ╅ ╆ ╇ ╈ ╉ ╊ ╋ ╌ ╍ ╎ ╏\r\n * ═ ║ ╒ ╓ ╔ ╕ ╖ ╗ ╘ ╙ ╚ ╛ ╜ ╝ ╞ ╟\r\n * ╠ ╡ ╢ ╣ ╤ ╥ ╦ ╧ ╨ ╩ ╪ ╫ ╬ ╭ ╮ ╯\r\n * ╰ ╱ ╲ ╳ ╴ ╵ ╶ ╷ ╸ ╹ ╺ ╻ ╼ ╽ ╾ ╿\r\n *\r\n * ---\r\n *\r\n * Box drawing alignment tests:                                          █\r\n *                                                                       ▉\r\n *   ╔══╦══╗  ┌──┬──┐  ╭──┬──╮  ╭──┬──╮  ┏━━┳━━┓  ┎┒┏┑   ╷  ╻ ┏┯┓ ┌┰┐    ▊ ╱╲╱╲╳╳╳\r\n *   ║┌─╨─┐║  │╔═╧═╗│  │╒═╪═╕│  │╓─╁─╖│  ┃┌─╂─┐┃  ┗╃╄┙  ╶┼╴╺╋╸┠┼┨ ┝╋┥    ▋ ╲╱╲╱╳╳╳\r\n *   ║│╲ ╱│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╿ │┃  ┍╅╆┓   ╵  ╹ ┗┷┛ └┸┘    ▌ ╱╲╱╲╳╳╳\r\n *   ╠╡ ╳ ╞╣  ├╢   ╟┤  ├┼─┼─┼┤  ├╫─╂─╫┤  ┣┿╾┼╼┿┫  ┕┛┖┚     ┌┄┄┐ ╎ ┏┅┅┓ ┋ ▍ ╲╱╲╱╳╳╳\r\n *   ║│╱ ╲│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╽ │┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▎\r\n *   ║└─╥─┘║  │╚═╤═╝│  │╘═╪═╛│  │╙─╀─╜│  ┃└─╂─┘┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▏\r\n *   ╚══╩══╝  └──┴──┘  ╰──┴──╯  ╰──┴──╯  ┗━━┻━━┛           └╌╌┘ ╎ ┗╍╍┛ ┋  ▁▂▃▄▅▆▇█\r\n *\r\n * Source: https://www.w3.org/2001/06/utf-8-test/UTF-8-demo.html\r\n */\r\nfunction drawBoxDrawingChar(\r\n  ctx: CanvasRenderingContext2D,\r\n  charDefinition: { [fontWeight: number]: string | ((xp: number, yp: number) => string) },\r\n  xOffset: number,\r\n  yOffset: number,\r\n  deviceCellWidth: number,\r\n  deviceCellHeight: number,\r\n  devicePixelRatio: number\r\n): void {\r\n  ctx.strokeStyle = ctx.fillStyle;\r\n  for (const [fontWeight, instructions] of Object.entries(charDefinition)) {\r\n    ctx.beginPath();\r\n    ctx.lineWidth = devicePixelRatio * Number.parseInt(fontWeight);\r\n    let actualInstructions: string;\r\n    if (typeof instructions === 'function') {\r\n      const xp = .15;\r\n      const yp = .15 / deviceCellHeight * deviceCellWidth;\r\n      actualInstructions = instructions(xp, yp);\r\n    } else {\r\n      actualInstructions = instructions;\r\n    }\r\n    for (const instruction of actualInstructions.split(' ')) {\r\n      const type = instruction[0];\r\n      const f = svgToCanvasInstructionMap[type];\r\n      if (!f) {\r\n        console.error(`Could not find drawing instructions for \"${type}\"`);\r\n        continue;\r\n      }\r\n      const args: string[] = instruction.substring(1).split(',');\r\n      if (!args[0] || !args[1]) {\r\n        continue;\r\n      }\r\n      f(ctx, translateArgs(args, deviceCellWidth, deviceCellHeight, xOffset, yOffset, true, devicePixelRatio));\r\n    }\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n  }\r\n}\r\n\r\nfunction drawPowerlineChar(\r\n  ctx: CanvasRenderingContext2D,\r\n  charDefinition: IVectorShape,\r\n  xOffset: number,\r\n  yOffset: number,\r\n  deviceCellWidth: number,\r\n  deviceCellHeight: number,\r\n  fontSize: number,\r\n  devicePixelRatio: number\r\n): void {\r\n  // Clip the cell to make sure drawing doesn't occur beyond bounds\r\n  const clipRegion = new Path2D();\r\n  clipRegion.rect(xOffset, yOffset, deviceCellWidth, deviceCellHeight);\r\n  ctx.clip(clipRegion);\r\n\r\n  ctx.beginPath();\r\n  // Scale the stroke with DPR and font size\r\n  const cssLineWidth = fontSize / 12;\r\n  ctx.lineWidth = devicePixelRatio * cssLineWidth;\r\n  for (const instruction of charDefinition.d.split(' ')) {\r\n    const type = instruction[0];\r\n    const f = svgToCanvasInstructionMap[type];\r\n    if (!f) {\r\n      console.error(`Could not find drawing instructions for \"${type}\"`);\r\n      continue;\r\n    }\r\n    const args: string[] = instruction.substring(1).split(',');\r\n    if (!args[0] || !args[1]) {\r\n      continue;\r\n    }\r\n    f(ctx, translateArgs(\r\n      args,\r\n      deviceCellWidth,\r\n      deviceCellHeight,\r\n      xOffset,\r\n      yOffset,\r\n      false,\r\n      devicePixelRatio,\r\n      (charDefinition.leftPadding ?? 0) * (cssLineWidth / 2),\r\n      (charDefinition.rightPadding ?? 0) * (cssLineWidth / 2)\r\n    ));\r\n  }\r\n  if (charDefinition.type === VectorType.STROKE) {\r\n    ctx.strokeStyle = ctx.fillStyle;\r\n    ctx.stroke();\r\n  } else {\r\n    ctx.fill();\r\n  }\r\n  ctx.closePath();\r\n}\r\n\r\nfunction clamp(value: number, max: number, min: number = 0): number {\r\n  return Math.max(Math.min(value, max), min);\r\n}\r\n\r\nconst svgToCanvasInstructionMap: { [index: string]: any } = {\r\n  'C': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.bezierCurveTo(args[0], args[1], args[2], args[3], args[4], args[5]),\r\n  'L': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.lineTo(args[0], args[1]),\r\n  'M': (ctx: CanvasRenderingContext2D, args: number[]) => ctx.moveTo(args[0], args[1])\r\n};\r\n\r\nfunction translateArgs(args: string[], cellWidth: number, cellHeight: number, xOffset: number, yOffset: number, doClamp: boolean, devicePixelRatio: number, leftPadding: number = 0, rightPadding: number = 0): number[] {\r\n  const result = args.map(e => parseFloat(e) || parseInt(e));\r\n\r\n  if (result.length < 2) {\r\n    throw new Error('Too few arguments for instruction');\r\n  }\r\n\r\n  for (let x = 0; x < result.length; x += 2) {\r\n    // Translate from 0-1 to 0-cellWidth\r\n    result[x] *= cellWidth - (leftPadding * devicePixelRatio) - (rightPadding * devicePixelRatio);\r\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\r\n    // line at 100% devicePixelRatio\r\n    if (doClamp && result[x] !== 0) {\r\n      result[x] = clamp(Math.round(result[x] + 0.5) - 0.5, cellWidth, 0);\r\n    }\r\n    // Apply the cell's offset (ie. x*cellWidth)\r\n    result[x] += xOffset + (leftPadding * devicePixelRatio);\r\n  }\r\n\r\n  for (let y = 1; y < result.length; y += 2) {\r\n    // Translate from 0-1 to 0-cellHeight\r\n    result[y] *= cellHeight;\r\n    // Ensure coordinate doesn't escape cell bounds and round to the nearest 0.5 to ensure a crisp\r\n    // line at 100% devicePixelRatio\r\n    if (doClamp && result[y] !== 0) {\r\n      result[y] = clamp(Math.round(result[y] + 0.5) - 0.5, cellHeight, 0);\r\n    }\r\n    // Apply the cell's offset (ie. x*cellHeight)\r\n    result[y] += yOffset;\r\n  }\r\n\r\n  return result;\r\n}\r\n","/**\r\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { toDisposable } from 'common/Lifecycle';\r\nimport { IDisposable } from 'common/Types';\r\n\r\nexport function observeDevicePixelDimensions(element: HTMLElement, parentWindow: Window & typeof globalThis, callback: (deviceWidth: number, deviceHeight: number) => void): IDisposable {\r\n  // Observe any resizes to the element and extract the actual pixel size of the element if the\r\n  // devicePixelContentBoxSize API is supported. This allows correcting rounding errors when\r\n  // converting between CSS pixels and device pixels which causes blurry rendering when device\r\n  // pixel ratio is not a round number.\r\n  let observer: ResizeObserver | undefined = new parentWindow.ResizeObserver((entries) => {\r\n    const entry = entries.find((entry) => entry.target === element);\r\n    if (!entry) {\r\n      return;\r\n    }\r\n\r\n    // Disconnect if devicePixelContentBoxSize isn't supported by the browser\r\n    if (!('devicePixelContentBoxSize' in entry)) {\r\n      observer?.disconnect();\r\n      observer = undefined;\r\n      return;\r\n    }\r\n\r\n    // Fire the callback, ignore events where the dimensions are 0x0 as the canvas is likely hidden\r\n    const width = entry.devicePixelContentBoxSize[0].inlineSize;\r\n    const height = entry.devicePixelContentBoxSize[0].blockSize;\r\n    if (width > 0 && height > 0) {\r\n      callback(width, height);\r\n    }\r\n  });\r\n  try {\r\n    observer.observe(element, { box: ['device-pixel-content-box'] } as any);\r\n  } catch {\r\n    observer.disconnect();\r\n    observer = undefined;\r\n  }\r\n  return toDisposable(() => observer?.disconnect());\r\n}\r\n","/**\r\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IDimensions, IOffset, IRenderDimensions } from 'browser/renderer/shared/Types';\r\n\r\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\r\n  if (!value) {\r\n    throw new Error('value must not be falsy');\r\n  }\r\n  return value;\r\n}\r\n\r\nexport function isPowerlineGlyph(codepoint: number): boolean {\r\n  // Only return true for Powerline symbols which require\r\n  // different padding and should be excluded from minimum contrast\r\n  // ratio standards\r\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\r\n}\r\n\r\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\r\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\r\n}\r\n\r\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\r\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\r\n}\r\n\r\nexport function excludeFromContrastRatioDemands(codepoint: number): boolean {\r\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\r\n}\r\n\r\nexport function createRenderDimensions(): IRenderDimensions {\r\n  return {\r\n    css: {\r\n      canvas: createDimension(),\r\n      cell: createDimension()\r\n    },\r\n    device: {\r\n      canvas: createDimension(),\r\n      cell: createDimension(),\r\n      char: {\r\n        width: 0,\r\n        height: 0,\r\n        left: 0,\r\n        top: 0\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nfunction createDimension(): IDimensions {\r\n  return {\r\n    width: 0,\r\n    height: 0\r\n  };\r\n}\r\n","/**\r\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ISelectionRenderModel } from 'browser/renderer/shared/Types';\r\nimport { Terminal } from 'xterm';\r\n\r\nclass SelectionRenderModel implements ISelectionRenderModel {\r\n  public hasSelection!: boolean;\r\n  public columnSelectMode!: boolean;\r\n  public viewportStartRow!: number;\r\n  public viewportEndRow!: number;\r\n  public viewportCappedStartRow!: number;\r\n  public viewportCappedEndRow!: number;\r\n  public startCol!: number;\r\n  public endCol!: number;\r\n  public selectionStart: [number, number] | undefined;\r\n  public selectionEnd: [number, number] | undefined;\r\n\r\n  constructor() {\r\n    this.clear();\r\n  }\r\n\r\n  public clear(): void {\r\n    this.hasSelection = false;\r\n    this.columnSelectMode = false;\r\n    this.viewportStartRow = 0;\r\n    this.viewportEndRow = 0;\r\n    this.viewportCappedStartRow = 0;\r\n    this.viewportCappedEndRow = 0;\r\n    this.startCol = 0;\r\n    this.endCol = 0;\r\n    this.selectionStart = undefined;\r\n    this.selectionEnd = undefined;\r\n  }\r\n\r\n  public update(terminal: Terminal, start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean = false): void {\r\n    this.selectionStart = start;\r\n    this.selectionEnd = end;\r\n    // Selection does not exist\r\n    if (!start || !end || (start[0] === end[0] && start[1] === end[1])) {\r\n      this.clear();\r\n      return;\r\n    }\r\n\r\n    // Translate from buffer position to viewport position\r\n    const viewportStartRow = start[1] - terminal.buffer.active.viewportY;\r\n    const viewportEndRow = end[1] - terminal.buffer.active.viewportY;\r\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\r\n    const viewportCappedEndRow = Math.min(viewportEndRow, terminal.rows - 1);\r\n\r\n    // No need to draw the selection\r\n    if (viewportCappedStartRow >= terminal.rows || viewportCappedEndRow < 0) {\r\n      this.clear();\r\n      return;\r\n    }\r\n\r\n    this.hasSelection = true;\r\n    this.columnSelectMode = columnSelectMode;\r\n    this.viewportStartRow = viewportStartRow;\r\n    this.viewportEndRow = viewportEndRow;\r\n    this.viewportCappedStartRow = viewportCappedStartRow;\r\n    this.viewportCappedEndRow = viewportCappedEndRow;\r\n    this.startCol = start[0];\r\n    this.endCol = end[0];\r\n  }\r\n\r\n  public isCellSelected(terminal: Terminal, x: number, y: number): boolean {\r\n    if (!this.hasSelection) {\r\n      return false;\r\n    }\r\n    y -= terminal.buffer.active.viewportY;\r\n    if (this.columnSelectMode) {\r\n      if (this.startCol <= this.endCol) {\r\n        return x >= this.startCol && y >= this.viewportCappedStartRow &&\r\n          x < this.endCol && y <= this.viewportCappedEndRow;\r\n      }\r\n      return x < this.startCol && y >= this.viewportCappedStartRow &&\r\n        x >= this.endCol && y <= this.viewportCappedEndRow;\r\n    }\r\n    return (y > this.viewportStartRow && y < this.viewportEndRow) ||\r\n      (this.viewportStartRow === this.viewportEndRow && y === this.viewportStartRow && x >= this.startCol && x < this.endCol) ||\r\n      (this.viewportStartRow < this.viewportEndRow && y === this.viewportEndRow && x < this.endCol) ||\r\n      (this.viewportStartRow < this.viewportEndRow && y === this.viewportStartRow && x >= this.startCol);\r\n  }\r\n}\r\n\r\nexport function createSelectionRenderModel(): ISelectionRenderModel {\r\n  return new SelectionRenderModel();\r\n}\r\n","/**\r\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { DIM_OPACITY, TEXT_BASELINE } from 'browser/renderer/shared/Constants';\r\nimport { DEFAULT_COLOR, Attributes, DEFAULT_EXT, UnderlineStyle } from 'common/buffer/Constants';\r\nimport { IColor } from 'common/Types';\r\nimport { AttributeData } from 'common/buffer/AttributeData';\r\nimport { color, NULL_COLOR, rgba } from 'common/Color';\r\nimport { tryDrawCustomChar } from 'browser/renderer/shared/CustomGlyphs';\r\nimport { excludeFromContrastRatioDemands, isPowerlineGlyph, isRestrictedPowerlineGlyph, throwIfFalsy } from 'browser/renderer/shared/RendererUtils';\r\nimport { IUnicodeService } from 'common/services/Services';\r\nimport { FourKeyMap } from 'common/MultiKeyMap';\r\nimport { IdleTaskQueue } from 'common/TaskQueue';\r\nimport { IBoundingBox, ICharAtlasConfig, IRasterizedGlyph, IRequestRedrawEvent, ITextureAtlas } from 'browser/renderer/shared/Types';\r\nimport { EventEmitter } from 'common/EventEmitter';\r\n\r\n/**\r\n * A shared object which is used to draw nothing for a particular cell.\r\n */\r\nconst NULL_RASTERIZED_GLYPH: IRasterizedGlyph = {\r\n  texturePage: 0,\r\n  texturePosition: { x: 0, y: 0 },\r\n  texturePositionClipSpace: { x: 0, y: 0 },\r\n  offset: { x: 0, y: 0 },\r\n  size: { x: 0, y: 0 },\r\n  sizeClipSpace: { x: 0, y: 0 }\r\n};\r\n\r\nconst TMP_CANVAS_GLYPH_PADDING = 2;\r\n\r\nconst enum Constants {\r\n  /**\r\n   * The amount of pixel padding to allow in each row. Setting this to zero would make the atlas\r\n   * page pack as tightly as possible, but more pages would end up being created as a result.\r\n   */\r\n  ROW_PIXEL_THRESHOLD = 2,\r\n  /**\r\n   * The maximum texture size regardless of what the actual hardware maximum turns out to be. This\r\n   * is enforced to ensure uploading the texture still finishes in a reasonable amount of time. A\r\n   * 4096 squared image takes up 16MB of GPU memory.\r\n   */\r\n  FORCED_MAX_TEXTURE_SIZE = 4096\r\n}\r\n\r\ninterface ICharAtlasActiveRow {\r\n  x: number;\r\n  y: number;\r\n  height: number;\r\n}\r\n\r\n// Work variables to avoid garbage collection\r\nlet $glyph = undefined;\r\n\r\nexport class TextureAtlas implements ITextureAtlas {\r\n  private _didWarmUp: boolean = false;\r\n\r\n  private _cacheMap: FourKeyMap<number, number, number, number, IRasterizedGlyph> = new FourKeyMap();\r\n  private _cacheMapCombined: FourKeyMap<string, number, number, number, IRasterizedGlyph> = new FourKeyMap();\r\n\r\n  // The texture that the atlas is drawn to\r\n  private _pages: AtlasPage[] = [];\r\n  public get pages(): { canvas: HTMLCanvasElement, version: number }[] { return this._pages; }\r\n\r\n  // The set of atlas pages that can be written to\r\n  private _activePages: AtlasPage[] = [];\r\n\r\n  private _tmpCanvas: HTMLCanvasElement;\r\n  // A temporary context that glyphs are drawn to before being transfered to the atlas.\r\n  private _tmpCtx: CanvasRenderingContext2D;\r\n\r\n  private _workBoundingBox: IBoundingBox = { top: 0, left: 0, bottom: 0, right: 0 };\r\n  private _workAttributeData: AttributeData = new AttributeData();\r\n\r\n  private _textureSize: number = 512;\r\n\r\n  public static maxAtlasPages: number | undefined;\r\n  public static maxTextureSize: number | undefined;\r\n\r\n  private readonly _onAddTextureAtlasCanvas = new EventEmitter<HTMLCanvasElement>();\r\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\r\n  private readonly _onRemoveTextureAtlasCanvas = new EventEmitter<HTMLCanvasElement>();\r\n  public readonly onRemoveTextureAtlasCanvas = this._onRemoveTextureAtlasCanvas.event;\r\n\r\n  constructor(\r\n    private readonly _document: Document,\r\n    private readonly _config: ICharAtlasConfig,\r\n    private readonly _unicodeService: IUnicodeService\r\n  ) {\r\n    this._createNewPage();\r\n    this._tmpCanvas = createCanvas(\r\n      _document,\r\n      this._config.deviceCellWidth * 4 + TMP_CANVAS_GLYPH_PADDING * 2,\r\n      this._config.deviceCellHeight + TMP_CANVAS_GLYPH_PADDING * 2\r\n    );\r\n    this._tmpCtx = throwIfFalsy(this._tmpCanvas.getContext('2d', {\r\n      alpha: this._config.allowTransparency,\r\n      willReadFrequently: true\r\n    }));\r\n  }\r\n\r\n  public dispose(): void {\r\n    for (const page of this.pages) {\r\n      page.canvas.remove();\r\n    }\r\n    this._onAddTextureAtlasCanvas.dispose();\r\n  }\r\n\r\n  public warmUp(): void {\r\n    if (!this._didWarmUp) {\r\n      this._doWarmUp();\r\n      this._didWarmUp = true;\r\n    }\r\n  }\r\n\r\n  private _doWarmUp(): void {\r\n    // Pre-fill with ASCII 33-126, this is not urgent and done in idle callbacks\r\n    const queue = new IdleTaskQueue();\r\n    for (let i = 33; i < 126; i++) {\r\n      queue.enqueue(() => {\r\n        if (!this._cacheMap.get(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT)) {\r\n          const rasterizedGlyph = this._drawToCache(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT);\r\n          this._cacheMap.set(i, DEFAULT_COLOR, DEFAULT_COLOR, DEFAULT_EXT, rasterizedGlyph);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private _requestClearModel = false;\r\n  public beginFrame(): boolean {\r\n    return this._requestClearModel;\r\n  }\r\n\r\n  public clearTexture(): void {\r\n    if (this._pages[0].currentRow.x === 0 && this._pages[0].currentRow.y === 0) {\r\n      return;\r\n    }\r\n    for (const page of this._pages) {\r\n      page.clear();\r\n    }\r\n    this._cacheMap.clear();\r\n    this._cacheMapCombined.clear();\r\n    this._didWarmUp = false;\r\n  }\r\n\r\n  private _createNewPage(): AtlasPage {\r\n    // Try merge the set of the 4 most used pages of the largest size. This is is deferred to a\r\n    // microtask to ensure it does not interrupt textures that will be rendered in the current\r\n    // animation frame which would result in blank rendered areas. This is actually not that\r\n    // expensive relative to drawing the glyphs, so there is no need to wait for an idle callback.\r\n    if (TextureAtlas.maxAtlasPages && this._pages.length >= Math.max(4, TextureAtlas.maxAtlasPages / 2)) {\r\n      queueMicrotask(() => {\r\n        // Find the set of the largest 4 images, below the maximum size, with the highest\r\n        // percentages used\r\n        const pagesBySize = this._pages.filter(e => {\r\n          return e.canvas.width * 2 <= (TextureAtlas.maxTextureSize || Constants.FORCED_MAX_TEXTURE_SIZE);\r\n        }).sort((a, b) => {\r\n          if (b.canvas.width !== a.canvas.width) {\r\n            return b.canvas.width - a.canvas.width;\r\n          }\r\n          return b.percentageUsed - a.percentageUsed;\r\n        });\r\n        let sameSizeI = -1;\r\n        let size = 0;\r\n        for (let i = 0; i < pagesBySize.length; i++) {\r\n          if (pagesBySize[i].canvas.width !== size) {\r\n            sameSizeI = i;\r\n            size = pagesBySize[i].canvas.width;\r\n          } else if (i - sameSizeI === 3) {\r\n            break;\r\n          }\r\n        }\r\n\r\n        // Gather details of the merge\r\n        const mergingPages = pagesBySize.slice(sameSizeI, sameSizeI + 4);\r\n        const sortedMergingPagesIndexes = mergingPages.map(e => e.glyphs[0].texturePage).sort((a, b) => a > b ? 1 : -1);\r\n        const mergedPageIndex = sortedMergingPagesIndexes[0];\r\n\r\n        // Merge into the new page\r\n        const mergedPage = this._mergePages(mergingPages, mergedPageIndex);\r\n        mergedPage.version++;\r\n\r\n        // Replace the first _merging_ page with the _merged_ page\r\n        this._pages[mergedPageIndex] = mergedPage;\r\n\r\n        // Delete the other 3 pages, shifting glyph texture pages as needed\r\n        for (let i = sortedMergingPagesIndexes.length - 1; i >= 1; i--) {\r\n          this._deletePage(sortedMergingPagesIndexes[i]);\r\n        }\r\n\r\n        // Request the model to be cleared to refresh all texture pages.\r\n        this._requestClearModel = true;\r\n        this._onAddTextureAtlasCanvas.fire(mergedPage.canvas);\r\n      });\r\n    }\r\n\r\n    // All new atlas pages are created small as they are highly dynamic\r\n    const newPage = new AtlasPage(this._document, this._textureSize);\r\n    this._pages.push(newPage);\r\n    this._activePages.push(newPage);\r\n    this._onAddTextureAtlasCanvas.fire(newPage.canvas);\r\n    return newPage;\r\n  }\r\n\r\n  private _mergePages(mergingPages: AtlasPage[], mergedPageIndex: number): AtlasPage {\r\n    const mergedSize = mergingPages[0].canvas.width * 2;\r\n    const mergedPage = new AtlasPage(this._document, mergedSize, mergingPages);\r\n    for (const [i, p] of mergingPages.entries()) {\r\n      const xOffset = i * p.canvas.width % mergedSize;\r\n      const yOffset = Math.floor(i / 2) * p.canvas.height;\r\n      mergedPage.ctx.drawImage(p.canvas, xOffset, yOffset);\r\n      for (const g of p.glyphs) {\r\n        g.texturePage = mergedPageIndex;\r\n        g.sizeClipSpace.x = g.size.x / mergedSize;\r\n        g.sizeClipSpace.y = g.size.y / mergedSize;\r\n        g.texturePosition.x += xOffset;\r\n        g.texturePosition.y += yOffset;\r\n        g.texturePositionClipSpace.x = g.texturePosition.x / mergedSize;\r\n        g.texturePositionClipSpace.y = g.texturePosition.y / mergedSize;\r\n      }\r\n\r\n      this._onRemoveTextureAtlasCanvas.fire(p.canvas);\r\n\r\n      // Remove the merging page from active pages if it was there\r\n      const index = this._activePages.indexOf(p);\r\n      if (index !== -1) {\r\n        this._activePages.splice(index, 1);\r\n      }\r\n    }\r\n    return mergedPage;\r\n  }\r\n\r\n  private _deletePage(pageIndex: number): void {\r\n    this._pages.splice(pageIndex, 1);\r\n    for (let j = pageIndex; j < this._pages.length; j++) {\r\n      const adjustingPage = this._pages[j];\r\n      for (const g of adjustingPage.glyphs) {\r\n        g.texturePage--;\r\n      }\r\n      adjustingPage.version++;\r\n    }\r\n  }\r\n\r\n  public getRasterizedGlyphCombinedChar(chars: string, bg: number, fg: number, ext: number): IRasterizedGlyph {\r\n    return this._getFromCacheMap(this._cacheMapCombined, chars, bg, fg, ext);\r\n  }\r\n\r\n  public getRasterizedGlyph(code: number, bg: number, fg: number, ext: number): IRasterizedGlyph {\r\n    return this._getFromCacheMap(this._cacheMap, code, bg, fg, ext);\r\n  }\r\n\r\n  /**\r\n   * Gets the glyphs texture coords, drawing the texture if it's not already\r\n   */\r\n  private _getFromCacheMap(\r\n    cacheMap: FourKeyMap<string | number, number, number, number, IRasterizedGlyph>,\r\n    key: string | number,\r\n    bg: number,\r\n    fg: number,\r\n    ext: number\r\n  ): IRasterizedGlyph {\r\n    $glyph = cacheMap.get(key, bg, fg, ext);\r\n    if (!$glyph) {\r\n      $glyph = this._drawToCache(key, bg, fg, ext);\r\n      cacheMap.set(key, bg, fg, ext, $glyph);\r\n    }\r\n    return $glyph;\r\n  }\r\n\r\n  private _getColorFromAnsiIndex(idx: number): IColor {\r\n    if (idx >= this._config.colors.ansi.length) {\r\n      throw new Error('No color found for idx ' + idx);\r\n    }\r\n    return this._config.colors.ansi[idx];\r\n  }\r\n\r\n  private _getBackgroundColor(bgColorMode: number, bgColor: number, inverse: boolean, dim: boolean): IColor {\r\n    if (this._config.allowTransparency) {\r\n      // The background color might have some transparency, so we need to render it as fully\r\n      // transparent in the atlas. Otherwise we'd end up drawing the transparent background twice\r\n      // around the anti-aliased edges of the glyph, and it would look too dark.\r\n      return NULL_COLOR;\r\n    }\r\n\r\n    let result: IColor;\r\n    switch (bgColorMode) {\r\n      case Attributes.CM_P16:\r\n      case Attributes.CM_P256:\r\n        result = this._getColorFromAnsiIndex(bgColor);\r\n        break;\r\n      case Attributes.CM_RGB:\r\n        const arr = AttributeData.toColorRGB(bgColor);\r\n        // TODO: This object creation is slow\r\n        result = rgba.toColor(arr[0], arr[1], arr[2]);\r\n        break;\r\n      case Attributes.CM_DEFAULT:\r\n      default:\r\n        if (inverse) {\r\n          result = this._config.colors.foreground;\r\n        } else {\r\n          result = this._config.colors.background;\r\n        }\r\n        break;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private _getForegroundColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, dim: boolean, bold: boolean, excludeFromContrastRatioDemands: boolean): IColor {\r\n    // TODO: Pass dim along to get min contrast?\r\n    const minimumContrastColor = this._getMinimumContrastColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, false, bold, excludeFromContrastRatioDemands);\r\n    if (minimumContrastColor) {\r\n      return minimumContrastColor;\r\n    }\r\n\r\n    let result: IColor;\r\n    switch (fgColorMode) {\r\n      case Attributes.CM_P16:\r\n      case Attributes.CM_P256:\r\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\r\n          fgColor += 8;\r\n        }\r\n        result = this._getColorFromAnsiIndex(fgColor);\r\n        break;\r\n      case Attributes.CM_RGB:\r\n        const arr = AttributeData.toColorRGB(fgColor);\r\n        result = rgba.toColor(arr[0], arr[1], arr[2]);\r\n        break;\r\n      case Attributes.CM_DEFAULT:\r\n      default:\r\n        if (inverse) {\r\n          result = this._config.colors.background;\r\n        } else {\r\n          result = this._config.colors.foreground;\r\n        }\r\n    }\r\n\r\n    // Always use an opaque color regardless of allowTransparency\r\n    if (this._config.allowTransparency) {\r\n      result = color.opaque(result);\r\n    }\r\n\r\n    // Apply dim to the color, opacity is fine to use for the foreground color\r\n    if (dim) {\r\n      result = color.multiplyOpacity(result, DIM_OPACITY);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private _resolveBackgroundRgba(bgColorMode: number, bgColor: number, inverse: boolean): number {\r\n    switch (bgColorMode) {\r\n      case Attributes.CM_P16:\r\n      case Attributes.CM_P256:\r\n        return this._getColorFromAnsiIndex(bgColor).rgba;\r\n      case Attributes.CM_RGB:\r\n        return bgColor << 8;\r\n      case Attributes.CM_DEFAULT:\r\n      default:\r\n        if (inverse) {\r\n          return this._config.colors.foreground.rgba;\r\n        }\r\n        return this._config.colors.background.rgba;\r\n    }\r\n  }\r\n\r\n  private _resolveForegroundRgba(fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean): number {\r\n    switch (fgColorMode) {\r\n      case Attributes.CM_P16:\r\n      case Attributes.CM_P256:\r\n        if (this._config.drawBoldTextInBrightColors && bold && fgColor < 8) {\r\n          fgColor += 8;\r\n        }\r\n        return this._getColorFromAnsiIndex(fgColor).rgba;\r\n      case Attributes.CM_RGB:\r\n        return fgColor << 8;\r\n      case Attributes.CM_DEFAULT:\r\n      default:\r\n        if (inverse) {\r\n          return this._config.colors.background.rgba;\r\n        }\r\n        return this._config.colors.foreground.rgba;\r\n    }\r\n  }\r\n\r\n  private _getMinimumContrastColor(bg: number, bgColorMode: number, bgColor: number, fg: number, fgColorMode: number, fgColor: number, inverse: boolean, bold: boolean, excludeFromContrastRatioDemands: boolean): IColor | undefined {\r\n    if (this._config.minimumContrastRatio === 1 || excludeFromContrastRatioDemands) {\r\n      return undefined;\r\n    }\r\n\r\n    // Try get from cache first\r\n    const adjustedColor = this._config.colors.contrastCache.getColor(bg, fg);\r\n    if (adjustedColor !== undefined) {\r\n      return adjustedColor || undefined;\r\n    }\r\n\r\n    const bgRgba = this._resolveBackgroundRgba(bgColorMode, bgColor, inverse);\r\n    const fgRgba = this._resolveForegroundRgba(fgColorMode, fgColor, inverse, bold);\r\n    const result = rgba.ensureContrastRatio(bgRgba, fgRgba, this._config.minimumContrastRatio);\r\n\r\n    if (!result) {\r\n      this._config.colors.contrastCache.setColor(bg, fg, null);\r\n      return undefined;\r\n    }\r\n\r\n    const color = rgba.toColor(\r\n      (result >> 24) & 0xFF,\r\n      (result >> 16) & 0xFF,\r\n      (result >> 8) & 0xFF\r\n    );\r\n    this._config.colors.contrastCache.setColor(bg, fg, color);\r\n\r\n    return color;\r\n  }\r\n\r\n  private _drawToCache(codeOrChars: number | string, bg: number, fg: number, ext: number): IRasterizedGlyph {\r\n    const chars = typeof codeOrChars === 'number' ? String.fromCharCode(codeOrChars) : codeOrChars;\r\n\r\n    // Uncomment for debugging\r\n    // console.log(`draw to cache \"${chars}\"`, bg, fg, ext);\r\n\r\n    // Allow 1 cell width per character, with a minimum of 2 (CJK), plus some padding. This is used\r\n    // to draw the glyph to the canvas as well as to restrict the bounding box search to ensure\r\n    // giant ligatures (eg. =====>) don't impact overall performance.\r\n    const allowedWidth = Math.min(this._config.deviceCellWidth * Math.max(chars.length, 2) + TMP_CANVAS_GLYPH_PADDING * 2, this._textureSize);\r\n    if (this._tmpCanvas.width < allowedWidth) {\r\n      this._tmpCanvas.width = allowedWidth;\r\n    }\r\n    // Include line height when drawing glyphs\r\n    const allowedHeight = Math.min(this._config.deviceCellHeight + TMP_CANVAS_GLYPH_PADDING * 4, this._textureSize);\r\n    if (this._tmpCanvas.height < allowedHeight) {\r\n      this._tmpCanvas.height = allowedHeight;\r\n    }\r\n    this._tmpCtx.save();\r\n\r\n    this._workAttributeData.fg = fg;\r\n    this._workAttributeData.bg = bg;\r\n    this._workAttributeData.extended.ext = ext;\r\n\r\n    const invisible = !!this._workAttributeData.isInvisible();\r\n    if (invisible) {\r\n      return NULL_RASTERIZED_GLYPH;\r\n    }\r\n\r\n    const bold = !!this._workAttributeData.isBold();\r\n    const inverse = !!this._workAttributeData.isInverse();\r\n    const dim = !!this._workAttributeData.isDim();\r\n    const italic = !!this._workAttributeData.isItalic();\r\n    const underline = !!this._workAttributeData.isUnderline();\r\n    const strikethrough = !!this._workAttributeData.isStrikethrough();\r\n    const overline = !!this._workAttributeData.isOverline();\r\n    let fgColor = this._workAttributeData.getFgColor();\r\n    let fgColorMode = this._workAttributeData.getFgColorMode();\r\n    let bgColor = this._workAttributeData.getBgColor();\r\n    let bgColorMode = this._workAttributeData.getBgColorMode();\r\n    if (inverse) {\r\n      const temp = fgColor;\r\n      fgColor = bgColor;\r\n      bgColor = temp;\r\n      const temp2 = fgColorMode;\r\n      fgColorMode = bgColorMode;\r\n      bgColorMode = temp2;\r\n    }\r\n\r\n    // draw the background\r\n    const backgroundColor = this._getBackgroundColor(bgColorMode, bgColor, inverse, dim);\r\n    // Use a 'copy' composite operation to clear any existing glyph out of _tmpCtxWithAlpha, regardless of\r\n    // transparency in backgroundColor\r\n    this._tmpCtx.globalCompositeOperation = 'copy';\r\n    this._tmpCtx.fillStyle = backgroundColor.css;\r\n    this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\r\n    this._tmpCtx.globalCompositeOperation = 'source-over';\r\n\r\n    // draw the foreground/glyph\r\n    const fontWeight = bold ? this._config.fontWeightBold : this._config.fontWeight;\r\n    const fontStyle = italic ? 'italic' : '';\r\n    this._tmpCtx.font =\r\n      `${fontStyle} ${fontWeight} ${this._config.fontSize * this._config.devicePixelRatio}px ${this._config.fontFamily}`;\r\n    this._tmpCtx.textBaseline = TEXT_BASELINE;\r\n\r\n    const powerlineGlyph = chars.length === 1 && isPowerlineGlyph(chars.charCodeAt(0));\r\n    const restrictedPowerlineGlyph = chars.length === 1 && isRestrictedPowerlineGlyph(chars.charCodeAt(0));\r\n    const foregroundColor = this._getForegroundColor(bg, bgColorMode, bgColor, fg, fgColorMode, fgColor, inverse, dim, bold, excludeFromContrastRatioDemands(chars.charCodeAt(0)));\r\n    this._tmpCtx.fillStyle = foregroundColor.css;\r\n\r\n    // For powerline glyphs left/top padding is excluded (https://github.com/microsoft/vscode/issues/120129)\r\n    const padding = restrictedPowerlineGlyph ? 0 : TMP_CANVAS_GLYPH_PADDING * 2;\r\n\r\n    // Draw custom characters if applicable\r\n    let customGlyph = false;\r\n    if (this._config.customGlyphs !== false) {\r\n      customGlyph = tryDrawCustomChar(this._tmpCtx, chars, padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight, this._config.fontSize, this._config.devicePixelRatio);\r\n    }\r\n\r\n    // Whether to clear pixels based on a threshold difference between the glyph color and the\r\n    // background color. This should be disabled when the glyph contains multiple colors such as\r\n    // underline colors to prevent important colors could get cleared.\r\n    let enableClearThresholdCheck = !powerlineGlyph;\r\n\r\n    let chWidth: number;\r\n    if (typeof codeOrChars === 'number') {\r\n      chWidth = this._unicodeService.wcwidth(codeOrChars);\r\n    } else {\r\n      chWidth = this._unicodeService.getStringCellWidth(codeOrChars);\r\n    }\r\n\r\n    // Draw underline\r\n    if (underline) {\r\n      this._tmpCtx.save();\r\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 15));\r\n      // When the line width is odd, draw at a 0.5 position\r\n      const yOffset = lineWidth % 2 === 1 ? 0.5 : 0;\r\n      this._tmpCtx.lineWidth = lineWidth;\r\n\r\n      // Underline color\r\n      if (this._workAttributeData.isUnderlineColorDefault()) {\r\n        this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\r\n      } else if (this._workAttributeData.isUnderlineColorRGB()) {\r\n        enableClearThresholdCheck = false;\r\n        this._tmpCtx.strokeStyle = `rgb(${AttributeData.toColorRGB(this._workAttributeData.getUnderlineColor()).join(',')})`;\r\n      } else {\r\n        enableClearThresholdCheck = false;\r\n        let fg = this._workAttributeData.getUnderlineColor();\r\n        if (this._config.drawBoldTextInBrightColors && this._workAttributeData.isBold() && fg < 8) {\r\n          fg += 8;\r\n        }\r\n        this._tmpCtx.strokeStyle = this._getColorFromAnsiIndex(fg).css;\r\n      }\r\n\r\n      // Underline style/stroke\r\n      this._tmpCtx.beginPath();\r\n      const xLeft = padding;\r\n      const yTop = Math.ceil(padding + this._config.deviceCharHeight) - yOffset;\r\n      const yMid = padding + this._config.deviceCharHeight + lineWidth - yOffset;\r\n      const yBot = Math.ceil(padding + this._config.deviceCharHeight + lineWidth * 2) - yOffset;\r\n\r\n      for (let i = 0; i < chWidth; i++) {\r\n        this._tmpCtx.save();\r\n        const xChLeft = xLeft + i * this._config.deviceCellWidth;\r\n        const xChRight = xLeft + (i + 1) * this._config.deviceCellWidth;\r\n        const xChMid = xChLeft + this._config.deviceCellWidth / 2;\r\n        switch (this._workAttributeData.extended.underlineStyle) {\r\n          case UnderlineStyle.DOUBLE:\r\n            this._tmpCtx.moveTo(xChLeft, yTop);\r\n            this._tmpCtx.lineTo(xChRight, yTop);\r\n            this._tmpCtx.moveTo(xChLeft, yBot);\r\n            this._tmpCtx.lineTo(xChRight, yBot);\r\n            break;\r\n          case UnderlineStyle.CURLY:\r\n            // Choose the bezier top and bottom based on the device pixel ratio, the curly line is\r\n            // made taller when the line width is  as otherwise it's not very clear otherwise.\r\n            const yCurlyBot = lineWidth <= 1 ? yBot : Math.ceil(padding + this._config.deviceCharHeight - lineWidth / 2) - yOffset;\r\n            const yCurlyTop = lineWidth <= 1 ? yTop : Math.ceil(padding + this._config.deviceCharHeight + lineWidth / 2) - yOffset;\r\n            // Clip the left and right edges of the underline such that it can be drawn just outside\r\n            // the edge of the cell to ensure a continuous stroke when there are multiple underlined\r\n            // glyphs adjacent to one another.\r\n            const clipRegion = new Path2D();\r\n            clipRegion.rect(xChLeft, yTop, this._config.deviceCellWidth, yBot - yTop);\r\n            this._tmpCtx.clip(clipRegion);\r\n            // Start 1/2 cell before and end 1/2 cells after to ensure a smooth curve with other cells\r\n            this._tmpCtx.moveTo(xChLeft - this._config.deviceCellWidth / 2, yMid);\r\n            this._tmpCtx.bezierCurveTo(\r\n              xChLeft - this._config.deviceCellWidth / 2, yCurlyTop,\r\n              xChLeft, yCurlyTop,\r\n              xChLeft, yMid\r\n            );\r\n            this._tmpCtx.bezierCurveTo(\r\n              xChLeft, yCurlyBot,\r\n              xChMid, yCurlyBot,\r\n              xChMid, yMid\r\n            );\r\n            this._tmpCtx.bezierCurveTo(\r\n              xChMid, yCurlyTop,\r\n              xChRight, yCurlyTop,\r\n              xChRight, yMid\r\n            );\r\n            this._tmpCtx.bezierCurveTo(\r\n              xChRight, yCurlyBot,\r\n              xChRight + this._config.deviceCellWidth / 2, yCurlyBot,\r\n              xChRight + this._config.deviceCellWidth / 2, yMid\r\n            );\r\n            break;\r\n          case UnderlineStyle.DOTTED:\r\n            this._tmpCtx.setLineDash([Math.round(lineWidth), Math.round(lineWidth)]);\r\n            this._tmpCtx.moveTo(xChLeft, yTop);\r\n            this._tmpCtx.lineTo(xChRight, yTop);\r\n            break;\r\n          case UnderlineStyle.DASHED:\r\n            this._tmpCtx.setLineDash([this._config.devicePixelRatio * 4, this._config.devicePixelRatio * 3]);\r\n            this._tmpCtx.moveTo(xChLeft, yTop);\r\n            this._tmpCtx.lineTo(xChRight, yTop);\r\n            break;\r\n          case UnderlineStyle.SINGLE:\r\n          default:\r\n            this._tmpCtx.moveTo(xChLeft, yTop);\r\n            this._tmpCtx.lineTo(xChRight, yTop);\r\n            break;\r\n        }\r\n        this._tmpCtx.stroke();\r\n        this._tmpCtx.restore();\r\n      }\r\n      this._tmpCtx.restore();\r\n\r\n      // Draw stroke in the background color for non custom characters in order to give an outline\r\n      // between the text and the underline. Only do this when font size is >= 12 as the underline\r\n      // looks odd when the font size is too small\r\n      if (!customGlyph && this._config.fontSize >= 12) {\r\n        // This only works when transparency is disabled because it's not clear how to clear stroked\r\n        // text\r\n        if (!this._config.allowTransparency && chars !== ' ') {\r\n          // Measure the text, only draw the stroke if there is a descent beyond an alphabetic text\r\n          // baseline\r\n          this._tmpCtx.save();\r\n          this._tmpCtx.textBaseline = 'alphabetic';\r\n          const metrics = this._tmpCtx.measureText(chars);\r\n          this._tmpCtx.restore();\r\n          if ('actualBoundingBoxDescent' in metrics && metrics.actualBoundingBoxDescent > 0) {\r\n            // This translates to 1/2 the line width in either direction\r\n            this._tmpCtx.save();\r\n            // Clip the region to only draw in valid pixels near the underline to avoid a slight\r\n            // outline around the whole glyph, as well as additional pixels in the glyph at the top\r\n            // which would increase GPU memory demands\r\n            const clipRegion = new Path2D();\r\n            clipRegion.rect(xLeft, yTop - Math.ceil(lineWidth / 2), this._config.deviceCellWidth * chWidth, yBot - yTop + Math.ceil(lineWidth / 2));\r\n            this._tmpCtx.clip(clipRegion);\r\n            this._tmpCtx.lineWidth = this._config.devicePixelRatio * 3;\r\n            this._tmpCtx.strokeStyle = backgroundColor.css;\r\n            this._tmpCtx.strokeText(chars, padding, padding + this._config.deviceCharHeight);\r\n            this._tmpCtx.restore();\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Overline\r\n    if (overline) {\r\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 15));\r\n      const yOffset = lineWidth % 2 === 1 ? 0.5 : 0;\r\n      this._tmpCtx.lineWidth = lineWidth;\r\n      this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\r\n      this._tmpCtx.beginPath();\r\n      this._tmpCtx.moveTo(padding, padding + yOffset);\r\n      this._tmpCtx.lineTo(padding + this._config.deviceCharWidth * chWidth, padding + yOffset);\r\n      this._tmpCtx.stroke();\r\n    }\r\n\r\n    // Draw the character\r\n    if (!customGlyph) {\r\n      this._tmpCtx.fillText(chars, padding, padding + this._config.deviceCharHeight);\r\n    }\r\n\r\n    // If this character is underscore and beyond the cell bounds, shift it up until it is visible\r\n    // even on the bottom row, try for a maximum of 5 pixels.\r\n    if (chars === '_' && !this._config.allowTransparency) {\r\n      let isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\r\n      if (isBeyondCellBounds) {\r\n        for (let offset = 1; offset <= 5; offset++) {\r\n          this._tmpCtx.save();\r\n          this._tmpCtx.fillStyle = backgroundColor.css;\r\n          this._tmpCtx.fillRect(0, 0, this._tmpCanvas.width, this._tmpCanvas.height);\r\n          this._tmpCtx.restore();\r\n          this._tmpCtx.fillText(chars, padding, padding + this._config.deviceCharHeight - offset);\r\n          isBeyondCellBounds = clearColor(this._tmpCtx.getImageData(padding, padding, this._config.deviceCellWidth, this._config.deviceCellHeight), backgroundColor, foregroundColor, enableClearThresholdCheck);\r\n          if (!isBeyondCellBounds) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Draw strokethrough\r\n    if (strikethrough) {\r\n      const lineWidth = Math.max(1, Math.floor(this._config.fontSize * this._config.devicePixelRatio / 10));\r\n      const yOffset = this._tmpCtx.lineWidth % 2 === 1 ? 0.5 : 0; // When the width is odd, draw at 0.5 position\r\n      this._tmpCtx.lineWidth = lineWidth;\r\n      this._tmpCtx.strokeStyle = this._tmpCtx.fillStyle;\r\n      this._tmpCtx.beginPath();\r\n      this._tmpCtx.moveTo(padding, padding + Math.floor(this._config.deviceCharHeight / 2) - yOffset);\r\n      this._tmpCtx.lineTo(padding + this._config.deviceCharWidth * chWidth, padding + Math.floor(this._config.deviceCharHeight / 2) - yOffset);\r\n      this._tmpCtx.stroke();\r\n    }\r\n\r\n    this._tmpCtx.restore();\r\n\r\n    // clear the background from the character to avoid issues with drawing over the previous\r\n    // character if it extends past it's bounds\r\n    const imageData = this._tmpCtx.getImageData(\r\n      0, 0, this._tmpCanvas.width, this._tmpCanvas.height\r\n    );\r\n\r\n    // Clear out the background color and determine if the glyph is empty.\r\n    let isEmpty: boolean;\r\n    if (!this._config.allowTransparency) {\r\n      isEmpty = clearColor(imageData, backgroundColor, foregroundColor, enableClearThresholdCheck);\r\n    } else {\r\n      isEmpty = checkCompletelyTransparent(imageData);\r\n    }\r\n\r\n    // Handle empty glyphs\r\n    if (isEmpty) {\r\n      return NULL_RASTERIZED_GLYPH;\r\n    }\r\n\r\n    const rasterizedGlyph = this._findGlyphBoundingBox(imageData, this._workBoundingBox, allowedWidth, restrictedPowerlineGlyph, customGlyph, padding);\r\n\r\n    // Find the best atlas row to use\r\n    let activePage: AtlasPage;\r\n    let activeRow: ICharAtlasActiveRow;\r\n    while (true) {\r\n      // If there are no active pages (the last smallest 4 were merged), create a new one\r\n      if (this._activePages.length === 0) {\r\n        const newPage = this._createNewPage();\r\n        activePage = newPage;\r\n        activeRow = newPage.currentRow;\r\n        activeRow.height = rasterizedGlyph.size.y;\r\n        break;\r\n      }\r\n\r\n      // Get the best current row from all active pages\r\n      activePage = this._activePages[this._activePages.length - 1];\r\n      activeRow = activePage.currentRow;\r\n      for (const p of this._activePages) {\r\n        if (rasterizedGlyph.size.y <= p.currentRow.height) {\r\n          activePage = p;\r\n          activeRow = p.currentRow;\r\n        }\r\n      }\r\n\r\n      // TODO: This algorithm could be simplified:\r\n      // - Search for the page with ROW_PIXEL_THRESHOLD in mind\r\n      // - Keep track of current/fixed rows in a Map\r\n\r\n      // Replace the best current row with a fixed row if there is one at least as good as the\r\n      // current row. Search in reverse to prioritize filling in older pages.\r\n      for (let i = this._activePages.length - 1; i >= 0; i--) {\r\n        for (const row of this._activePages[i].fixedRows) {\r\n          if (row.height <= activeRow.height && rasterizedGlyph.size.y <= row.height) {\r\n            activePage = this._activePages[i];\r\n            activeRow = row;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Create a new one if too much vertical space would be wasted or there is not enough room\r\n      // left in the page. The previous active row will become fixed in the process as it now has a\r\n      // fixed height\r\n      if (activeRow.y + rasterizedGlyph.size.y >= activePage.canvas.height || activeRow.height > rasterizedGlyph.size.y + Constants.ROW_PIXEL_THRESHOLD) {\r\n        // Create the new fixed height row, creating a new page if there isn't enough room on the\r\n        // current page\r\n        let wasNewPageCreated = false;\r\n        if (activePage.currentRow.y + activePage.currentRow.height + rasterizedGlyph.size.y >= activePage.canvas.height) {\r\n          // Find the first page with room to create the new row on\r\n          let candidatePage: AtlasPage | undefined;\r\n          for (const p of this._activePages) {\r\n            if (p.currentRow.y + p.currentRow.height + rasterizedGlyph.size.y < p.canvas.height) {\r\n              candidatePage = p;\r\n              break;\r\n            }\r\n          }\r\n          if (candidatePage) {\r\n            activePage = candidatePage;\r\n          } else {\r\n            // Create a new page if there is no room\r\n            const newPage = this._createNewPage();\r\n            activePage = newPage;\r\n            activeRow = newPage.currentRow;\r\n            activeRow.height = rasterizedGlyph.size.y;\r\n            wasNewPageCreated = true;\r\n          }\r\n        }\r\n        if (!wasNewPageCreated) {\r\n          // Fix the current row as the new row is being added below\r\n          if (activePage.currentRow.height > 0) {\r\n            activePage.fixedRows.push(activePage.currentRow);\r\n          }\r\n          activeRow = {\r\n            x: 0,\r\n            y: activePage.currentRow.y + activePage.currentRow.height,\r\n            height: rasterizedGlyph.size.y\r\n          };\r\n          activePage.fixedRows.push(activeRow);\r\n\r\n          // Create the new current row below the new fixed height row\r\n          activePage.currentRow = {\r\n            x: 0,\r\n            y: activeRow.y + activeRow.height,\r\n            height: 0\r\n          };\r\n        }\r\n        // TODO: Remove pages from _activePages when all rows are filled\r\n      }\r\n\r\n      // Exit the loop if there is enough room in the row\r\n      if (activeRow.x + rasterizedGlyph.size.x <= activePage.canvas.width) {\r\n        break;\r\n      }\r\n\r\n      // If there is not enough room in the current row, finish it and try again\r\n      if (activeRow === activePage.currentRow) {\r\n        activeRow.x = 0;\r\n        activeRow.y += activeRow.height;\r\n        activeRow.height = 0;\r\n      } else {\r\n        activePage.fixedRows.splice(activePage.fixedRows.indexOf(activeRow), 1);\r\n      }\r\n    }\r\n\r\n    // Record texture position\r\n    rasterizedGlyph.texturePage = this._pages.indexOf(activePage);\r\n    rasterizedGlyph.texturePosition.x = activeRow.x;\r\n    rasterizedGlyph.texturePosition.y = activeRow.y;\r\n    rasterizedGlyph.texturePositionClipSpace.x = activeRow.x / activePage.canvas.width;\r\n    rasterizedGlyph.texturePositionClipSpace.y = activeRow.y / activePage.canvas.height;\r\n\r\n    // Fix the clipspace position as pages may be of differing size\r\n    rasterizedGlyph.sizeClipSpace.x /= activePage.canvas.width;\r\n    rasterizedGlyph.sizeClipSpace.y /= activePage.canvas.height;\r\n\r\n    // Update atlas current row, for fixed rows the glyph height will never be larger than the row\r\n    // height\r\n    activeRow.height = Math.max(activeRow.height, rasterizedGlyph.size.y);\r\n    activeRow.x += rasterizedGlyph.size.x;\r\n\r\n    // putImageData doesn't do any blending, so it will overwrite any existing cache entry for us\r\n    activePage.ctx.putImageData(\r\n      imageData,\r\n      rasterizedGlyph.texturePosition.x - this._workBoundingBox.left,\r\n      rasterizedGlyph.texturePosition.y - this._workBoundingBox.top,\r\n      this._workBoundingBox.left,\r\n      this._workBoundingBox.top,\r\n      rasterizedGlyph.size.x,\r\n      rasterizedGlyph.size.y\r\n    );\r\n    activePage.addGlyph(rasterizedGlyph);\r\n    activePage.version++;\r\n\r\n    return rasterizedGlyph;\r\n  }\r\n\r\n  /**\r\n   * Given an ImageData object, find the bounding box of the non-transparent\r\n   * portion of the texture and return an IRasterizedGlyph with these\r\n   * dimensions.\r\n   * @param imageData The image data to read.\r\n   * @param boundingBox An IBoundingBox to put the clipped bounding box values.\r\n   */\r\n  private _findGlyphBoundingBox(imageData: ImageData, boundingBox: IBoundingBox, allowedWidth: number, restrictedGlyph: boolean, customGlyph: boolean, padding: number): IRasterizedGlyph {\r\n    boundingBox.top = 0;\r\n    const height = restrictedGlyph ? this._config.deviceCellHeight : this._tmpCanvas.height;\r\n    const width = restrictedGlyph ? this._config.deviceCellWidth : allowedWidth;\r\n    let found = false;\r\n    for (let y = 0; y < height; y++) {\r\n      for (let x = 0; x < width; x++) {\r\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\r\n        if (imageData.data[alphaOffset] !== 0) {\r\n          boundingBox.top = y;\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n      if (found) {\r\n        break;\r\n      }\r\n    }\r\n    boundingBox.left = 0;\r\n    found = false;\r\n    for (let x = 0; x < padding + width; x++) {\r\n      for (let y = 0; y < height; y++) {\r\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\r\n        if (imageData.data[alphaOffset] !== 0) {\r\n          boundingBox.left = x;\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n      if (found) {\r\n        break;\r\n      }\r\n    }\r\n    boundingBox.right = width;\r\n    found = false;\r\n    for (let x = padding + width - 1; x >= padding; x--) {\r\n      for (let y = 0; y < height; y++) {\r\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\r\n        if (imageData.data[alphaOffset] !== 0) {\r\n          boundingBox.right = x;\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n      if (found) {\r\n        break;\r\n      }\r\n    }\r\n    boundingBox.bottom = height;\r\n    found = false;\r\n    for (let y = height - 1; y >= 0; y--) {\r\n      for (let x = 0; x < width; x++) {\r\n        const alphaOffset = y * this._tmpCanvas.width * 4 + x * 4 + 3;\r\n        if (imageData.data[alphaOffset] !== 0) {\r\n          boundingBox.bottom = y;\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n      if (found) {\r\n        break;\r\n      }\r\n    }\r\n    return {\r\n      texturePage: 0,\r\n      texturePosition: { x: 0, y: 0 },\r\n      texturePositionClipSpace: { x: 0, y: 0 },\r\n      size: {\r\n        x: boundingBox.right - boundingBox.left + 1,\r\n        y: boundingBox.bottom - boundingBox.top + 1\r\n      },\r\n      sizeClipSpace: {\r\n        x: (boundingBox.right - boundingBox.left + 1),\r\n        y: (boundingBox.bottom - boundingBox.top + 1)\r\n      },\r\n      offset: {\r\n        x: -boundingBox.left + padding + ((restrictedGlyph || customGlyph) ? Math.floor((this._config.deviceCellWidth - this._config.deviceCharWidth) / 2) : 0),\r\n        y: -boundingBox.top + padding + ((restrictedGlyph || customGlyph) ? this._config.lineHeight === 1 ? 0 : Math.round((this._config.deviceCellHeight - this._config.deviceCharHeight) / 2) : 0)\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nclass AtlasPage {\r\n  public readonly canvas: HTMLCanvasElement;\r\n  public readonly ctx: CanvasRenderingContext2D;\r\n\r\n  private _usedPixels: number = 0;\r\n  public get percentageUsed(): number { return this._usedPixels / (this.canvas.width * this.canvas.height); }\r\n\r\n  private readonly _glyphs: IRasterizedGlyph[] = [];\r\n  public get glyphs(): ReadonlyArray<IRasterizedGlyph> { return this._glyphs; }\r\n  public addGlyph(glyph: IRasterizedGlyph): void {\r\n    this._glyphs.push(glyph);\r\n    this._usedPixels += glyph.size.x * glyph.size.y;\r\n  }\r\n\r\n  /**\r\n   * Used to check whether the canvas of the atlas page has changed.\r\n   */\r\n  public version = 0;\r\n\r\n  // Texture atlas current positioning data. The texture packing strategy used is to fill from\r\n  // left-to-right and top-to-bottom. When the glyph being written is less than half of the current\r\n  // row's height, the following happens:\r\n  //\r\n  // - The current row becomes the fixed height row A\r\n  // - A new fixed height row B the exact size of the glyph is created below the current row\r\n  // - A new dynamic height current row is created below B\r\n  //\r\n  // This strategy does a good job preventing space being wasted for very short glyphs such as\r\n  // underscores, hyphens etc. or those with underlines rendered.\r\n  public currentRow: ICharAtlasActiveRow = {\r\n    x: 0,\r\n    y: 0,\r\n    height: 0\r\n  };\r\n  public readonly fixedRows: ICharAtlasActiveRow[] = [];\r\n\r\n  constructor(\r\n    document: Document,\r\n    size: number,\r\n    sourcePages?: AtlasPage[]\r\n  ) {\r\n    if (sourcePages) {\r\n      for (const p of sourcePages) {\r\n        this._glyphs.push(...p.glyphs);\r\n        this._usedPixels += p._usedPixels;\r\n      }\r\n    }\r\n    this.canvas = createCanvas(document, size, size);\r\n    // The canvas needs alpha because we use clearColor to convert the background color to alpha.\r\n    // It might also contain some characters with transparent backgrounds if allowTransparency is\r\n    // set.\r\n    this.ctx = throwIfFalsy(this.canvas.getContext('2d', { alpha: true }));\r\n  }\r\n\r\n  public clear(): void {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.currentRow.x = 0;\r\n    this.currentRow.y = 0;\r\n    this.currentRow.height = 0;\r\n    this.fixedRows.length = 0;\r\n    this.version++;\r\n  }\r\n}\r\n\r\n/**\r\n * Makes a particular rgb color and colors that are nearly the same in an ImageData completely\r\n * transparent.\r\n * @returns True if the result is \"empty\", meaning all pixels are fully transparent.\r\n */\r\nfunction clearColor(imageData: ImageData, bg: IColor, fg: IColor, enableThresholdCheck: boolean): boolean {\r\n  // Get color channels\r\n  const r = bg.rgba >>> 24;\r\n  const g = bg.rgba >>> 16 & 0xFF;\r\n  const b = bg.rgba >>> 8 & 0xFF;\r\n  const fgR = fg.rgba >>> 24;\r\n  const fgG = fg.rgba >>> 16 & 0xFF;\r\n  const fgB = fg.rgba >>> 8 & 0xFF;\r\n\r\n  // Calculate a threshold that when below a color will be treated as transpart when the sum of\r\n  // channel value differs. This helps improve rendering when glyphs overlap with others. This\r\n  // threshold is calculated relative to the difference between the background and foreground to\r\n  // ensure important details of the glyph are always shown, even when the contrast ratio is low.\r\n  // The number 12 is largely arbitrary to ensure the pixels that escape the cell in the test case\r\n  // were covered (fg=#8ae234, bg=#c4a000).\r\n  const threshold = Math.floor((Math.abs(r - fgR) + Math.abs(g - fgG) + Math.abs(b - fgB)) / 12);\r\n\r\n  // Set alpha channel of relevent pixels to 0\r\n  let isEmpty = true;\r\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\r\n    // Check exact match\r\n    if (imageData.data[offset] === r &&\r\n        imageData.data[offset + 1] === g &&\r\n        imageData.data[offset + 2] === b) {\r\n      imageData.data[offset + 3] = 0;\r\n    } else {\r\n      // Check the threshold based difference\r\n      if (enableThresholdCheck &&\r\n          (Math.abs(imageData.data[offset] - r) +\r\n          Math.abs(imageData.data[offset + 1] - g) +\r\n          Math.abs(imageData.data[offset + 2] - b)) < threshold) {\r\n        imageData.data[offset + 3] = 0;\r\n      } else {\r\n        isEmpty = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return isEmpty;\r\n}\r\n\r\nfunction checkCompletelyTransparent(imageData: ImageData): boolean {\r\n  for (let offset = 0; offset < imageData.data.length; offset += 4) {\r\n    if (imageData.data[offset + 3] > 0) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nfunction createCanvas(document: Document, width: number, height: number): HTMLCanvasElement {\r\n  const canvas = document.createElement('canvas');\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  return canvas;\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IBufferLine, ICellData, CharData } from 'common/Types';\r\nimport { ICharacterJoiner } from 'browser/Types';\r\nimport { AttributeData } from 'common/buffer/AttributeData';\r\nimport { WHITESPACE_CELL_CHAR, Content } from 'common/buffer/Constants';\r\nimport { CellData } from 'common/buffer/CellData';\r\nimport { IBufferService } from 'common/services/Services';\r\nimport { ICharacterJoinerService } from 'browser/services/Services';\r\n\r\nexport class JoinedCellData extends AttributeData implements ICellData {\r\n  private _width: number;\r\n  // .content carries no meaning for joined CellData, simply nullify it\r\n  // thus we have to overload all other .content accessors\r\n  public content: number = 0;\r\n  public fg: number;\r\n  public bg: number;\r\n  public combinedData: string = '';\r\n\r\n  constructor(firstCell: ICellData, chars: string, width: number) {\r\n    super();\r\n    this.fg = firstCell.fg;\r\n    this.bg = firstCell.bg;\r\n    this.combinedData = chars;\r\n    this._width = width;\r\n  }\r\n\r\n  public isCombined(): number {\r\n    // always mark joined cell data as combined\r\n    return Content.IS_COMBINED_MASK;\r\n  }\r\n\r\n  public getWidth(): number {\r\n    return this._width;\r\n  }\r\n\r\n  public getChars(): string {\r\n    return this.combinedData;\r\n  }\r\n\r\n  public getCode(): number {\r\n    // code always gets the highest possible fake codepoint (read as -1)\r\n    // this is needed as code is used by caches as identifier\r\n    return 0x1FFFFF;\r\n  }\r\n\r\n  public setFromCharData(value: CharData): void {\r\n    throw new Error('not implemented');\r\n  }\r\n\r\n  public getAsCharData(): CharData {\r\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\r\n  }\r\n}\r\n\r\nexport class CharacterJoinerService implements ICharacterJoinerService {\r\n  public serviceBrand: undefined;\r\n\r\n  private _characterJoiners: ICharacterJoiner[] = [];\r\n  private _nextCharacterJoinerId: number = 0;\r\n  private _workCell: CellData = new CellData();\r\n\r\n  constructor(\r\n    @IBufferService private _bufferService: IBufferService\r\n  ) { }\r\n\r\n  public register(handler: (text: string) => [number, number][]): number {\r\n    const joiner: ICharacterJoiner = {\r\n      id: this._nextCharacterJoinerId++,\r\n      handler\r\n    };\r\n\r\n    this._characterJoiners.push(joiner);\r\n    return joiner.id;\r\n  }\r\n\r\n  public deregister(joinerId: number): boolean {\r\n    for (let i = 0; i < this._characterJoiners.length; i++) {\r\n      if (this._characterJoiners[i].id === joinerId) {\r\n        this._characterJoiners.splice(i, 1);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public getJoinedCharacters(row: number): [number, number][] {\r\n    if (this._characterJoiners.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const line = this._bufferService.buffer.lines.get(row);\r\n    if (!line || line.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const ranges: [number, number][] = [];\r\n    const lineStr = line.translateToString(true);\r\n\r\n    // Because some cells can be represented by multiple javascript characters,\r\n    // we track the cell and the string indexes separately. This allows us to\r\n    // translate the string ranges we get from the joiners back into cell ranges\r\n    // for use when rendering\r\n    let rangeStartColumn = 0;\r\n    let currentStringIndex = 0;\r\n    let rangeStartStringIndex = 0;\r\n    let rangeAttrFG = line.getFg(0);\r\n    let rangeAttrBG = line.getBg(0);\r\n\r\n    for (let x = 0; x < line.getTrimmedLength(); x++) {\r\n      line.loadCell(x, this._workCell);\r\n\r\n      if (this._workCell.getWidth() === 0) {\r\n        // If this character is of width 0, skip it.\r\n        continue;\r\n      }\r\n\r\n      // End of range\r\n      if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\r\n        // If we ended up with a sequence of more than one character,\r\n        // look for ranges to join.\r\n        if (x - rangeStartColumn > 1) {\r\n          const joinedRanges = this._getJoinedRanges(\r\n            lineStr,\r\n            rangeStartStringIndex,\r\n            currentStringIndex,\r\n            line,\r\n            rangeStartColumn\r\n          );\r\n          for (let i = 0; i < joinedRanges.length; i++) {\r\n            ranges.push(joinedRanges[i]);\r\n          }\r\n        }\r\n\r\n        // Reset our markers for a new range.\r\n        rangeStartColumn = x;\r\n        rangeStartStringIndex = currentStringIndex;\r\n        rangeAttrFG = this._workCell.fg;\r\n        rangeAttrBG = this._workCell.bg;\r\n      }\r\n\r\n      currentStringIndex += this._workCell.getChars().length || WHITESPACE_CELL_CHAR.length;\r\n    }\r\n\r\n    // Process any trailing ranges.\r\n    if (this._bufferService.cols - rangeStartColumn > 1) {\r\n      const joinedRanges = this._getJoinedRanges(\r\n        lineStr,\r\n        rangeStartStringIndex,\r\n        currentStringIndex,\r\n        line,\r\n        rangeStartColumn\r\n      );\r\n      for (let i = 0; i < joinedRanges.length; i++) {\r\n        ranges.push(joinedRanges[i]);\r\n      }\r\n    }\r\n\r\n    return ranges;\r\n  }\r\n\r\n  /**\r\n   * Given a segment of a line of text, find all ranges of text that should be\r\n   * joined in a single rendering unit. Ranges are internally converted to\r\n   * column ranges, rather than string ranges.\r\n   * @param line String representation of the full line of text\r\n   * @param startIndex Start position of the range to search in the string (inclusive)\r\n   * @param endIndex End position of the range to search in the string (exclusive)\r\n   */\r\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\r\n    const text = line.substring(startIndex, endIndex);\r\n    // At this point we already know that there is at least one joiner so\r\n    // we can just pull its value and assign it directly rather than\r\n    // merging it into an empty array, which incurs unnecessary writes.\r\n    let allJoinedRanges: [number, number][] = [];\r\n    try {\r\n      allJoinedRanges = this._characterJoiners[0].handler(text);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n    for (let i = 1; i < this._characterJoiners.length; i++) {\r\n      // We merge any overlapping ranges across the different joiners\r\n      try {\r\n        const joinerRanges = this._characterJoiners[i].handler(text);\r\n        for (let j = 0; j < joinerRanges.length; j++) {\r\n          CharacterJoinerService._mergeRanges(allJoinedRanges, joinerRanges[j]);\r\n        }\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    this._stringRangesToCellRanges(allJoinedRanges, lineData, startCol);\r\n    return allJoinedRanges;\r\n  }\r\n\r\n  /**\r\n   * Modifies the provided ranges in-place to adjust for variations between\r\n   * string length and cell width so that the range represents a cell range,\r\n   * rather than the string range the joiner provides.\r\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\r\n   * @param line Cell data for the relevant line in the terminal\r\n   * @param startCol Offset within the line to start from\r\n   */\r\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\r\n    let currentRangeIndex = 0;\r\n    let currentRangeStarted = false;\r\n    let currentStringIndex = 0;\r\n    let currentRange = ranges[currentRangeIndex];\r\n\r\n    // If we got through all of the ranges, stop searching\r\n    if (!currentRange) {\r\n      return;\r\n    }\r\n\r\n    for (let x = startCol; x < this._bufferService.cols; x++) {\r\n      const width = line.getWidth(x);\r\n      const length = line.getString(x).length || WHITESPACE_CELL_CHAR.length;\r\n\r\n      // We skip zero-width characters when creating the string to join the text\r\n      // so we do the same here\r\n      if (width === 0) {\r\n        continue;\r\n      }\r\n\r\n      // Adjust the start of the range\r\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\r\n        currentRange[0] = x;\r\n        currentRangeStarted = true;\r\n      }\r\n\r\n      // Adjust the end of the range\r\n      if (currentRange[1] <= currentStringIndex) {\r\n        currentRange[1] = x;\r\n\r\n        // We're finished with this range, so we move to the next one\r\n        currentRange = ranges[++currentRangeIndex];\r\n\r\n        // If there are no more ranges left, stop searching\r\n        if (!currentRange) {\r\n          break;\r\n        }\r\n\r\n        // Ranges can be on adjacent characters. Because the end index of the\r\n        // ranges are exclusive, this means that the index for the start of a\r\n        // range can be the same as the end index of the previous range. To\r\n        // account for the start of the next range, we check here just in case.\r\n        if (currentRange[0] <= currentStringIndex) {\r\n          currentRange[0] = x;\r\n          currentRangeStarted = true;\r\n        } else {\r\n          currentRangeStarted = false;\r\n        }\r\n      }\r\n\r\n      // Adjust the string index based on the character length to line up with\r\n      // the column adjustment\r\n      currentStringIndex += length;\r\n    }\r\n\r\n    // If there is still a range left at the end, it must extend all the way to\r\n    // the end of the line.\r\n    if (currentRange) {\r\n      currentRange[1] = this._bufferService.cols;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Merges the range defined by the provided start and end into the list of\r\n   * existing ranges. The merge is done in place on the existing range for\r\n   * performance and is also returned.\r\n   * @param ranges Existing range list\r\n   * @param newRange Tuple of two numbers representing the new range to merge in.\r\n   * @returns The ranges input with the new range merged in place\r\n   */\r\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\r\n    let inRange = false;\r\n    for (let i = 0; i < ranges.length; i++) {\r\n      const range = ranges[i];\r\n      if (!inRange) {\r\n        if (newRange[1] <= range[0]) {\r\n          // Case 1: New range is before the search range\r\n          ranges.splice(i, 0, newRange);\r\n          return ranges;\r\n        }\r\n\r\n        if (newRange[1] <= range[1]) {\r\n          // Case 2: New range is either wholly contained within the\r\n          // search range or overlaps with the front of it\r\n          range[0] = Math.min(newRange[0], range[0]);\r\n          return ranges;\r\n        }\r\n\r\n        if (newRange[0] < range[1]) {\r\n          // Case 3: New range either wholly contains the search range\r\n          // or overlaps with the end of it\r\n          range[0] = Math.min(newRange[0], range[0]);\r\n          inRange = true;\r\n        }\r\n\r\n        // Case 4: New range starts after the search range\r\n        continue;\r\n      } else {\r\n        if (newRange[1] <= range[0]) {\r\n          // Case 5: New range extends from previous range but doesn't\r\n          // reach the current one\r\n          ranges[i - 1][1] = newRange[1];\r\n          return ranges;\r\n        }\r\n\r\n        if (newRange[1] <= range[1]) {\r\n          // Case 6: New range extends from prvious range into the\r\n          // current range\r\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\r\n          ranges.splice(i, 1);\r\n          return ranges;\r\n        }\r\n\r\n        // Case 7: New range extends from previous range past the\r\n        // end of the current range\r\n        ranges.splice(i, 1);\r\n        i--;\r\n      }\r\n    }\r\n\r\n    if (inRange) {\r\n      // Case 8: New range extends past the last existing range\r\n      ranges[ranges.length - 1][1] = newRange[1];\r\n    } else {\r\n      // Case 9: New range starts after the last existing range\r\n      ranges.push(newRange);\r\n    }\r\n\r\n    return ranges;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { isNode } from 'common/Platform';\r\nimport { IColor, IColorRGB } from 'common/Types';\r\n\r\nlet $r = 0;\r\nlet $g = 0;\r\nlet $b = 0;\r\nlet $a = 0;\r\n\r\nexport const NULL_COLOR: IColor = {\r\n  css: '#00000000',\r\n  rgba: 0\r\n};\r\n\r\n/**\r\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\r\n */\r\nexport namespace channels {\r\n  export function toCss(r: number, g: number, b: number, a?: number): string {\r\n    if (a !== undefined) {\r\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\r\n    }\r\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\r\n  }\r\n\r\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\r\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\r\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\r\n    // >>> 0 forces an unsigned int\r\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Helper functions where the source type is `IColor`.\r\n */\r\nexport namespace color {\r\n  export function blend(bg: IColor, fg: IColor): IColor {\r\n    $a = (fg.rgba & 0xFF) / 255;\r\n    if ($a === 1) {\r\n      return {\r\n        css: fg.css,\r\n        rgba: fg.rgba\r\n      };\r\n    }\r\n    const fgR = (fg.rgba >> 24) & 0xFF;\r\n    const fgG = (fg.rgba >> 16) & 0xFF;\r\n    const fgB = (fg.rgba >> 8) & 0xFF;\r\n    const bgR = (bg.rgba >> 24) & 0xFF;\r\n    const bgG = (bg.rgba >> 16) & 0xFF;\r\n    const bgB = (bg.rgba >> 8) & 0xFF;\r\n    $r = bgR + Math.round((fgR - bgR) * $a);\r\n    $g = bgG + Math.round((fgG - bgG) * $a);\r\n    $b = bgB + Math.round((fgB - bgB) * $a);\r\n    const css = channels.toCss($r, $g, $b);\r\n    const rgba = channels.toRgba($r, $g, $b);\r\n    return { css, rgba };\r\n  }\r\n\r\n  export function isOpaque(color: IColor): boolean {\r\n    return (color.rgba & 0xFF) === 0xFF;\r\n  }\r\n\r\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\r\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\r\n    if (!result) {\r\n      return undefined;\r\n    }\r\n    return rgba.toColor(\r\n      (result >> 24 & 0xFF),\r\n      (result >> 16 & 0xFF),\r\n      (result >> 8  & 0xFF)\r\n    );\r\n  }\r\n\r\n  export function opaque(color: IColor): IColor {\r\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\r\n    [$r, $g, $b] = rgba.toChannels(rgbaColor);\r\n    return {\r\n      css: channels.toCss($r, $g, $b),\r\n      rgba: rgbaColor\r\n    };\r\n  }\r\n\r\n  export function opacity(color: IColor, opacity: number): IColor {\r\n    $a = Math.round(opacity * 0xFF);\r\n    [$r, $g, $b] = rgba.toChannels(color.rgba);\r\n    return {\r\n      css: channels.toCss($r, $g, $b, $a),\r\n      rgba: channels.toRgba($r, $g, $b, $a)\r\n    };\r\n  }\r\n\r\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\r\n    $a = color.rgba & 0xFF;\r\n    return opacity(color, ($a * factor) / 0xFF);\r\n  }\r\n\r\n  export function toColorRGB(color: IColor): IColorRGB {\r\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\r\n  }\r\n}\r\n\r\n/**\r\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb', '#rrggbbaa').\r\n */\r\nexport namespace css {\r\n  let $ctx: CanvasRenderingContext2D | undefined;\r\n  let $litmusColor: CanvasGradient | undefined;\r\n  if (!isNode) {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = 1;\r\n    canvas.height = 1;\r\n    const ctx = canvas.getContext('2d', {\r\n      willReadFrequently: true\r\n    });\r\n    if (ctx) {\r\n      $ctx = ctx;\r\n      $ctx.globalCompositeOperation = 'copy';\r\n      $litmusColor = $ctx.createLinearGradient(0, 0, 1, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts a css string to an IColor, this should handle all valid CSS color strings and will\r\n   * throw if it's invalid. The ideal format to use is `#rrggbb[aa]` as it's the fastest to parse.\r\n   *\r\n   * Only `#rgb[a]`, `#rrggbb[aa]`, `rgb()` and `rgba()` formats are supported when run in a Node\r\n   * environment.\r\n   */\r\n  export function toColor(css: string): IColor {\r\n    // Formats: #rgb[a] and #rrggbb[aa]\r\n    if (css.match(/#[\\da-f]{3,8}/i)) {\r\n      switch (css.length) {\r\n        case 4: { // #rgb\r\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\r\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\r\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\r\n          return rgba.toColor($r, $g, $b);\r\n        }\r\n        case 5: { // #rgba\r\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\r\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\r\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\r\n          $a = parseInt(css.slice(4, 5).repeat(2), 16);\r\n          return rgba.toColor($r, $g, $b, $a);\r\n        }\r\n        case 7: // #rrggbb\r\n          return {\r\n            css,\r\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\r\n          };\r\n        case 9: // #rrggbbaa\r\n          return {\r\n            css,\r\n            rgba: parseInt(css.slice(1), 16) >>> 0\r\n          };\r\n      }\r\n    }\r\n\r\n    // Formats: rgb() or rgba()\r\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\r\n    if (rgbaMatch) {\r\n      $r = parseInt(rgbaMatch[1]);\r\n      $g = parseInt(rgbaMatch[2]);\r\n      $b = parseInt(rgbaMatch[3]);\r\n      $a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\r\n      return rgba.toColor($r, $g, $b, $a);\r\n    }\r\n\r\n    // Validate the context is available for canvas-based color parsing\r\n    if (!$ctx || !$litmusColor) {\r\n      throw new Error('css.toColor: Unsupported css format');\r\n    }\r\n\r\n    // Validate the color using canvas fillStyle\r\n    // See https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\r\n    $ctx.fillStyle = $litmusColor;\r\n    $ctx.fillStyle = css;\r\n    if (typeof $ctx.fillStyle !== 'string') {\r\n      throw new Error('css.toColor: Unsupported css format');\r\n    }\r\n\r\n    $ctx.fillRect(0, 0, 1, 1);\r\n    [$r, $g, $b, $a] = $ctx.getImageData(0, 0, 1, 1).data;\r\n\r\n    // Validate the color is non-transparent as color hue gets lost when drawn to the canvas\r\n    if ($a !== 0xFF) {\r\n      throw new Error('css.toColor: Unsupported css format');\r\n    }\r\n\r\n    // Extract the color from the canvas' fillStyle property which exposes the color value in rgba()\r\n    // format\r\n    // See https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\r\n    return {\r\n      rgba: channels.toRgba($r, $g, $b, $a),\r\n      css\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\r\n */\r\nexport namespace rgb {\r\n  /**\r\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\r\n   * between two colors.\r\n   * @param rgb The color to use.\r\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\r\n   */\r\n  export function relativeLuminance(rgb: number): number {\r\n    return relativeLuminance2(\r\n      (rgb >> 16) & 0xFF,\r\n      (rgb >> 8 ) & 0xFF,\r\n      (rgb      ) & 0xFF);\r\n  }\r\n\r\n  /**\r\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\r\n   * between two colors.\r\n   * @param r The red channel (0x00 to 0xFF).\r\n   * @param g The green channel (0x00 to 0xFF).\r\n   * @param b The blue channel (0x00 to 0xFF).\r\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\r\n   */\r\n  export function relativeLuminance2(r: number, g: number, b: number): number {\r\n    const rs = r / 255;\r\n    const gs = g / 255;\r\n    const bs = b / 255;\r\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\r\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\r\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\r\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\r\n  }\r\n}\r\n\r\n/**\r\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\r\n */\r\nexport namespace rgba {\r\n  /**\r\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\r\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\r\n   * without the contrast ratio being met, go the other direction using the background color as the\r\n   * foreground color and take either the first or second result depending on which has the higher\r\n   * contrast ratio.\r\n   *\r\n   * `undefined` will be returned if the contrast ratio is already met.\r\n   *\r\n   * @param bgRgba The background color in rgba format.\r\n   * @param fgRgba The foreground color in rgba format.\r\n   * @param ratio The contrast ratio to achieve.\r\n   */\r\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\r\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\r\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\r\n    const cr = contrastRatio(bgL, fgL);\r\n    if (cr < ratio) {\r\n      if (fgL < bgL) {\r\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\r\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\r\n        if (resultARatio < ratio) {\r\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\r\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\r\n          return resultARatio > resultBRatio ? resultA : resultB;\r\n        }\r\n        return resultA;\r\n      }\r\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\r\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\r\n      if (resultARatio < ratio) {\r\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\r\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\r\n        return resultARatio > resultBRatio ? resultA : resultB;\r\n      }\r\n      return resultA;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\r\n    // This is a naive but fast approach to reducing luminance as converting to\r\n    // HSL and back is expensive\r\n    const bgR = (bgRgba >> 24) & 0xFF;\r\n    const bgG = (bgRgba >> 16) & 0xFF;\r\n    const bgB = (bgRgba >>  8) & 0xFF;\r\n    let fgR = (fgRgba >> 24) & 0xFF;\r\n    let fgG = (fgRgba >> 16) & 0xFF;\r\n    let fgB = (fgRgba >>  8) & 0xFF;\r\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\r\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\r\n      // Reduce by 10% until the ratio is hit\r\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\r\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\r\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\r\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\r\n    }\r\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\r\n  }\r\n\r\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\r\n    // This is a naive but fast approach to increasing luminance as converting to\r\n    // HSL and back is expensive\r\n    const bgR = (bgRgba >> 24) & 0xFF;\r\n    const bgG = (bgRgba >> 16) & 0xFF;\r\n    const bgB = (bgRgba >>  8) & 0xFF;\r\n    let fgR = (fgRgba >> 24) & 0xFF;\r\n    let fgG = (fgRgba >> 16) & 0xFF;\r\n    let fgB = (fgRgba >>  8) & 0xFF;\r\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\r\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\r\n      // Increase by 10% until the ratio is hit\r\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\r\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\r\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\r\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\r\n    }\r\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\r\n  }\r\n\r\n  // FIXME: Move this to channels NS?\r\n  export function toChannels(value: number): [number, number, number, number] {\r\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\r\n  }\r\n\r\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\r\n    return {\r\n      css: channels.toCss(r, g, b, a),\r\n      rgba: channels.toRgba(r, g, b, a)\r\n    };\r\n  }\r\n}\r\n\r\nexport function toPaddedHex(c: number): string {\r\n  const s = c.toString(16);\r\n  return s.length < 2 ? '0' + s : s;\r\n}\r\n\r\n/**\r\n * Gets the contrast ratio between two relative luminance values.\r\n * @param l1 The first relative luminance.\r\n * @param l2 The first relative luminance.\r\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\r\n */\r\nexport function contrastRatio(l1: number, l2: number): number {\r\n  if (l1 < l2) {\r\n    return (l2 + 0.05) / (l1 + 0.05);\r\n  }\r\n  return (l1 + 0.05) / (l2 + 0.05);\r\n}\r\n","/**\r\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IDisposable } from 'common/Types';\r\n\r\ninterface IListener<T, U = void> {\r\n  (arg1: T, arg2: U): void;\r\n}\r\n\r\nexport interface IEvent<T, U = void> {\r\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\r\n}\r\n\r\nexport interface IEventEmitter<T, U = void> {\r\n  event: IEvent<T, U>;\r\n  fire(arg1: T, arg2: U): void;\r\n  dispose(): void;\r\n}\r\n\r\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\r\n  private _listeners: IListener<T, U>[] = [];\r\n  private _event?: IEvent<T, U>;\r\n  private _disposed: boolean = false;\r\n\r\n  public get event(): IEvent<T, U> {\r\n    if (!this._event) {\r\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\r\n        this._listeners.push(listener);\r\n        const disposable = {\r\n          dispose: () => {\r\n            if (!this._disposed) {\r\n              for (let i = 0; i < this._listeners.length; i++) {\r\n                if (this._listeners[i] === listener) {\r\n                  this._listeners.splice(i, 1);\r\n                  return;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        };\r\n        return disposable;\r\n      };\r\n    }\r\n    return this._event;\r\n  }\r\n\r\n  public fire(arg1: T, arg2: U): void {\r\n    const queue: IListener<T, U>[] = [];\r\n    for (let i = 0; i < this._listeners.length; i++) {\r\n      queue.push(this._listeners[i]);\r\n    }\r\n    for (let i = 0; i < queue.length; i++) {\r\n      queue[i].call(undefined, arg1, arg2);\r\n    }\r\n  }\r\n\r\n  public dispose(): void {\r\n    if (this._listeners) {\r\n      this._listeners.length = 0;\r\n    }\r\n    this._disposed = true;\r\n  }\r\n}\r\n\r\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\r\n  return from(e => to.fire(e));\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IDisposable } from 'common/Types';\r\n\r\n/**\r\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\r\n * object and its components.\r\n */\r\nexport abstract class Disposable implements IDisposable {\r\n  protected _disposables: IDisposable[] = [];\r\n  protected _isDisposed: boolean = false;\r\n\r\n  constructor() {\r\n  }\r\n\r\n  /**\r\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\r\n   */\r\n  public dispose(): void {\r\n    this._isDisposed = true;\r\n    for (const d of this._disposables) {\r\n      d.dispose();\r\n    }\r\n    this._disposables.length = 0;\r\n  }\r\n\r\n  /**\r\n   * Registers a disposable object.\r\n   * @param d The disposable to register.\r\n   * @returns The disposable.\r\n   */\r\n  public register<T extends IDisposable>(d: T): T {\r\n    this._disposables.push(d);\r\n    return d;\r\n  }\r\n\r\n  /**\r\n   * Unregisters a disposable object if it has been registered, if not do\r\n   * nothing.\r\n   * @param d The disposable to unregister.\r\n   */\r\n  public unregister<T extends IDisposable>(d: T): void {\r\n    const index = this._disposables.indexOf(d);\r\n    if (index !== -1) {\r\n      this._disposables.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Wrap a function in a disposable.\r\n */\r\nexport function toDisposable(f: () => void): IDisposable {\r\n  return { dispose: f };\r\n}\r\n\r\n/**\r\n * Dispose of all disposables in an array and set its length to 0.\r\n */\r\nexport function disposeArray(disposables: IDisposable[]): void {\r\n  for (const d of disposables) {\r\n    d.dispose();\r\n  }\r\n  disposables.length = 0;\r\n}\r\n\r\n/**\r\n * Creates a disposable that will dispose of an array of disposables when disposed.\r\n */\r\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\r\n  return { dispose: () => disposeArray(array) };\r\n}\r\n","/**\r\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\r\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\r\n\r\n  public set(first: TFirst, second: TSecond, value: TValue): void {\r\n    if (!this._data[first]) {\r\n      this._data[first] = {};\r\n    }\r\n    this._data[first as string | number]![second] = value;\r\n  }\r\n\r\n  public get(first: TFirst, second: TSecond): TValue | undefined {\r\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\r\n  }\r\n\r\n  public clear(): void {\r\n    this._data = {};\r\n  }\r\n}\r\n\r\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\r\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\r\n\r\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\r\n    if (!this._data.get(first, second)) {\r\n      this._data.set(first, second, new TwoKeyMap());\r\n    }\r\n    this._data.get(first, second)!.set(third, fourth, value);\r\n  }\r\n\r\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\r\n    return this._data.get(first, second)?.get(third, fourth);\r\n  }\r\n\r\n  public clear(): void {\r\n    this._data.clear();\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\ninterface INavigator {\r\n  userAgent: string;\r\n  language: string;\r\n  platform: string;\r\n}\r\n\r\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\r\n// we want this module to live in common.\r\ndeclare const navigator: INavigator;\r\n\r\nexport const isNode = (typeof navigator === 'undefined') ? true : false;\r\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\r\nconst platform = (isNode) ? 'node' : navigator.platform;\r\n\r\nexport const isFirefox = userAgent.includes('Firefox');\r\nexport const isLegacyEdge = userAgent.includes('Edge');\r\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\r\nexport function getSafariVersion(): number {\r\n  if (!isSafari) {\r\n    return 0;\r\n  }\r\n  const majorVersion = userAgent.match(/Version\\/(\\d+)/);\r\n  if (majorVersion === null || majorVersion.length < 2) {\r\n    return 0;\r\n  }\r\n  return parseInt(majorVersion[1]);\r\n}\r\n\r\n// Find the users platform. We use this to interpret the meta key\r\n// and ISO third level shifts.\r\n// http://stackoverflow.com/q/19877924/577598\r\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\r\nexport const isIpad = platform === 'iPad';\r\nexport const isIphone = platform === 'iPhone';\r\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\r\nexport const isLinux = platform.indexOf('Linux') >= 0;\r\n// Note that when this is true, isLinux will also be true.\r\nexport const isChromeOS = /\\bCrOS\\b/.test(userAgent);\r\n","/**\r\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { isNode } from 'common/Platform';\r\n\r\ninterface ITaskQueue {\r\n  /**\r\n   * Adds a task to the queue which will run in a future idle callback.\r\n   * To avoid perceivable stalls on the mainthread, tasks with heavy workload\r\n   * should split their work into smaller pieces and return `true` to get\r\n   * called again until the work is done (on falsy return value).\r\n   */\r\n  enqueue(task: () => boolean | void): void;\r\n\r\n  /**\r\n   * Flushes the queue, running all remaining tasks synchronously.\r\n   */\r\n  flush(): void;\r\n\r\n  /**\r\n   * Clears any remaining tasks from the queue, these will not be run.\r\n   */\r\n  clear(): void;\r\n}\r\n\r\ninterface ITaskDeadline {\r\n  timeRemaining(): number;\r\n}\r\ntype CallbackWithDeadline = (deadline: ITaskDeadline) => void;\r\n\r\nabstract class TaskQueue implements ITaskQueue {\r\n  private _tasks: (() => boolean | void)[] = [];\r\n  private _idleCallback?: number;\r\n  private _i = 0;\r\n\r\n  protected abstract _requestCallback(callback: CallbackWithDeadline): number;\r\n  protected abstract _cancelCallback(identifier: number): void;\r\n\r\n  public enqueue(task: () => boolean | void): void {\r\n    this._tasks.push(task);\r\n    this._start();\r\n  }\r\n\r\n  public flush(): void {\r\n    while (this._i < this._tasks.length) {\r\n      if (!this._tasks[this._i]()) {\r\n        this._i++;\r\n      }\r\n    }\r\n    this.clear();\r\n  }\r\n\r\n  public clear(): void {\r\n    if (this._idleCallback) {\r\n      this._cancelCallback(this._idleCallback);\r\n      this._idleCallback = undefined;\r\n    }\r\n    this._i = 0;\r\n    this._tasks.length = 0;\r\n  }\r\n\r\n  private _start(): void {\r\n    if (!this._idleCallback) {\r\n      this._idleCallback = this._requestCallback(this._process.bind(this));\r\n    }\r\n  }\r\n\r\n  private _process(deadline: ITaskDeadline): void {\r\n    this._idleCallback = undefined;\r\n    let taskDuration = 0;\r\n    let longestTask = 0;\r\n    let lastDeadlineRemaining = deadline.timeRemaining();\r\n    let deadlineRemaining = 0;\r\n    while (this._i < this._tasks.length) {\r\n      taskDuration = Date.now();\r\n      if (!this._tasks[this._i]()) {\r\n        this._i++;\r\n      }\r\n      // other than performance.now, Date.now might not be stable (changes on wall clock changes),\r\n      // this is not an issue here as a clock change during a short running task is very unlikely\r\n      // in case it still happened and leads to negative duration, simply assume 1 msec\r\n      taskDuration = Math.max(1, Date.now() - taskDuration);\r\n      longestTask = Math.max(taskDuration, longestTask);\r\n      // Guess the following task will take a similar time to the longest task in this batch, allow\r\n      // additional room to try avoid exceeding the deadline\r\n      deadlineRemaining = deadline.timeRemaining();\r\n      if (longestTask * 1.5 > deadlineRemaining) {\r\n        // Warn when the time exceeding the deadline is over 20ms, if this happens in practice the\r\n        // task should be split into sub-tasks to ensure the UI remains responsive.\r\n        if (lastDeadlineRemaining - taskDuration < -20) {\r\n          console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(lastDeadlineRemaining - taskDuration))}ms`);\r\n        }\r\n        this._start();\r\n        return;\r\n      }\r\n      lastDeadlineRemaining = deadlineRemaining;\r\n    }\r\n    this.clear();\r\n  }\r\n}\r\n\r\n/**\r\n * A queue of that runs tasks over several tasks via setTimeout, trying to maintain above 60 frames\r\n * per second. The tasks will run in the order they are enqueued, but they will run some time later,\r\n * and care should be taken to ensure they're non-urgent and will not introduce race conditions.\r\n */\r\nexport class PriorityTaskQueue extends TaskQueue {\r\n  protected _requestCallback(callback: CallbackWithDeadline): number {\r\n    return setTimeout(() => callback(this._createDeadline(16)));\r\n  }\r\n\r\n  protected _cancelCallback(identifier: number): void {\r\n    clearTimeout(identifier);\r\n  }\r\n\r\n  private _createDeadline(duration: number): ITaskDeadline {\r\n    const end = Date.now() + duration;\r\n    return {\r\n      timeRemaining: () => Math.max(0, end - Date.now())\r\n    };\r\n  }\r\n}\r\n\r\nclass IdleTaskQueueInternal extends TaskQueue {\r\n  protected _requestCallback(callback: IdleRequestCallback): number {\r\n    return requestIdleCallback(callback);\r\n  }\r\n\r\n  protected _cancelCallback(identifier: number): void {\r\n    cancelIdleCallback(identifier);\r\n  }\r\n}\r\n\r\n/**\r\n * A queue of that runs tasks over several idle callbacks, trying to respect the idle callback's\r\n * deadline given by the environment. The tasks will run in the order they are enqueued, but they\r\n * will run some time later, and care should be taken to ensure they're non-urgent and will not\r\n * introduce race conditions.\r\n *\r\n * This reverts to a {@link PriorityTaskQueue} if the environment does not support idle callbacks.\r\n */\r\n// eslint-disable-next-line @typescript-eslint/naming-convention\r\nexport const IdleTaskQueue = (!isNode && 'requestIdleCallback' in window) ? IdleTaskQueueInternal : PriorityTaskQueue;\r\n\r\n/**\r\n * An object that tracks a single debounced task that will run on the next idle frame. When called\r\n * multiple times, only the last set task will run.\r\n */\r\nexport class DebouncedIdleTask {\r\n  private _queue: ITaskQueue;\r\n\r\n  constructor() {\r\n    this._queue = new IdleTaskQueue();\r\n  }\r\n\r\n  public set(task: () => boolean | void): void {\r\n    this._queue.clear();\r\n    this._queue.enqueue(task);\r\n  }\r\n\r\n  public flush(): void {\r\n    this._queue.flush();\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\r\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\r\n\r\nexport class AttributeData implements IAttributeData {\r\n  public static toColorRGB(value: number): IColorRGB {\r\n    return [\r\n      value >>> Attributes.RED_SHIFT & 255,\r\n      value >>> Attributes.GREEN_SHIFT & 255,\r\n      value & 255\r\n    ];\r\n  }\r\n\r\n  public static fromColorRGB(value: IColorRGB): number {\r\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\r\n  }\r\n\r\n  public clone(): IAttributeData {\r\n    const newObj = new AttributeData();\r\n    newObj.fg = this.fg;\r\n    newObj.bg = this.bg;\r\n    newObj.extended = this.extended.clone();\r\n    return newObj;\r\n  }\r\n\r\n  // data\r\n  public fg = 0;\r\n  public bg = 0;\r\n  public extended: IExtendedAttrs = new ExtendedAttrs();\r\n\r\n  // flags\r\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\r\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\r\n  public isUnderline(): number     {\r\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\r\n      return 1;\r\n    }\r\n    return this.fg & FgFlags.UNDERLINE;\r\n  }\r\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\r\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\r\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\r\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\r\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\r\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\r\n  public isOverline(): number      { return this.bg & BgFlags.OVERLINE; }\r\n\r\n  // color modes\r\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\r\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\r\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\r\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\r\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\r\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\r\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\r\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\r\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\r\n\r\n  // colors\r\n  public getFgColor(): number {\r\n    switch (this.fg & Attributes.CM_MASK) {\r\n      case Attributes.CM_P16:\r\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\r\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\r\n      default:                  return -1;  // CM_DEFAULT defaults to -1\r\n    }\r\n  }\r\n  public getBgColor(): number {\r\n    switch (this.bg & Attributes.CM_MASK) {\r\n      case Attributes.CM_P16:\r\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\r\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\r\n      default:                  return -1;  // CM_DEFAULT defaults to -1\r\n    }\r\n  }\r\n\r\n  // extended attrs\r\n  public hasExtendedAttrs(): number {\r\n    return this.bg & BgFlags.HAS_EXTENDED;\r\n  }\r\n  public updateExtended(): void {\r\n    if (this.extended.isEmpty()) {\r\n      this.bg &= ~BgFlags.HAS_EXTENDED;\r\n    } else {\r\n      this.bg |= BgFlags.HAS_EXTENDED;\r\n    }\r\n  }\r\n  public getUnderlineColor(): number {\r\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\r\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\r\n        case Attributes.CM_P16:\r\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\r\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\r\n        default:                  return this.getFgColor();\r\n      }\r\n    }\r\n    return this.getFgColor();\r\n  }\r\n  public getUnderlineColorMode(): number {\r\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\r\n      ? this.extended.underlineColor & Attributes.CM_MASK\r\n      : this.getFgColorMode();\r\n  }\r\n  public isUnderlineColorRGB(): boolean {\r\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\r\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\r\n      : this.isFgRGB();\r\n  }\r\n  public isUnderlineColorPalette(): boolean {\r\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\r\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\r\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\r\n      : this.isFgPalette();\r\n  }\r\n  public isUnderlineColorDefault(): boolean {\r\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\r\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\r\n      : this.isFgDefault();\r\n  }\r\n  public getUnderlineStyle(): UnderlineStyle {\r\n    return this.fg & FgFlags.UNDERLINE\r\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\r\n      : UnderlineStyle.NONE;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Extended attributes for a cell.\r\n * Holds information about different underline styles and color.\r\n */\r\nexport class ExtendedAttrs implements IExtendedAttrs {\r\n  private _ext: number = 0;\r\n  public get ext(): number {\r\n    if (this._urlId) {\r\n      return (\r\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\r\n        (this.underlineStyle << 26)\r\n      );\r\n    }\r\n    return this._ext;\r\n  }\r\n  public set ext(value: number) { this._ext = value; }\r\n\r\n  public get underlineStyle(): UnderlineStyle {\r\n    // Always return the URL style if it has one\r\n    if (this._urlId) {\r\n      return UnderlineStyle.DASHED;\r\n    }\r\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\r\n  }\r\n  public set underlineStyle(value: UnderlineStyle) {\r\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\r\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\r\n  }\r\n\r\n  public get underlineColor(): number {\r\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\r\n  }\r\n  public set underlineColor(value: number) {\r\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\r\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\r\n  }\r\n\r\n  private _urlId: number = 0;\r\n  public get urlId(): number {\r\n    return this._urlId;\r\n  }\r\n  public set urlId(value: number) {\r\n    this._urlId = value;\r\n  }\r\n\r\n  constructor(\r\n    ext: number = 0,\r\n    urlId: number = 0\r\n  ) {\r\n    this._ext = ext;\r\n    this._urlId = urlId;\r\n  }\r\n\r\n  public clone(): IExtendedAttrs {\r\n    return new ExtendedAttrs(this._ext, this._urlId);\r\n  }\r\n\r\n  /**\r\n   * Convenient method to indicate whether the object holds no additional information,\r\n   * that needs to be persistant in the buffer.\r\n   */\r\n  public isEmpty(): boolean {\r\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\r\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\r\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\r\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\r\n\r\n/**\r\n * CellData - represents a single Cell in the terminal buffer.\r\n */\r\nexport class CellData extends AttributeData implements ICellData {\r\n  /** Helper to create CellData from CharData. */\r\n  public static fromCharData(value: CharData): CellData {\r\n    const obj = new CellData();\r\n    obj.setFromCharData(value);\r\n    return obj;\r\n  }\r\n  /** Primitives from terminal buffer. */\r\n  public content = 0;\r\n  public fg = 0;\r\n  public bg = 0;\r\n  public extended: IExtendedAttrs = new ExtendedAttrs();\r\n  public combinedData = '';\r\n  /** Whether cell contains a combined string. */\r\n  public isCombined(): number {\r\n    return this.content & Content.IS_COMBINED_MASK;\r\n  }\r\n  /** Width of the cell. */\r\n  public getWidth(): number {\r\n    return this.content >> Content.WIDTH_SHIFT;\r\n  }\r\n  /** JS string of the content. */\r\n  public getChars(): string {\r\n    if (this.content & Content.IS_COMBINED_MASK) {\r\n      return this.combinedData;\r\n    }\r\n    if (this.content & Content.CODEPOINT_MASK) {\r\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\r\n    }\r\n    return '';\r\n  }\r\n  /**\r\n   * Codepoint of cell\r\n   * Note this returns the UTF32 codepoint of single chars,\r\n   * if content is a combined string it returns the codepoint\r\n   * of the last char in string to be in line with code in CharData.\r\n   */\r\n  public getCode(): number {\r\n    return (this.isCombined())\r\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\r\n      : this.content & Content.CODEPOINT_MASK;\r\n  }\r\n  /** Set data from CharData */\r\n  public setFromCharData(value: CharData): void {\r\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\r\n    this.bg = 0;\r\n    let combined = false;\r\n    // surrogates and combined strings need special treatment\r\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\r\n      combined = true;\r\n    }\r\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\r\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\r\n      // if the 2-char string is a surrogate create single codepoint\r\n      // everything else is combined\r\n      if (0xD800 <= code && code <= 0xDBFF) {\r\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\r\n        if (0xDC00 <= second && second <= 0xDFFF) {\r\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\r\n        }\r\n        else {\r\n          combined = true;\r\n        }\r\n      }\r\n      else {\r\n        combined = true;\r\n      }\r\n    }\r\n    else {\r\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\r\n    }\r\n    if (combined) {\r\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\r\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\r\n    }\r\n  }\r\n  /** Get data as CharData. */\r\n  public getAsCharData(): CharData {\r\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nexport const DEFAULT_COLOR = 0;\r\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\r\nexport const DEFAULT_EXT = 0;\r\n\r\nexport const CHAR_DATA_ATTR_INDEX = 0;\r\nexport const CHAR_DATA_CHAR_INDEX = 1;\r\nexport const CHAR_DATA_WIDTH_INDEX = 2;\r\nexport const CHAR_DATA_CODE_INDEX = 3;\r\n\r\n/**\r\n * Null cell - a real empty cell (containing nothing).\r\n * Note that code should always be 0 for a null cell as\r\n * several test condition of the buffer line rely on this.\r\n */\r\nexport const NULL_CELL_CHAR = '';\r\nexport const NULL_CELL_WIDTH = 1;\r\nexport const NULL_CELL_CODE = 0;\r\n\r\n/**\r\n * Whitespace cell.\r\n * This is meant as a replacement for empty cells when needed\r\n * during rendering lines to preserve correct aligment.\r\n */\r\nexport const WHITESPACE_CELL_CHAR = ' ';\r\nexport const WHITESPACE_CELL_WIDTH = 1;\r\nexport const WHITESPACE_CELL_CODE = 32;\r\n\r\n/**\r\n * Bitmasks for accessing data in `content`.\r\n */\r\nexport const enum Content {\r\n  /**\r\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\r\n   *              read:   `codepoint = content & Content.codepointMask;`\r\n   *              write:  `content |= codepoint & Content.codepointMask;`\r\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\r\n   *                      `content |= codepoint;`\r\n   */\r\n  CODEPOINT_MASK = 0x1FFFFF,\r\n\r\n  /**\r\n   * bit 22       flag indication whether a cell contains combined content\r\n   *              read:   `isCombined = content & Content.isCombined;`\r\n   *              set:    `content |= Content.isCombined;`\r\n   *              clear:  `content &= ~Content.isCombined;`\r\n   */\r\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\r\n\r\n  /**\r\n   * bit 1..22    mask to check whether a cell contains any string data\r\n   *              we need to check for codepoint and isCombined bits to see\r\n   *              whether a cell contains anything\r\n   *              read:   `isEmpty = !(content & Content.hasContent)`\r\n   */\r\n  HAS_CONTENT_MASK = 0x3FFFFF,\r\n\r\n  /**\r\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\r\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\r\n   *                      `hasWidth = content & Content.widthMask;`\r\n   *                      as long as wcwidth is highest value in `content`:\r\n   *                      `width = content >> Content.widthShift;`\r\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\r\n   *                      shortcut if precondition `0 <= width <= 3` is met:\r\n   *                      `content |= width << Content.widthShift;`\r\n   */\r\n  WIDTH_MASK = 0xC00000,   // 3 << 22\r\n  WIDTH_SHIFT = 22\r\n}\r\n\r\nexport const enum Attributes {\r\n  /**\r\n   * bit 1..8     blue in RGB, color in P256 and P16\r\n   */\r\n  BLUE_MASK = 0xFF,\r\n  BLUE_SHIFT = 0,\r\n  PCOLOR_MASK = 0xFF,\r\n  PCOLOR_SHIFT = 0,\r\n\r\n  /**\r\n   * bit 9..16    green in RGB\r\n   */\r\n  GREEN_MASK = 0xFF00,\r\n  GREEN_SHIFT = 8,\r\n\r\n  /**\r\n   * bit 17..24   red in RGB\r\n   */\r\n  RED_MASK = 0xFF0000,\r\n  RED_SHIFT = 16,\r\n\r\n  /**\r\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\r\n   */\r\n  CM_MASK = 0x3000000,\r\n  CM_DEFAULT = 0,\r\n  CM_P16 = 0x1000000,\r\n  CM_P256 = 0x2000000,\r\n  CM_RGB = 0x3000000,\r\n\r\n  /**\r\n   * bit 1..24  RGB room\r\n   */\r\n  RGB_MASK = 0xFFFFFF\r\n}\r\n\r\nexport const enum FgFlags {\r\n  /**\r\n   * bit 27..32\r\n   */\r\n  INVERSE = 0x4000000,\r\n  BOLD = 0x8000000,\r\n  UNDERLINE = 0x10000000,\r\n  BLINK = 0x20000000,\r\n  INVISIBLE = 0x40000000,\r\n  STRIKETHROUGH = 0x80000000,\r\n}\r\n\r\nexport const enum BgFlags {\r\n  /**\r\n   * bit 27..32 (upper 2 unused)\r\n   */\r\n  ITALIC = 0x4000000,\r\n  DIM = 0x8000000,\r\n  HAS_EXTENDED = 0x10000000,\r\n  PROTECTED = 0x20000000,\r\n  OVERLINE = 0x40000000\r\n}\r\n\r\nexport const enum ExtFlags {\r\n  /**\r\n   * bit 27..32 (upper 3 unused)\r\n   */\r\n  UNDERLINE_STYLE = 0x1C000000\r\n}\r\n\r\nexport const enum UnderlineStyle {\r\n  NONE = 0,\r\n  SINGLE = 1,\r\n  DOUBLE = 2,\r\n  CURLY = 3,\r\n  DOTTED = 4,\r\n  DASHED = 5\r\n}\r\n","/**\r\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\n/**\r\n * Polyfill - Convert UTF32 codepoint into JS string.\r\n * Note: The built-in String.fromCodePoint happens to be much slower\r\n *       due to additional sanity checks. We can avoid them since\r\n *       we always operate on legal UTF32 (granted by the input decoders)\r\n *       and use this faster version instead.\r\n */\r\nexport function stringFromCodePoint(codePoint: number): string {\r\n  if (codePoint > 0xFFFF) {\r\n    codePoint -= 0x10000;\r\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\r\n  }\r\n  return String.fromCharCode(codePoint);\r\n}\r\n\r\n/**\r\n * Convert UTF32 char codes into JS string.\r\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\r\n * in a loop (which is a lot faster).\r\n */\r\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\r\n  let result = '';\r\n  for (let i = start; i < end; ++i) {\r\n    let codepoint = data[i];\r\n    if (codepoint > 0xFFFF) {\r\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate pair\r\n      // conversion rules:\r\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\r\n      //  - add high 10 bits to 0xD800  --> first surrogate\r\n      //  - add low 10 bits to 0xDC00   --> second surrogate\r\n      codepoint -= 0x10000;\r\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\r\n    } else {\r\n      result += String.fromCharCode(codepoint);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\r\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\r\n */\r\nexport class StringToUtf32 {\r\n  private _interim: number = 0;\r\n\r\n  /**\r\n   * Clears interim and resets decoder to clean state.\r\n   */\r\n  public clear(): void {\r\n    this._interim = 0;\r\n  }\r\n\r\n  /**\r\n   * Decode JS string to UTF32 codepoints.\r\n   * The methods assumes stream input and will store partly transmitted\r\n   * surrogate pairs and decode them with the next data chunk.\r\n   * Note: The method does no bound checks for target, therefore make sure\r\n   * the provided input data does not exceed the size of `target`.\r\n   * Returns the number of written codepoints in `target`.\r\n   */\r\n  public decode(input: string, target: Uint32Array): number {\r\n    const length = input.length;\r\n\r\n    if (!length) {\r\n      return 0;\r\n    }\r\n\r\n    let size = 0;\r\n    let startPos = 0;\r\n\r\n    // handle leftover surrogate high\r\n    if (this._interim) {\r\n      const second = input.charCodeAt(startPos++);\r\n      if (0xDC00 <= second && second <= 0xDFFF) {\r\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n      } else {\r\n        // illegal codepoint (USC2 handling)\r\n        target[size++] = this._interim;\r\n        target[size++] = second;\r\n      }\r\n      this._interim = 0;\r\n    }\r\n\r\n    for (let i = startPos; i < length; ++i) {\r\n      const code = input.charCodeAt(i);\r\n      // surrogate pair first\r\n      if (0xD800 <= code && code <= 0xDBFF) {\r\n        if (++i >= length) {\r\n          this._interim = code;\r\n          return size;\r\n        }\r\n        const second = input.charCodeAt(i);\r\n        if (0xDC00 <= second && second <= 0xDFFF) {\r\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n        } else {\r\n          // illegal codepoint (USC2 handling)\r\n          target[size++] = code;\r\n          target[size++] = second;\r\n        }\r\n        continue;\r\n      }\r\n      if (code === 0xFEFF) {\r\n        // BOM\r\n        continue;\r\n      }\r\n      target[size++] = code;\r\n    }\r\n    return size;\r\n  }\r\n}\r\n\r\n/**\r\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\r\n */\r\nexport class Utf8ToUtf32 {\r\n  public interim: Uint8Array = new Uint8Array(3);\r\n\r\n  /**\r\n   * Clears interim bytes and resets decoder to clean state.\r\n   */\r\n  public clear(): void {\r\n    this.interim.fill(0);\r\n  }\r\n\r\n  /**\r\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\r\n   * The methods assumes stream input and will store partly transmitted bytes\r\n   * and decode them with the next data chunk.\r\n   * Note: The method does no bound checks for target, therefore make sure\r\n   * the provided data chunk does not exceed the size of `target`.\r\n   * Returns the number of written codepoints in `target`.\r\n   */\r\n  public decode(input: Uint8Array, target: Uint32Array): number {\r\n    const length = input.length;\r\n\r\n    if (!length) {\r\n      return 0;\r\n    }\r\n\r\n    let size = 0;\r\n    let byte1: number;\r\n    let byte2: number;\r\n    let byte3: number;\r\n    let byte4: number;\r\n    let codepoint = 0;\r\n    let startPos = 0;\r\n\r\n    // handle leftover bytes\r\n    if (this.interim[0]) {\r\n      let discardInterim = false;\r\n      let cp = this.interim[0];\r\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\r\n      let pos = 0;\r\n      let tmp: number;\r\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\r\n        cp <<= 6;\r\n        cp |= tmp;\r\n      }\r\n      // missing bytes - read ahead from input\r\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\r\n      const missing = type - pos;\r\n      while (startPos < missing) {\r\n        if (startPos >= length) {\r\n          return 0;\r\n        }\r\n        tmp = input[startPos++];\r\n        if ((tmp & 0xC0) !== 0x80) {\r\n          // wrong continuation, discard interim bytes completely\r\n          startPos--;\r\n          discardInterim = true;\r\n          break;\r\n        } else {\r\n          // need to save so we can continue short inputs in next call\r\n          this.interim[pos++] = tmp;\r\n          cp <<= 6;\r\n          cp |= tmp & 0x3F;\r\n        }\r\n      }\r\n      if (!discardInterim) {\r\n        // final test is type dependent\r\n        if (type === 2) {\r\n          if (cp < 0x80) {\r\n            // wrong starter byte\r\n            startPos--;\r\n          } else {\r\n            target[size++] = cp;\r\n          }\r\n        } else if (type === 3) {\r\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\r\n            // illegal codepoint or BOM\r\n          } else {\r\n            target[size++] = cp;\r\n          }\r\n        } else {\r\n          if (cp < 0x010000 || cp > 0x10FFFF) {\r\n            // illegal codepoint\r\n          } else {\r\n            target[size++] = cp;\r\n          }\r\n        }\r\n      }\r\n      this.interim.fill(0);\r\n    }\r\n\r\n    // loop through input\r\n    const fourStop = length - 4;\r\n    let i = startPos;\r\n    while (i < length) {\r\n      /**\r\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\r\n       * This is a compromise between speed gain for ASCII\r\n       * and penalty for non ASCII:\r\n       * For best ASCII performance the char should be stored directly into target,\r\n       * but even a single attempt to write to target and compare afterwards\r\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\r\n       * which reduces ASCII performance by ~15%.\r\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\r\n       * compared to the gains.\r\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\r\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\r\n       * thrown away due to the last being a non ASCII char (-10% performance).\r\n       */\r\n      while (i < fourStop\r\n        && !((byte1 = input[i]) & 0x80)\r\n        && !((byte2 = input[i + 1]) & 0x80)\r\n        && !((byte3 = input[i + 2]) & 0x80)\r\n        && !((byte4 = input[i + 3]) & 0x80))\r\n      {\r\n        target[size++] = byte1;\r\n        target[size++] = byte2;\r\n        target[size++] = byte3;\r\n        target[size++] = byte4;\r\n        i += 4;\r\n      }\r\n\r\n      // reread byte1\r\n      byte1 = input[i++];\r\n\r\n      // 1 byte\r\n      if (byte1 < 0x80) {\r\n        target[size++] = byte1;\r\n\r\n        // 2 bytes\r\n      } else if ((byte1 & 0xE0) === 0xC0) {\r\n        if (i >= length) {\r\n          this.interim[0] = byte1;\r\n          return size;\r\n        }\r\n        byte2 = input[i++];\r\n        if ((byte2 & 0xC0) !== 0x80) {\r\n          // wrong continuation\r\n          i--;\r\n          continue;\r\n        }\r\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\r\n        if (codepoint < 0x80) {\r\n          // wrong starter byte\r\n          i--;\r\n          continue;\r\n        }\r\n        target[size++] = codepoint;\r\n\r\n        // 3 bytes\r\n      } else if ((byte1 & 0xF0) === 0xE0) {\r\n        if (i >= length) {\r\n          this.interim[0] = byte1;\r\n          return size;\r\n        }\r\n        byte2 = input[i++];\r\n        if ((byte2 & 0xC0) !== 0x80) {\r\n          // wrong continuation\r\n          i--;\r\n          continue;\r\n        }\r\n        if (i >= length) {\r\n          this.interim[0] = byte1;\r\n          this.interim[1] = byte2;\r\n          return size;\r\n        }\r\n        byte3 = input[i++];\r\n        if ((byte3 & 0xC0) !== 0x80) {\r\n          // wrong continuation\r\n          i--;\r\n          continue;\r\n        }\r\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\r\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\r\n          // illegal codepoint or BOM, no i-- here\r\n          continue;\r\n        }\r\n        target[size++] = codepoint;\r\n\r\n        // 4 bytes\r\n      } else if ((byte1 & 0xF8) === 0xF0) {\r\n        if (i >= length) {\r\n          this.interim[0] = byte1;\r\n          return size;\r\n        }\r\n        byte2 = input[i++];\r\n        if ((byte2 & 0xC0) !== 0x80) {\r\n          // wrong continuation\r\n          i--;\r\n          continue;\r\n        }\r\n        if (i >= length) {\r\n          this.interim[0] = byte1;\r\n          this.interim[1] = byte2;\r\n          return size;\r\n        }\r\n        byte3 = input[i++];\r\n        if ((byte3 & 0xC0) !== 0x80) {\r\n          // wrong continuation\r\n          i--;\r\n          continue;\r\n        }\r\n        if (i >= length) {\r\n          this.interim[0] = byte1;\r\n          this.interim[1] = byte2;\r\n          this.interim[2] = byte3;\r\n          return size;\r\n        }\r\n        byte4 = input[i++];\r\n        if ((byte4 & 0xC0) !== 0x80) {\r\n          // wrong continuation\r\n          i--;\r\n          continue;\r\n        }\r\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\r\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\r\n          // illegal codepoint, no i-- here\r\n          continue;\r\n        }\r\n        target[size++] = codepoint;\r\n      } else {\r\n        // illegal byte, just skip\r\n      }\r\n    }\r\n    return size;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n *\r\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\r\n */\r\n/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { IServiceIdentifier } from 'common/services/Services';\r\n\r\nconst DI_TARGET = 'di$target';\r\nconst DI_DEPENDENCIES = 'di$dependencies';\r\n\r\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\r\n\r\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\r\n  return ctor[DI_DEPENDENCIES] || [];\r\n}\r\n\r\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\r\n  if (serviceRegistry.has(id)) {\r\n    return serviceRegistry.get(id)!;\r\n  }\r\n\r\n  const decorator: any = function (target: Function, key: string, index: number): any {\r\n    if (arguments.length !== 3) {\r\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\r\n    }\r\n\r\n    storeServiceDependency(decorator, target, index);\r\n  };\r\n\r\n  decorator.toString = () => id;\r\n\r\n  serviceRegistry.set(id, decorator);\r\n  return decorator;\r\n}\r\n\r\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\r\n  if ((target as any)[DI_TARGET] === target) {\r\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\r\n  } else {\r\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\r\n    (target as any)[DI_TARGET] = target;\r\n  }\r\n}\r\n","/**\r\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\r\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\r\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColor, CursorStyle, IOscLinkData } from 'common/Types';\r\nimport { createDecorator } from 'common/services/ServiceRegistry';\r\nimport { IDecorationOptions, IDecoration, ILinkHandler, IWindowsPty, ILogger } from 'xterm';\r\n\r\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\r\nexport interface IBufferService {\r\n  serviceBrand: undefined;\r\n\r\n  readonly cols: number;\r\n  readonly rows: number;\r\n  readonly buffer: IBuffer;\r\n  readonly buffers: IBufferSet;\r\n  isUserScrolling: boolean;\r\n  onResize: IEvent<{ cols: number, rows: number }>;\r\n  onScroll: IEvent<number>;\r\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\r\n  scrollToBottom(): void;\r\n  scrollToTop(): void;\r\n  scrollToLine(line: number): void;\r\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\r\n  scrollPages(pageCount: number): void;\r\n  resize(cols: number, rows: number): void;\r\n  reset(): void;\r\n}\r\n\r\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\r\nexport interface ICoreMouseService {\r\n  activeProtocol: string;\r\n  activeEncoding: string;\r\n  areMouseEventsActive: boolean;\r\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\r\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\r\n  reset(): void;\r\n\r\n  /**\r\n   * Triggers a mouse event to be sent.\r\n   *\r\n   * Returns true if the event passed all protocol restrictions and a report\r\n   * was sent, otherwise false. The return value may be used to decide whether\r\n   * the default event action in the bowser component should be omitted.\r\n   *\r\n   * Note: The method will change values of the given event object\r\n   * to fullfill protocol and encoding restrictions.\r\n   */\r\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\r\n\r\n  /**\r\n   * Event to announce changes in mouse tracking.\r\n   */\r\n  onProtocolChange: IEvent<CoreMouseEventType>;\r\n\r\n  /**\r\n   * Human readable version of mouse events.\r\n   */\r\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\r\n}\r\n\r\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\r\nexport interface ICoreService {\r\n  serviceBrand: undefined;\r\n\r\n  /**\r\n   * Initially the cursor will not be visible until the first time the terminal\r\n   * is focused.\r\n   */\r\n  isCursorInitialized: boolean;\r\n  isCursorHidden: boolean;\r\n\r\n  readonly modes: IModes;\r\n  readonly decPrivateModes: IDecPrivateModes;\r\n\r\n  readonly onData: IEvent<string>;\r\n  readonly onUserInput: IEvent<void>;\r\n  readonly onBinary: IEvent<string>;\r\n  readonly onRequestScrollToBottom: IEvent<void>;\r\n\r\n  reset(): void;\r\n\r\n  /**\r\n   * Triggers the onData event in the public API.\r\n   * @param data The data that is being emitted.\r\n   * @param wasUserInput Whether the data originated from the user (as opposed to\r\n   * resulting from parsing incoming data). When true this will also:\r\n   * - Scroll to the bottom of the buffer if option scrollOnUserInput is true.\r\n   * - Fire the `onUserInput` event (so selection can be cleared).\r\n   */\r\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\r\n\r\n  /**\r\n   * Triggers the onBinary event in the public API.\r\n   * @param data The data that is being emitted.\r\n   */\r\n  triggerBinaryEvent(data: string): void;\r\n}\r\n\r\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\r\nexport interface ICharsetService {\r\n  serviceBrand: undefined;\r\n\r\n  charset: ICharset | undefined;\r\n  readonly glevel: number;\r\n\r\n  reset(): void;\r\n\r\n  /**\r\n   * Set the G level of the terminal.\r\n   * @param g\r\n   */\r\n  setgLevel(g: number): void;\r\n\r\n  /**\r\n   * Set the charset for the given G level of the terminal.\r\n   * @param g\r\n   * @param charset\r\n   */\r\n  setgCharset(g: number, charset: ICharset | undefined): void;\r\n}\r\n\r\nexport interface IServiceIdentifier<T> {\r\n  (...args: any[]): void;\r\n  type: T;\r\n}\r\n\r\nexport interface IBrandedService {\r\n  serviceBrand: undefined;\r\n}\r\n\r\ntype GetLeadingNonServiceArgs<TArgs extends any[]> = TArgs extends [] ? []\r\n  : TArgs extends [...infer TFirst, infer TLast] ? TLast extends IBrandedService ? GetLeadingNonServiceArgs<TFirst> : TArgs\r\n    : never;\r\n\r\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\r\nexport interface IInstantiationService {\r\n  serviceBrand: undefined;\r\n\r\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\r\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\r\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\r\n}\r\n\r\nexport enum LogLevelEnum {\r\n  DEBUG = 0,\r\n  INFO = 1,\r\n  WARN = 2,\r\n  ERROR = 3,\r\n  OFF = 4\r\n}\r\n\r\nexport const ILogService = createDecorator<ILogService>('LogService');\r\nexport interface ILogService {\r\n  serviceBrand: undefined;\r\n\r\n  readonly logLevel: LogLevelEnum;\r\n\r\n  debug(message: any, ...optionalParams: any[]): void;\r\n  info(message: any, ...optionalParams: any[]): void;\r\n  warn(message: any, ...optionalParams: any[]): void;\r\n  error(message: any, ...optionalParams: any[]): void;\r\n}\r\n\r\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\r\nexport interface IOptionsService {\r\n  serviceBrand: undefined;\r\n\r\n  /**\r\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\r\n   * single options without any validation as we trust TypeScript to enforce correct usage\r\n   * internally.\r\n   */\r\n  readonly rawOptions: Required<ITerminalOptions>;\r\n\r\n  /**\r\n   * Options as exposed through the public API, this property uses getters and setters with\r\n   * validation which makes it safer but slower. {@link rawOptions} should be used for pretty much\r\n   * all internal usage for performance reasons.\r\n   */\r\n  readonly options: Required<ITerminalOptions>;\r\n\r\n  /**\r\n   * Adds an event listener for when any option changes.\r\n   */\r\n  readonly onOptionChange: IEvent<keyof ITerminalOptions>;\r\n\r\n  /**\r\n   * Adds an event listener for when a specific option changes, this is a convenience method that is\r\n   * preferred over {@link onOptionChange} when only a single option is being listened to.\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (arg1: Required<ITerminalOptions>[T]) => any): IDisposable;\r\n\r\n  /**\r\n   * Adds an event listener for when a set of specific options change, this is a convenience method\r\n   * that is preferred over {@link onOptionChange} when multiple options are being listened to and\r\n   * handled the same way.\r\n   */\r\n  // eslint-disable-next-line @typescript-eslint/naming-convention\r\n  onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable;\r\n}\r\n\r\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\r\nexport type LogLevel = 'debug' | 'info' | 'warn' | 'error' | 'off';\r\n\r\nexport interface ITerminalOptions {\r\n  allowProposedApi?: boolean;\r\n  allowTransparency?: boolean;\r\n  altClickMovesCursor?: boolean;\r\n  cols?: number;\r\n  convertEol?: boolean;\r\n  cursorBlink?: boolean;\r\n  cursorStyle?: CursorStyle;\r\n  cursorWidth?: number;\r\n  customGlyphs?: boolean;\r\n  disableStdin?: boolean;\r\n  drawBoldTextInBrightColors?: boolean;\r\n  fastScrollModifier?: 'none' | 'alt' | 'ctrl' | 'shift';\r\n  fastScrollSensitivity?: number;\r\n  fontSize?: number;\r\n  fontFamily?: string;\r\n  fontWeight?: FontWeight;\r\n  fontWeightBold?: FontWeight;\r\n  letterSpacing?: number;\r\n  lineHeight?: number;\r\n  linkHandler?: ILinkHandler | null;\r\n  logLevel?: LogLevel;\r\n  logger?: ILogger | null;\r\n  macOptionIsMeta?: boolean;\r\n  macOptionClickForcesSelection?: boolean;\r\n  minimumContrastRatio?: number;\r\n  rightClickSelectsWord?: boolean;\r\n  rows?: number;\r\n  screenReaderMode?: boolean;\r\n  scrollback?: number;\r\n  scrollOnUserInput?: boolean;\r\n  scrollSensitivity?: number;\r\n  smoothScrollDuration?: number;\r\n  tabStopWidth?: number;\r\n  theme?: ITheme;\r\n  windowsMode?: boolean;\r\n  windowsPty?: IWindowsPty;\r\n  windowOptions?: IWindowOptions;\r\n  wordSeparator?: string;\r\n  overviewRulerWidth?: number;\r\n\r\n  [key: string]: any;\r\n  cancelEvents: boolean;\r\n  termName: string;\r\n}\r\n\r\nexport interface ITheme {\r\n  foreground?: string;\r\n  background?: string;\r\n  cursor?: string;\r\n  cursorAccent?: string;\r\n  selectionForeground?: string;\r\n  selectionBackground?: string;\r\n  selectionInactiveBackground?: string;\r\n  black?: string;\r\n  red?: string;\r\n  green?: string;\r\n  yellow?: string;\r\n  blue?: string;\r\n  magenta?: string;\r\n  cyan?: string;\r\n  white?: string;\r\n  brightBlack?: string;\r\n  brightRed?: string;\r\n  brightGreen?: string;\r\n  brightYellow?: string;\r\n  brightBlue?: string;\r\n  brightMagenta?: string;\r\n  brightCyan?: string;\r\n  brightWhite?: string;\r\n  extendedAnsi?: string[];\r\n}\r\n\r\nexport const IOscLinkService = createDecorator<IOscLinkService>('OscLinkService');\r\nexport interface IOscLinkService {\r\n  serviceBrand: undefined;\r\n  /**\r\n   * Registers a link to the service, returning the link ID. The link data is managed by this\r\n   * service and will be freed when this current cursor position is trimmed off the buffer.\r\n   */\r\n  registerLink(linkData: IOscLinkData): number;\r\n  /**\r\n   * Adds a line to a link if needed.\r\n   */\r\n  addLineToLink(linkId: number, y: number): void;\r\n  /** Get the link data associated with a link ID. */\r\n  getLinkData(linkId: number): IOscLinkData | undefined;\r\n}\r\n\r\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\r\nexport interface IUnicodeService {\r\n  serviceBrand: undefined;\r\n  /** Register an Unicode version provider. */\r\n  register(provider: IUnicodeVersionProvider): void;\r\n  /** Registered Unicode versions. */\r\n  readonly versions: string[];\r\n  /** Currently active version. */\r\n  activeVersion: string;\r\n  /** Event triggered, when activate version changed. */\r\n  readonly onChange: IEvent<string>;\r\n\r\n  /**\r\n   * Unicode version dependent\r\n   */\r\n  wcwidth(codepoint: number): number;\r\n  getStringCellWidth(s: string): number;\r\n}\r\n\r\nexport interface IUnicodeVersionProvider {\r\n  readonly version: string;\r\n  wcwidth(ucs: number): 0 | 1 | 2;\r\n}\r\n\r\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\r\nexport interface IDecorationService extends IDisposable {\r\n  serviceBrand: undefined;\r\n  readonly decorations: IterableIterator<IInternalDecoration>;\r\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\r\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\r\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\r\n  reset(): void;\r\n  /**\r\n   * Trigger a callback over the decoration at a cell (in no particular order). This uses a callback\r\n   * instead of an iterator as it's typically used in hot code paths.\r\n   */\r\n  forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void;\r\n}\r\nexport interface IInternalDecoration extends IDecoration {\r\n  readonly options: IDecorationOptions;\r\n  readonly backgroundColorRGB: IColor | undefined;\r\n  readonly foregroundColorRGB: IColor | undefined;\r\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\r\n * @license MIT\r\n */\r\n\r\nimport { ICharacterJoinerService, ICharSizeService, ICoreBrowserService, IRenderService, ISelectionService, IThemeService } from 'browser/services/Services';\r\nimport { ITerminal } from 'browser/Types';\r\nimport { CanvasRenderer } from './CanvasRenderer';\r\nimport { IBufferService, ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\r\nimport { ITerminalAddon, Terminal } from 'xterm';\r\nimport { EventEmitter, forwardEvent } from 'common/EventEmitter';\r\nimport { Disposable, toDisposable } from 'common/Lifecycle';\r\n\r\nexport class CanvasAddon extends Disposable implements ITerminalAddon {\r\n  private _terminal?: Terminal;\r\n  private _renderer?: CanvasRenderer;\r\n\r\n  private readonly _onChangeTextureAtlas = this.register(new EventEmitter<HTMLCanvasElement>());\r\n  public readonly onChangeTextureAtlas = this._onChangeTextureAtlas.event;\r\n  private readonly _onAddTextureAtlasCanvas = this.register(new EventEmitter<HTMLCanvasElement>());\r\n  public readonly onAddTextureAtlasCanvas = this._onAddTextureAtlasCanvas.event;\r\n\r\n  public get textureAtlas(): HTMLCanvasElement | undefined {\r\n    return this._renderer?.textureAtlas;\r\n  }\r\n\r\n  public activate(terminal: Terminal): void {\r\n    const core = (terminal as any)._core as ITerminal;\r\n    if (!terminal.element) {\r\n      this.register(core.onWillOpen(() => this.activate(terminal)));\r\n      return;\r\n    }\r\n\r\n    this._terminal = terminal;\r\n    const coreService = core.coreService;\r\n    const optionsService = core.optionsService;\r\n    const screenElement = core.screenElement!;\r\n    const linkifier = core.linkifier2;\r\n\r\n    const unsafeCore = core as any;\r\n    const bufferService: IBufferService = unsafeCore._bufferService;\r\n    const renderService: IRenderService = unsafeCore._renderService;\r\n    const characterJoinerService: ICharacterJoinerService = unsafeCore._characterJoinerService;\r\n    const charSizeService: ICharSizeService = unsafeCore._charSizeService;\r\n    const coreBrowserService: ICoreBrowserService = unsafeCore._coreBrowserService;\r\n    const decorationService: IDecorationService = unsafeCore._decorationService;\r\n    const themeService: IThemeService = unsafeCore._themeService;\r\n\r\n    this._renderer = new CanvasRenderer(terminal, screenElement, linkifier, bufferService, charSizeService, optionsService, characterJoinerService, coreService, coreBrowserService, decorationService, themeService);\r\n    this.register(forwardEvent(this._renderer.onChangeTextureAtlas, this._onChangeTextureAtlas));\r\n    this.register(forwardEvent(this._renderer.onAddTextureAtlasCanvas, this._onAddTextureAtlasCanvas));\r\n    renderService.setRenderer(this._renderer);\r\n    renderService.handleResize(bufferService.cols, bufferService.rows);\r\n\r\n    this.register(toDisposable(() => {\r\n      renderService.setRenderer((this._terminal as any)._core._createRenderer());\r\n      renderService.handleResize(terminal.cols, terminal.rows);\r\n      this._renderer?.dispose();\r\n      this._renderer = undefined;\r\n    }));\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","BaseRenderLayer","Disposable","canvas","this","_canvas","cacheCanvas","_charAtlas","pages","constructor","_terminal","_container","id","zIndex","_alpha","_themeService","_bufferService","_optionsService","_decorationService","_coreBrowserService","super","_deviceCharWidth","_deviceCharHeight","_deviceCellWidth","_deviceCellHeight","_deviceCharLeft","_deviceCharTop","_selectionModel","createSelectionRenderModel","_bitmapGenerator","_onAddTextureAtlasCanvas","register","EventEmitter","onAddTextureAtlasCanvas","event","_cellColorResolver","CellColorResolver","document","createElement","classList","add","style","toString","_initCanvas","appendChild","_refreshCharAtlas","colors","onChangeColors","e","reset","handleSelectionChanged","selectionStart","selectionEnd","columnSelectMode","toDisposable","remove","dispose","_ctx","throwIfFalsy","getContext","alpha","_clearAll","handleBlur","handleFocus","handleCursorMove","handleGridChanged","startRow","endRow","start","end","update","_setTransparency","oldCanvas","cloneNode","replaceChild","rows","colorSet","_charAtlasDisposable","acquireTextureAtlas","rawOptions","dpr","forwardEvent","warmUp","i","length","BitmapGenerator","resize","dim","device","cell","width","height","char","left","top","css","clearTextureAtlas","clearTexture","_fillCells","x","y","fillRect","_fillMiddleLineAtCells","cellOffset","Math","ceil","_fillBottomLineAtCells","pixelOffset","_curlyUnderlineAtCell","save","beginPath","strokeStyle","fillStyle","lineWidth","xOffset","xLeft","xMid","xRight","yMid","yMidBot","yMidTop","moveTo","bezierCurveTo","stroke","restore","_dottedUnderlineAtCell","setLineDash","lineTo","closePath","_dashedUnderlineAtCell","_fillLeftLineAtCell","_strokeRectAtCell","strokeRect","clearRect","background","_clearCells","_fillCharTrueColor","font","_getFont","textBaseline","TEXT_BASELINE","_clipRow","drawSuccess","customGlyphs","tryDrawCustomChar","getChars","fontSize","fillText","_drawChars","chars","resolve","buffer","ydisp","glyph","getRasterizedGlyphCombinedChar","result","bg","fg","ext","getRasterizedGlyph","getCode","WHITESPACE_CELL_CODE","size","texturePage","bitmap","close","version","refresh","drawImage","texturePosition","offset","rect","cols","clip","isBold","isItalic","fontWeightBold","fontWeight","fontFamily","_bitmap","_state","_commitTimeout","undefined","isSafari","window","setTimeout","_generate","createImageBitmap","then","CanvasRenderer","_screenElement","linkifier2","_charSizeService","characterJoinerService","coreService","decorationService","_onRequestRedraw","onRequestRedraw","_onChangeTextureAtlas","onChangeTextureAtlas","allowTransparency","_renderLayers","TextRenderLayer","SelectionRenderLayer","LinkRenderLayer","CursorRenderLayer","layer","dimensions","createRenderDimensions","_devicePixelRatio","_updateDimensions","observeDevicePixelDimensions","w","h","_setCanvasDevicePixelDimensions","l","removeTerminalFromCache","textureAtlas","handleDevicePixelRatioChange","handleResize","handleCharSizeChanged","_runOperation","selectionForeground","fire","clear","operation","renderRows","hasValidSize","floor","lineHeight","round","letterSpacing","_requestRedrawViewport","terminal","container","bufferService","optionsService","_coreService","coreBrowserService","themeService","_cell","CellData","isFocused","_cursorRenderers","_renderBarCursor","bind","_renderBlockCursor","_renderUnderlineCursor","onOptionChange","_handleOptionsChanged","_cursorBlinkStateManager","_clearCursor","restartBlinkAnimation","pause","resume","cursorBlink","CursorBlinkStateManager","_render","isPaused","triggeredByAnimationFrame","isCursorInitialized","isCursorHidden","cursorY","ybase","viewportRelativeCursorY","cursorX","min","lines","get","loadCell","content","cursor","cursorStyle","_renderBlurCursor","getWidth","isCursorVisible","isFirefox","cursorWidth","cursorAccent","_renderCallback","_restartInterval","_blinkStartTimeout","_blinkInterval","clearInterval","clearTimeout","_animationFrame","cancelAnimationFrame","_animationTimeRestarted","Date","now","requestAnimationFrame","timeToStart","BLINK_INTERVAL","time","setInterval","cache","push","onShowLinkUnderline","_handleShowLinkUnderline","onHideLinkUnderline","_handleHideLinkUnderline","_clearCurrentLink","x1","y1","middleRowCount","y2","x2","INVERTED_DEFAULT_COLOR","is256Color","ansi","foreground","_clearState","_redrawSelection","_didStateChange","viewportStartRow","viewportEndRow","viewportCappedStartRow","max","viewportCappedEndRow","selectionBackgroundTransparent","selectionInactiveBackgroundTransparent","startCol","startRowEndCol","middleRowsCount","endCol","_areCoordinatesEqual","coord1","coord2","_characterJoinerService","_characterWidth","_characterFont","_characterOverlapCache","_workCell","GridCache","onSpecificOptionChange","value","terminalFont","_forEachCell","firstRow","lastRow","callback","row","line","joinedRanges","getJoinedCharacters","isJoined","lastCharX","range","shift","JoinedCellData","translateToString","_isOverlapping","getCodePoint","NULL_CELL_CODE","_drawBackground","ctx","startX","startY","prevFillStyle","nextFillStyle","isInverse","isFgDefault","isFgRGB","AttributeData","toColorRGB","getFgColor","join","isBgRGB","getBgColor","isBgPalette","isTop","forEachDecorationAtCell","d","options","backgroundColorRGB","_drawForeground","beginFrame","hasOwnProperty","overlaps","measureText","$colors","$fg","$bg","$hasFg","$hasBg","$isSelected","_selectionRenderModel","extended","rgba","foregroundColorRGB","isCellSelected","selectionBackgroundOpaque","selectionInactiveBackgroundOpaque","charAtlasCache","deviceCellWidth","deviceCellHeight","deviceCharWidth","deviceCharHeight","devicePixelRatio","newConfig","generateConfig","entry","ownedByIndex","ownedBy","indexOf","configEquals","config","atlas","splice","core","_core","newEntry","TextureAtlas","unicodeService","index","clonedColors","NULL_COLOR","slice","contrastCache","drawBoldTextInBrightColors","minimumContrastRatio","a","b","colorCode","DIM_OPACITY","isLegacyEdge","blockElementDefinitions","patternCharacterDefinitions","boxDrawingDefinitions","xp","yp","powerlineDefinitions","type","rightPadding","leftPadding","c","yOffset","blockElementDefinition","charDefinition","box","xEighth","yEighth","drawBlockElementChar","patternDefinition","patternSet","cachedPatterns","Map","set","Error","pattern","tmpCanvas","tmpCtx","imageData","ImageData","r","g","startsWith","parseInt","substring","split","map","parseFloat","data","putImageData","createPattern","drawPatternChar","boxDrawingDefinition","instructions","Object","entries","actualInstructions","Number","instruction","f","svgToCanvasInstructionMap","console","error","args","translateArgs","drawBoxDrawingChar","powerlineDefinition","clipRegion","Path2D","cssLineWidth","fill","drawPowerlineChar","clamp","cellWidth","cellHeight","doClamp","element","parentWindow","observer","ResizeObserver","find","target","disconnect","devicePixelContentBoxSize","inlineSize","blockSize","observe","isPowerlineGlyph","codepoint","isBoxOrBlockGlyph","SelectionRenderModel","hasSelection","active","viewportY","NULL_RASTERIZED_GLYPH","texturePositionClipSpace","sizeClipSpace","$glyph","_pages","_document","_config","_unicodeService","_didWarmUp","_cacheMap","FourKeyMap","_cacheMapCombined","_activePages","_workBoundingBox","bottom","right","_workAttributeData","_textureSize","_onRemoveTextureAtlasCanvas","onRemoveTextureAtlasCanvas","_requestClearModel","_createNewPage","_tmpCanvas","createCanvas","TMP_CANVAS_GLYPH_PADDING","_tmpCtx","willReadFrequently","page","_doWarmUp","queue","IdleTaskQueue","enqueue","DEFAULT_COLOR","DEFAULT_EXT","rasterizedGlyph","_drawToCache","currentRow","maxAtlasPages","queueMicrotask","pagesBySize","filter","maxTextureSize","sort","percentageUsed","sameSizeI","mergingPages","sortedMergingPagesIndexes","glyphs","mergedPageIndex","mergedPage","_mergePages","_deletePage","newPage","AtlasPage","mergedSize","p","pageIndex","j","adjustingPage","_getFromCacheMap","code","cacheMap","key","_getColorFromAnsiIndex","idx","_getBackgroundColor","bgColorMode","bgColor","inverse","arr","toColor","_getForegroundColor","fgColorMode","fgColor","bold","excludeFromContrastRatioDemands","minimumContrastColor","_getMinimumContrastColor","color","opaque","multiplyOpacity","_resolveBackgroundRgba","_resolveForegroundRgba","adjustedColor","getColor","bgRgba","fgRgba","ensureContrastRatio","setColor","codeOrChars","String","fromCharCode","allowedWidth","allowedHeight","isInvisible","isDim","italic","underline","isUnderline","strikethrough","isStrikethrough","overline","isOverline","getFgColorMode","getBgColorMode","temp","temp2","backgroundColor","globalCompositeOperation","fontStyle","powerlineGlyph","charCodeAt","restrictedPowerlineGlyph","isRestrictedPowerlineGlyph","foregroundColor","padding","customGlyph","chWidth","enableClearThresholdCheck","wcwidth","getStringCellWidth","isUnderlineColorDefault","isUnderlineColorRGB","getUnderlineColor","yTop","yBot","xChLeft","xChRight","xChMid","underlineStyle","yCurlyBot","yCurlyTop","metrics","actualBoundingBoxDescent","strokeText","isBeyondCellBounds","clearColor","getImageData","isEmpty","checkCompletelyTransparent","_findGlyphBoundingBox","activePage","activeRow","fixedRows","wasNewPageCreated","candidatePage","addGlyph","boundingBox","restrictedGlyph","found","alphaOffset","_usedPixels","_glyphs","sourcePages","enableThresholdCheck","fgR","fgG","fgB","threshold","abs","firstCell","combinedData","_width","isCombined","setFromCharData","getAsCharData","CharacterJoinerService","_characterJoiners","_nextCharacterJoinerId","handler","joiner","deregister","joinerId","ranges","lineStr","rangeStartColumn","currentStringIndex","rangeStartStringIndex","rangeAttrFG","getFg","rangeAttrBG","getBg","getTrimmedLength","_getJoinedRanges","WHITESPACE_CELL_CHAR","startIndex","endIndex","lineData","text","allJoinedRanges","joinerRanges","_mergeRanges","_stringRangesToCellRanges","currentRangeIndex","currentRangeStarted","currentRange","getString","newRange","inRange","IBufferService","$r","$g","$b","$a","channels","rgb","toPaddedHex","s","contrastRatio","l1","l2","toCss","toRgba","opacity","toChannels","blend","bgR","bgG","bgB","isOpaque","ratio","rgbaColor","factor","$ctx","$litmusColor","isNode","createLinearGradient","match","repeat","rgbaMatch","relativeLuminance2","rs","gs","bs","pow","relativeLuminance","reduceLuminance","cr","increaseLuminance","bgL","fgL","resultA","resultARatio","resultB","_listeners","_disposed","_event","listener","arg1","arg2","call","from","to","disposeArray","disposables","_disposables","_isDisposed","unregister","array","TwoKeyMap","_data","first","second","third","fourth","navigator","userAgent","platform","includes","test","majorVersion","isMac","isIpad","isIphone","isWindows","isLinux","isChromeOS","TaskQueue","_tasks","_i","task","_start","flush","_idleCallback","_cancelCallback","_requestCallback","_process","deadline","taskDuration","longestTask","lastDeadlineRemaining","timeRemaining","deadlineRemaining","warn","PriorityTaskQueue","_createDeadline","identifier","duration","requestIdleCallback","cancelIdleCallback","_queue","ExtendedAttrs","fromColorRGB","clone","newObj","hasExtendedAttrs","isBlink","isProtected","isFgPalette","isBgDefault","isAttributeDefault","updateExtended","underlineColor","getUnderlineColorMode","isUnderlineColorPalette","getUnderlineStyle","_urlId","_ext","urlId","fromCharData","obj","stringFromCodePoint","CHAR_DATA_ATTR_INDEX","combined","CHAR_DATA_CHAR_INDEX","CHAR_DATA_WIDTH_INDEX","DEFAULT_ATTR","CHAR_DATA_CODE_INDEX","NULL_CELL_CHAR","NULL_CELL_WIDTH","WHITESPACE_CELL_WIDTH","codePoint","_interim","decode","input","startPos","interim","Uint8Array","byte1","byte2","byte3","byte4","discardInterim","cp","tmp","pos","missing","fourStop","DI_TARGET","DI_DEPENDENCIES","serviceRegistry","ctor","has","decorator","arguments","storeServiceDependency","LogLevelEnum","createDecorator","ICoreMouseService","ICoreService","ICharsetService","IInstantiationService","ILogService","IOptionsService","IOscLinkService","IUnicodeService","IDecorationService","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","CanvasAddon","_renderer","activate","onWillOpen","screenElement","linkifier","unsafeCore","renderService","_renderService","charSizeService","setRenderer","_createRenderer"],"sourceRoot":""}